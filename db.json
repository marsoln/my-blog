{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/alpha-dust/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1475236522095},{"_id":"themes/alpha-dust/LICENSE","hash":"9603ca6555bd5f0710038003b8a503bd29ca67a1","modified":1475236522098},{"_id":"themes/alpha-dust/README.md","hash":"402518c350275303ede195a62e9e05bfa236b190","modified":1475236522101},{"_id":"themes/alpha-dust/_config.yml","hash":"709002727b87ee7b95c63ded346fb49d8c930f3f","modified":1482734215666},{"_id":"source/_posts/Chat Server.md","hash":"010c93a9272389a6af83490bc65edd3960dfe823","modified":1475236522062},{"_id":"source/_posts/奇技淫巧.md","hash":"0b8bf8d3867b59b0f1e1bf91500a7bf77bd951cd","modified":1475236522081},{"_id":"source/_posts/工具使用.md","hash":"87136495149754d86fc5dbe6730214cc35e0092c","modified":1476180130000},{"_id":"source/_posts/好玩的社区.md","hash":"08b3c9e4780837e62c32d7b169edaae17188693b","modified":1475982484515},{"_id":"source/_posts/踩过的坑.md","hash":"e27abf85d53515a42fd4c3577bc8721181e38481","modified":1476962273000},{"_id":"themes/alpha-dust/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1475236522107},{"_id":"themes/alpha-dust/languages/default.yml","hash":"34b245026a8456938de82455bdfb21ea137cd721","modified":1475236522110},{"_id":"themes/alpha-dust/languages/en.yml","hash":"f0e62ce15272b2c59c9ae7f7615a286c69bf7113","modified":1475236522112},{"_id":"themes/alpha-dust/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1475236522114},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1475236522116},{"_id":"themes/alpha-dust/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1475236522119},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1475236522125},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1475236522121},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"34b245026a8456938de82455bdfb21ea137cd721","modified":1475236522125},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1475236522123},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1475236522127},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"30620dd5e4f24e9d624c235dd16396c5e130deef","modified":1475236522218},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"0dcf6f1b66722ddadb7479f4edf20281d30a7879","modified":1475236522225},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"953256db94b3ed9ce2870d4b9203fe3a1e5b37bb","modified":1475236522236},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"9d1ba5fb467ab4269cbc925b3f2122a29b821b8d","modified":1475236522231},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"4030d46464fd653c0e72a7615c19e7b2d73aa21d","modified":1475236522241},{"_id":"source/_draft/GraphQL/响应.md","hash":"b6629f56f2c6543417242101bef6ff13df2a4df6","modified":1475236522022},{"_id":"source/_draft/GraphQL/GraphQL.md","hash":"401a3cbffc711913169d125853be77db012e19ca","modified":1475236522017},{"_id":"source/_draft/GraphQL/执行.md","hash":"d26335e2af9c03dbcc8cb64659ebcc78a1cfe26b","modified":1475236522026},{"_id":"source/_draft/GraphQL/类型系统.md","hash":"7560c8497add01801aafa6d09adaef29beb95e4e","modified":1475236522031},{"_id":"source/_draft/GraphQL/自省性.md","hash":"87fc332cf84ee009a7909d7ca6094286912194dd","modified":1475236522035},{"_id":"source/_draft/GraphQL/附录A 符号约定.md","hash":"c8a73f8f6ce98170b1719458b9b91c1394ee16dc","modified":1475236522045},{"_id":"source/_draft/GraphQL/语言.md","hash":"9cfbec59bb729ec1e1117b4177cf973bc3f63034","modified":1475236522040},{"_id":"source/_draft/GraphQL/附录B 语法总结.md","hash":"36a96f144bb84b9ee93a1d24899baed3c7a28e2f","modified":1475236522048},{"_id":"source/_draft/GraphQL/预览.md","hash":"06900303c0b34aa252e265e23cd26cb089f78da2","modified":1475236522052},{"_id":"source/_draft/GraphQL/验证.md","hash":"8cfad6d25aca8bff1c3a6b0f4a27e8a02342374f","modified":1475236522057},{"_id":"source/_posts/jsFullStackSeries/02.md","hash":"120878dab6c2713a5848f22ac5667dcf0cbd2a14","modified":1475236522070},{"_id":"source/_posts/jsFullStackSeries/01.md","hash":"495ea05808afe85d9b0a96d224c3740195124c1e","modified":1475236522065},{"_id":"source/_posts/jsFullStackSeries/03.md","hash":"a176b3934df98af5e146726c76783df41f8b30cf","modified":1475236522075},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"43ad85ba781c3c98354e9873fe8a49fe50f08bb4","modified":1475236522135},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"f9608407a583bff104acb07c03fd8108056798c7","modified":1475236522140},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"82e5966388eee827b80b918d4ae04c55b8e4049b","modified":1475236522152},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"902501f05052cc60ac95c0914ea3b105ca208440","modified":1475236522159},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"b0bb9c59f517302348aafcb2b832513d53d59055","modified":1475236522168},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"f85cb280ae965fdd1d92af8bc0ece6c4d826a449","modified":1475236522176},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"b07b8f7f43811e1b6f5382f6eb4cd778a70bd3cc","modified":1475236522172},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"8c20579849498be304e47d0f10d42149971eb352","modified":1475236522181},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"63c93ed2dc9c5d9eefeaa8130e9728848731fa64","modified":1475236522186},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1475236522191},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"b26654fe1242ee5e9ba2252ba099268656927767","modified":1475236522201},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"4fa635135f97eaa5f324cf83cb04b083ffdd979f","modified":1475236522204},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"760cdaf07f808c9e8637f58e412aea43c4021ec2","modified":1475236522207},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"58982acc8dc2b83c6c2cdf64a2c4156e947254d0","modified":1475236522209},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"17454ba3eef92075c4848bb43fd626b53760334b","modified":1475236522269},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522270},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1475236522274},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1475236522277},{"_id":"themes/alpha-dust/template/css/style.css","hash":"9c3710b32a4466c3ea5b6232a1af8fccc5877216","modified":1475236522280},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"a3d739266fbf9aff73443cf745e4a4d5c284cffc","modified":1475236522283},{"_id":"themes/alpha-dust/source/js/main.js","hash":"e644dd5c0742f209072c48499c1beba20bc1e496","modified":1475236522270},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522329},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1475236522329},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522330},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1475236522331},{"_id":"themes/alpha-dust/template/js/main.js","hash":"ed46e32f0bf6f4502a6558f9ad03843031dc318d","modified":1475236522341},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1475236522335},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1475236522289},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1475236522304},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1475236522325},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1475236522328},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"e51d15046b9e10d4342b67bb83fd3a0c42f5d60e","modified":1475236522244},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"00300febf434b78ad93087e83481d2bf9d2c54a5","modified":1475236522246},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"a741adad7f208787c5d863a443da9a3438a01331","modified":1475236522253},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"c8dd4d0f945e8ca43df2ad71efb4e48ee4f56f5a","modified":1475236522250},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"d74c2d8968b909c4e2cdab2235b5cebf6eef91c8","modified":1475236522255},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"7419c10bf98d059fa0263427c68e009cc0d4c4fa","modified":1475236522257},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"7dfcf43dd05063115f7ebf9e63219a102b35a3ba","modified":1475236522259},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"d992986c18d5cf41a8b83bd22e29d43f41bb85e0","modified":1475236522262},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"bc8376e97266f047457117a965321efdd58e68a3","modified":1475236522265},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"f1dbc90648d67e03ba3b311c967977aa50888b38","modified":1475236522267},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1475236522321},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1475236522316},{"_id":"public/2016/09/28/踩过的坑/index.html","hash":"3d5e2efca8a4e52b812798a408f3bed46e10d3c9","modified":1482734359120},{"_id":"public/2016/09/28/工具使用/index.html","hash":"a2489e338f2fd7f2567a8ce30b4691e48ee71240","modified":1482734359120},{"_id":"public/2016/09/28/奇技淫巧/index.html","hash":"a0b9c8c1d1d32717992014f78287b0ce718f8f63","modified":1482734359120},{"_id":"public/2016/09/27/jsFullStackSeries/01/index.html","hash":"4968c9d526afc07f59ffc9b6d73bb188e10f6b7d","modified":1482734359120},{"_id":"public/archives/index.html","hash":"99bee9273db442f7614448d0f0462c2d2195bb99","modified":1482734359120},{"_id":"public/archives/2016/index.html","hash":"40d0e972c09e80f66ef5c1b93da5a68960fef623","modified":1482734359120},{"_id":"public/archives/2016/01/index.html","hash":"e2ff5a6aa054159f397acb909069e533149a320b","modified":1482734359121},{"_id":"public/archives/2016/09/index.html","hash":"8f85cd4375a5369f8038abba7ab0f1aa5c26185a","modified":1482734359121},{"_id":"public/tags/javascript/index.html","hash":"5ff07e506d50be50103ed0b2b22bf6c85e1bc386","modified":1482734359121},{"_id":"public/tags/工具/index.html","hash":"8f200fa1484ca6f25dbeb402c4695b3036421693","modified":1482734359121},{"_id":"public/tags/踩坑/index.html","hash":"a940b5e464bb68bf346fefe1e6d916a93186e524","modified":1482734359121},{"_id":"public/tags/javascript-全栈/index.html","hash":"5d021bdacfd981083e09cffd3a83f38352449900","modified":1482734359121},{"_id":"public/2016/09/27/jsFullStackSeries/03/index.html","hash":"528653f68da2d2dfce1c07869aea3d86a4cb480f","modified":1482734359121},{"_id":"public/2016/09/27/jsFullStackSeries/02/index.html","hash":"282a381d28b169f9c8b0615e1b4cb61aac9cc371","modified":1482734359121},{"_id":"public/2016/01/21/Chat Server/index.html","hash":"bc21c0d48fefccbb02992207e3a58d11f5efe52a","modified":1482734359121},{"_id":"public/2016/10/01/好玩的社区/index.html","hash":"f371c38ee17f393ef2ad30711e3c36a59034a98c","modified":1482734359119},{"_id":"public/archives/2016/10/index.html","hash":"e2812763d2657e2412052c6ec24b93e7c1c33457","modified":1482734359121},{"_id":"public/tags/技术-社区/index.html","hash":"8bc00eba6608b7f4636944468d903be0fda1fe09","modified":1482734359121},{"_id":"public/index.html","hash":"e7b4bd18585026a4f2ea7b863413e68a612b79df","modified":1482734359121},{"_id":"public/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475305833648},{"_id":"public/css/style.css","hash":"2f2d6db9ebec90f6e39d2d720c18a9726c09387a","modified":1475305833994},{"_id":"public/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1475305833994}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Chat聊天服务器架设历程","date":"2016-01-21T04:26:03.000Z","_content":"\n# Chat聊天服务器架设历程 #\n----------\n## 2015年11月3日 13:16:20 在Github上找到了Lets chat项目 ##\n\n**首先安装了说明上的依赖**  \n\nnodejs 0.10+  \nMongoDB 2.6+  \nPython 2.7.x\n\n**然后将项目clone到本地目录**  \n\ngit clone https://github.com/sdelements/lets-chat.git\n\n**安装项目依赖**  \n\ncd lets-chat  \n\nnpm install\n\n<!--more-->\n\n**npm install 出现错误**  \n\n执行python 失败  \n\n在系统环境变量中指定了python的安装目录\n\n**然后npm install 成功**\n\n复制设置文件\n**cp settings.yml.sample settings.yml**\n\n然后执行\n**git pull 成功**\nnpm run-script migrate 报错\n\n\n> 错误是Window Script Host  \n> 脚本 D:\\xxx\\migroose.js  \n> 行 3  \n> 字符 1  \n> 错误 缺少对象  \n> 代码 800A138F  \n> 源 Microsoft JScript 运行时错误\n\n找到对应的[项目ISSUS](https://github.com/sdelements/lets-chat/issues/569 \"项目ISSUS\")\n\n> hhaidar建议尝试使用 vagrant 或者 docker\n\n然而**本地情况是mongoDB 无法正常连接**  即在cmd中键入 mongo 执行后出错\n\n> 2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not\n> installed, will zero-out data files\n> MongoDB shell version: 3.0.7\n> connecting to: test\n> 2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re\n> ason: errno:10061 由于目标计算机积极拒绝，无法连接。\n> 2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn't connect to server 127.0.\n> 0.1:27017 (127.0.0.1), connection attempt failed\n>     at connect (src/mongo/shell/mongo.js:179:14)\n>     at (connect):1:6 at src/mongo/shell/mongo.js:179\n> exception: connect failed\n\n在cnBlog找到了一篇windows下注册mongoDB服务的文章\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)\n> `mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n然后**cmd中可以正常链接到本地mongodb**\n\n然而错误依旧是在migroose文件的第三行\n\n    'use strict';\n\n    var mongoose = require('mongoose'),\t//require出错\n    settings = require('./app/config'),\n    migroose = require('migroose'),\n    Runner = require('migroose-cli/cli/runner/index');\n\n到最后也没找到什么解决办法,也懒得找了\n\n## 2016年1月3日23:25:51 重新使用 `nodejs express jade socket.io` 创建了聊天室项目 ##\n\n在使用`express-session`中间件时 选择了redis作为sessionStore\n于是安装了tj大神的`connect-redis`组件\n结果在运行时 向session中写入user信息时报错\n\n  ```\n  Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n    at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)\n    at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)\n    at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)\n    at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)\n    at Socket.<anonymous> (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\n  ```\n去查了一下,多半的人都是说\n>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.\n\n>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : `stop-writes-on-bgsave-error no`\n\n我去看了一下本地redis服务的配置文件\n\n  ```\n      ################################ SNAPSHOTTING  ################################\n    #\n    # Save the DB on disk:\n    #\n    #   save <seconds> <changes>\n    #\n    #   Will save the DB if both the given number of seconds and the given\n    #   number of write operations against the DB occurred.\n    #\n    #   In the example below the behaviour will be to save:\n    #   after 900 sec (15 min) if at least 1 key changed\n    #   after 300 sec (5 min) if at least 10 keys changed\n    #   after 60 sec if at least 10000 keys changed\n    #\n    #   Note: you can disable saving completely by commenting out all \"save\" lines.\n    #\n    #   It is also possible to remove all the previously configured save\n    #   points by adding a save directive with a single empty string argument\n    #   like in the following example:\n    #\n    #   save \"\"\n\n    save 900 1\n    save 300 10\n    save 60 10000\n\n    # By default Redis will stop accepting writes if RDB snapshots are enabled\n    # (at least one save point) and the latest background save failed.\n    # This will make the user aware (in a hard way) that data is not persisting\n    # on disk properly, otherwise chances are that no one will notice and some\n    # disaster will happen.\n    #\n    # If the background saving process will start working again Redis will\n    # automatically allow writes again.\n    #\n    # However if you have setup your proper monitoring of the Redis server\n    # and persistence, you may want to disable this feature so that Redis will\n    # continue to work as usual even if there are problems with disk,\n    # permissions, and so forth.\n    stop-writes-on-bgsave-error yes\n  ```\n首先,前面是数据快照的策略配置,默认\n  - 至少1次更改,将于900秒后存储快照\n  - 至少10次更改,将于300秒后存储快照\n  - 至少10000次更改,将于60秒后存储快照\n\n下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.\n\n然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云...\n\n接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为`no`\n\n> 我查看了一下本机内存是没有问题的 硬盘就更不用说了\n\n> 所以肯定不是因为内存不够的原因导致的\n\n> 于是我在cmd里运行redis-server\n\n  ```\n  [7312] 03 Jan 23:38:08.472 #\n  The Windows version of Redis allocates a memory mapped heap for sharing with\n  the forked process used for persistence operations. In order to share this\n  memory, Windows allocates from the system paging file a portion equal to the\n  size of the Redis heap. At this time there is insufficient contiguous free\n  space available in the system paging file for this operation (Windows error\n  0x5AF). To work around this you may either increase the size of the system\n  paging file, or decrease the size of the Redis heap with the --maxheap flag.\n  Sometimes a reboot will defragment the system paging file sufficiently for\n  this operation to complete successfully.\n\n  Please see the documentation included with the binary distributions for more\n  details on the --maxheap flag.\n\n  Redis can not continue. Exiting.\n  ```\n\n从上面的错误来看,应该*decrease maxheap*,**我猜有可能是windows下默认的maxheap超过了阈值**\n\n决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了*maxheap 1.5gb/ maxmemory 1gb*,再启动服务就好了...\n","source":"_posts/Chat Server.md","raw":"---\ntitle: Chat聊天服务器架设历程\ndate: 2016-1-21 12:26:03\ntags: javascript \n---\n\n# Chat聊天服务器架设历程 #\n----------\n## 2015年11月3日 13:16:20 在Github上找到了Lets chat项目 ##\n\n**首先安装了说明上的依赖**  \n\nnodejs 0.10+  \nMongoDB 2.6+  \nPython 2.7.x\n\n**然后将项目clone到本地目录**  \n\ngit clone https://github.com/sdelements/lets-chat.git\n\n**安装项目依赖**  \n\ncd lets-chat  \n\nnpm install\n\n<!--more-->\n\n**npm install 出现错误**  \n\n执行python 失败  \n\n在系统环境变量中指定了python的安装目录\n\n**然后npm install 成功**\n\n复制设置文件\n**cp settings.yml.sample settings.yml**\n\n然后执行\n**git pull 成功**\nnpm run-script migrate 报错\n\n\n> 错误是Window Script Host  \n> 脚本 D:\\xxx\\migroose.js  \n> 行 3  \n> 字符 1  \n> 错误 缺少对象  \n> 代码 800A138F  \n> 源 Microsoft JScript 运行时错误\n\n找到对应的[项目ISSUS](https://github.com/sdelements/lets-chat/issues/569 \"项目ISSUS\")\n\n> hhaidar建议尝试使用 vagrant 或者 docker\n\n然而**本地情况是mongoDB 无法正常连接**  即在cmd中键入 mongo 执行后出错\n\n> 2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not\n> installed, will zero-out data files\n> MongoDB shell version: 3.0.7\n> connecting to: test\n> 2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re\n> ason: errno:10061 由于目标计算机积极拒绝，无法连接。\n> 2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn't connect to server 127.0.\n> 0.1:27017 (127.0.0.1), connection attempt failed\n>     at connect (src/mongo/shell/mongo.js:179:14)\n>     at (connect):1:6 at src/mongo/shell/mongo.js:179\n> exception: connect failed\n\n在cnBlog找到了一篇windows下注册mongoDB服务的文章\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)\n> `mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n然后**cmd中可以正常链接到本地mongodb**\n\n然而错误依旧是在migroose文件的第三行\n\n    'use strict';\n\n    var mongoose = require('mongoose'),\t//require出错\n    settings = require('./app/config'),\n    migroose = require('migroose'),\n    Runner = require('migroose-cli/cli/runner/index');\n\n到最后也没找到什么解决办法,也懒得找了\n\n## 2016年1月3日23:25:51 重新使用 `nodejs express jade socket.io` 创建了聊天室项目 ##\n\n在使用`express-session`中间件时 选择了redis作为sessionStore\n于是安装了tj大神的`connect-redis`组件\n结果在运行时 向session中写入user信息时报错\n\n  ```\n  Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n    at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)\n    at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)\n    at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)\n    at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)\n    at Socket.<anonymous> (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\n  ```\n去查了一下,多半的人都是说\n>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.\n\n>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : `stop-writes-on-bgsave-error no`\n\n我去看了一下本地redis服务的配置文件\n\n  ```\n      ################################ SNAPSHOTTING  ################################\n    #\n    # Save the DB on disk:\n    #\n    #   save <seconds> <changes>\n    #\n    #   Will save the DB if both the given number of seconds and the given\n    #   number of write operations against the DB occurred.\n    #\n    #   In the example below the behaviour will be to save:\n    #   after 900 sec (15 min) if at least 1 key changed\n    #   after 300 sec (5 min) if at least 10 keys changed\n    #   after 60 sec if at least 10000 keys changed\n    #\n    #   Note: you can disable saving completely by commenting out all \"save\" lines.\n    #\n    #   It is also possible to remove all the previously configured save\n    #   points by adding a save directive with a single empty string argument\n    #   like in the following example:\n    #\n    #   save \"\"\n\n    save 900 1\n    save 300 10\n    save 60 10000\n\n    # By default Redis will stop accepting writes if RDB snapshots are enabled\n    # (at least one save point) and the latest background save failed.\n    # This will make the user aware (in a hard way) that data is not persisting\n    # on disk properly, otherwise chances are that no one will notice and some\n    # disaster will happen.\n    #\n    # If the background saving process will start working again Redis will\n    # automatically allow writes again.\n    #\n    # However if you have setup your proper monitoring of the Redis server\n    # and persistence, you may want to disable this feature so that Redis will\n    # continue to work as usual even if there are problems with disk,\n    # permissions, and so forth.\n    stop-writes-on-bgsave-error yes\n  ```\n首先,前面是数据快照的策略配置,默认\n  - 至少1次更改,将于900秒后存储快照\n  - 至少10次更改,将于300秒后存储快照\n  - 至少10000次更改,将于60秒后存储快照\n\n下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.\n\n然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云...\n\n接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为`no`\n\n> 我查看了一下本机内存是没有问题的 硬盘就更不用说了\n\n> 所以肯定不是因为内存不够的原因导致的\n\n> 于是我在cmd里运行redis-server\n\n  ```\n  [7312] 03 Jan 23:38:08.472 #\n  The Windows version of Redis allocates a memory mapped heap for sharing with\n  the forked process used for persistence operations. In order to share this\n  memory, Windows allocates from the system paging file a portion equal to the\n  size of the Redis heap. At this time there is insufficient contiguous free\n  space available in the system paging file for this operation (Windows error\n  0x5AF). To work around this you may either increase the size of the system\n  paging file, or decrease the size of the Redis heap with the --maxheap flag.\n  Sometimes a reboot will defragment the system paging file sufficiently for\n  this operation to complete successfully.\n\n  Please see the documentation included with the binary distributions for more\n  details on the --maxheap flag.\n\n  Redis can not continue. Exiting.\n  ```\n\n从上面的错误来看,应该*decrease maxheap*,**我猜有可能是windows下默认的maxheap超过了阈值**\n\n决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了*maxheap 1.5gb/ maxmemory 1gb*,再启动服务就好了...\n","slug":"Chat Server","published":1,"updated":"2016-09-30T11:55:22.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citqv02eb00001cpohag7v9q4","content":"<h1 id=\"Chat聊天服务器架设历程\"><a href=\"#Chat聊天服务器架设历程\" class=\"headerlink\" title=\"Chat聊天服务器架设历程\"></a>Chat聊天服务器架设历程</h1><hr>\n<h2 id=\"2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\"><a href=\"#2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\" class=\"headerlink\" title=\"2015年11月3日 13:16:20 在Github上找到了Lets chat项目\"></a>2015年11月3日 13:16:20 在Github上找到了Lets chat项目</h2><p><strong>首先安装了说明上的依赖</strong>  </p>\n<p>nodejs 0.10+<br>MongoDB 2.6+<br>Python 2.7.x</p>\n<p><strong>然后将项目clone到本地目录</strong>  </p>\n<p>git clone <a href=\"https://github.com/sdelements/lets-chat.git\">https://github.com/sdelements/lets-chat.git</a></p>\n<p><strong>安装项目依赖</strong>  </p>\n<p>cd lets-chat  </p>\n<p>npm install</p>\n<a id=\"more\"></a>\n<p><strong>npm install 出现错误</strong>  </p>\n<p>执行python 失败  </p>\n<p>在系统环境变量中指定了python的安装目录</p>\n<p><strong>然后npm install 成功</strong></p>\n<p>复制设置文件<br><strong>cp settings.yml.sample settings.yml</strong></p>\n<p>然后执行<br><strong>git pull 成功</strong><br>npm run-script migrate 报错</p>\n<blockquote>\n<p>错误是Window Script Host<br>脚本 D:\\xxx\\migroose.js<br>行 3<br>字符 1<br>错误 缺少对象<br>代码 800A138F<br>源 Microsoft JScript 运行时错误</p>\n</blockquote>\n<p>找到对应的<a href=\"https://github.com/sdelements/lets-chat/issues/569\" title=\"项目ISSUS\">项目ISSUS</a></p>\n<blockquote>\n<p>hhaidar建议尝试使用 vagrant 或者 docker</p>\n</blockquote>\n<p>然而<strong>本地情况是mongoDB 无法正常连接</strong>  即在cmd中键入 mongo 执行后出错</p>\n<blockquote>\n<p>2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not<br>installed, will zero-out data files<br>MongoDB shell version: 3.0.7<br>connecting to: test<br>2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re<br>ason: errno:10061 由于目标计算机积极拒绝，无法连接。<br>2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn’t connect to server 127.0.<br>0.1:27017 (127.0.0.1), connection attempt failed<br>    at connect (src/mongo/shell/mongo.js:179:14)<br>    at (connect):1:6 at src/mongo/shell/mongo.js:179<br>exception: connect failed</p>\n</blockquote>\n<p>在cnBlog找到了一篇windows下注册mongoDB服务的文章</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)<br><code>mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>然后<strong>cmd中可以正常链接到本地mongodb</strong></p>\n<p>然而错误依旧是在migroose文件的第三行</p>\n<pre><code>&apos;use strict&apos;;\n\nvar mongoose = require(&apos;mongoose&apos;),    //require出错\nsettings = require(&apos;./app/config&apos;),\nmigroose = require(&apos;migroose&apos;),\nRunner = require(&apos;migroose-cli/cli/runner/index&apos;);\n</code></pre><p>到最后也没找到什么解决办法,也懒得找了</p>\n<h2 id=\"2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\"><a href=\"#2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\" class=\"headerlink\" title=\"2016年1月3日23:25:51 重新使用 nodejs express jade socket.io 创建了聊天室项目\"></a>2016年1月3日23:25:51 重新使用 <code>nodejs express jade socket.io</code> 创建了聊天室项目</h2><p>在使用<code>express-session</code>中间件时 选择了redis作为sessionStore<br>于是安装了tj大神的<code>connect-redis</code>组件<br>结果在运行时 向session中写入user信息时报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</div><div class=\"line\">  at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)</div><div class=\"line\">  at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)</div><div class=\"line\">  at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)</div><div class=\"line\">  at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)</div><div class=\"line\">  at Socket.&lt;anonymous&gt; (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)</div><div class=\"line\">  at emitOne (events.js:77:13)</div><div class=\"line\">  at Socket.emit (events.js:169:7)</div><div class=\"line\">  at readableAddChunk (_stream_readable.js:146:16)</div><div class=\"line\">  at Socket.Readable.push (_stream_readable.js:110:10)</div><div class=\"line\">  at TCP.onread (net.js:523:20)</div></pre></td></tr></table></figure>\n<p>去查了一下,多半的人都是说</p>\n<blockquote>\n<p>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.</p>\n<p>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : <code>stop-writes-on-bgsave-error no</code></p>\n</blockquote>\n<p>我去看了一下本地redis服务的配置文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ################################ SNAPSHOTTING  ################################</div><div class=\"line\">#</div><div class=\"line\"># Save the DB on disk:</div><div class=\"line\">#</div><div class=\"line\">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\">#</div><div class=\"line\">#   Will save the DB if both the given number of seconds and the given</div><div class=\"line\">#   number of write operations against the DB occurred.</div><div class=\"line\">#</div><div class=\"line\">#   In the example below the behaviour will be to save:</div><div class=\"line\">#   after 900 sec (15 min) if at least 1 key changed</div><div class=\"line\">#   after 300 sec (5 min) if at least 10 keys changed</div><div class=\"line\">#   after 60 sec if at least 10000 keys changed</div><div class=\"line\">#</div><div class=\"line\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</div><div class=\"line\">#</div><div class=\"line\">#   It is also possible to remove all the previously configured save</div><div class=\"line\">#   points by adding a save directive with a single empty string argument</div><div class=\"line\">#   like in the following example:</div><div class=\"line\">#</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"></div><div class=\"line\"># By default Redis will stop accepting writes if RDB snapshots are enabled</div><div class=\"line\"># (at least one save point) and the latest background save failed.</div><div class=\"line\"># This will make the user aware (in a hard way) that data is not persisting</div><div class=\"line\"># on disk properly, otherwise chances are that no one will notice and some</div><div class=\"line\"># disaster will happen.</div><div class=\"line\">#</div><div class=\"line\"># If the background saving process will start working again Redis will</div><div class=\"line\"># automatically allow writes again.</div><div class=\"line\">#</div><div class=\"line\"># However if you have setup your proper monitoring of the Redis server</div><div class=\"line\"># and persistence, you may want to disable this feature so that Redis will</div><div class=\"line\"># continue to work as usual even if there are problems with disk,</div><div class=\"line\"># permissions, and so forth.</div><div class=\"line\">stop-writes-on-bgsave-error yes</div></pre></td></tr></table></figure>\n<p>首先,前面是数据快照的策略配置,默认</p>\n<ul>\n<li>至少1次更改,将于900秒后存储快照</li>\n<li>至少10次更改,将于300秒后存储快照</li>\n<li>至少10000次更改,将于60秒后存储快照</li>\n</ul>\n<p>下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.</p>\n<p>然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云…</p>\n<p>接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为<code>no</code></p>\n<blockquote>\n<p>我查看了一下本机内存是没有问题的 硬盘就更不用说了</p>\n<p>所以肯定不是因为内存不够的原因导致的</p>\n<p>于是我在cmd里运行redis-server</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[7312] 03 Jan 23:38:08.472 #</div><div class=\"line\">The Windows version of Redis allocates a memory mapped heap for sharing with</div><div class=\"line\">the forked process used for persistence operations. In order to share this</div><div class=\"line\">memory, Windows allocates from the system paging file a portion equal to the</div><div class=\"line\">size of the Redis heap. At this time there is insufficient contiguous free</div><div class=\"line\">space available in the system paging file for this operation (Windows error</div><div class=\"line\">0x5AF). To work around this you may either increase the size of the system</div><div class=\"line\">paging file, or decrease the size of the Redis heap with the --maxheap flag.</div><div class=\"line\">Sometimes a reboot will defragment the system paging file sufficiently for</div><div class=\"line\">this operation to complete successfully.</div><div class=\"line\"></div><div class=\"line\">Please see the documentation included with the binary distributions for more</div><div class=\"line\">details on the --maxheap flag.</div><div class=\"line\"></div><div class=\"line\">Redis can not continue. Exiting.</div></pre></td></tr></table></figure>\n<p>从上面的错误来看,应该<em>decrease maxheap</em>,<strong>我猜有可能是windows下默认的maxheap超过了阈值</strong></p>\n<p>决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了<em>maxheap 1.5gb/ maxmemory 1gb</em>,再启动服务就好了…</p>\n","excerpt":"<h1 id=\"Chat聊天服务器架设历程\"><a href=\"#Chat聊天服务器架设历程\" class=\"headerlink\" title=\"Chat聊天服务器架设历程\"></a>Chat聊天服务器架设历程</h1><hr>\n<h2 id=\"2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\"><a href=\"#2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\" class=\"headerlink\" title=\"2015年11月3日 13:16:20 在Github上找到了Lets chat项目\"></a>2015年11月3日 13:16:20 在Github上找到了Lets chat项目</h2><p><strong>首先安装了说明上的依赖</strong>  </p>\n<p>nodejs 0.10+<br>MongoDB 2.6+<br>Python 2.7.x</p>\n<p><strong>然后将项目clone到本地目录</strong>  </p>\n<p>git clone <a href=\"https://github.com/sdelements/lets-chat.git\">https://github.com/sdelements/lets-chat.git</a></p>\n<p><strong>安装项目依赖</strong>  </p>\n<p>cd lets-chat  </p>\n<p>npm install</p>","more":"<p><strong>npm install 出现错误</strong>  </p>\n<p>执行python 失败  </p>\n<p>在系统环境变量中指定了python的安装目录</p>\n<p><strong>然后npm install 成功</strong></p>\n<p>复制设置文件<br><strong>cp settings.yml.sample settings.yml</strong></p>\n<p>然后执行<br><strong>git pull 成功</strong><br>npm run-script migrate 报错</p>\n<blockquote>\n<p>错误是Window Script Host<br>脚本 D:\\xxx\\migroose.js<br>行 3<br>字符 1<br>错误 缺少对象<br>代码 800A138F<br>源 Microsoft JScript 运行时错误</p>\n</blockquote>\n<p>找到对应的<a href=\"https://github.com/sdelements/lets-chat/issues/569\" title=\"项目ISSUS\">项目ISSUS</a></p>\n<blockquote>\n<p>hhaidar建议尝试使用 vagrant 或者 docker</p>\n</blockquote>\n<p>然而<strong>本地情况是mongoDB 无法正常连接</strong>  即在cmd中键入 mongo 执行后出错</p>\n<blockquote>\n<p>2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not<br>installed, will zero-out data files<br>MongoDB shell version: 3.0.7<br>connecting to: test<br>2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re<br>ason: errno:10061 由于目标计算机积极拒绝，无法连接。<br>2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn’t connect to server 127.0.<br>0.1:27017 (127.0.0.1), connection attempt failed<br>    at connect (src/mongo/shell/mongo.js:179:14)<br>    at (connect):1:6 at src/mongo/shell/mongo.js:179<br>exception: connect failed</p>\n</blockquote>\n<p>在cnBlog找到了一篇windows下注册mongoDB服务的文章</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)<br><code>mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>然后<strong>cmd中可以正常链接到本地mongodb</strong></p>\n<p>然而错误依旧是在migroose文件的第三行</p>\n<pre><code>&apos;use strict&apos;;\n\nvar mongoose = require(&apos;mongoose&apos;),    //require出错\nsettings = require(&apos;./app/config&apos;),\nmigroose = require(&apos;migroose&apos;),\nRunner = require(&apos;migroose-cli/cli/runner/index&apos;);\n</code></pre><p>到最后也没找到什么解决办法,也懒得找了</p>\n<h2 id=\"2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\"><a href=\"#2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\" class=\"headerlink\" title=\"2016年1月3日23:25:51 重新使用 nodejs express jade socket.io 创建了聊天室项目\"></a>2016年1月3日23:25:51 重新使用 <code>nodejs express jade socket.io</code> 创建了聊天室项目</h2><p>在使用<code>express-session</code>中间件时 选择了redis作为sessionStore<br>于是安装了tj大神的<code>connect-redis</code>组件<br>结果在运行时 向session中写入user信息时报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</div><div class=\"line\">  at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)</div><div class=\"line\">  at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)</div><div class=\"line\">  at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)</div><div class=\"line\">  at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)</div><div class=\"line\">  at Socket.&lt;anonymous&gt; (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)</div><div class=\"line\">  at emitOne (events.js:77:13)</div><div class=\"line\">  at Socket.emit (events.js:169:7)</div><div class=\"line\">  at readableAddChunk (_stream_readable.js:146:16)</div><div class=\"line\">  at Socket.Readable.push (_stream_readable.js:110:10)</div><div class=\"line\">  at TCP.onread (net.js:523:20)</div></pre></td></tr></table></figure>\n<p>去查了一下,多半的人都是说</p>\n<blockquote>\n<p>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.</p>\n<p>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : <code>stop-writes-on-bgsave-error no</code></p>\n</blockquote>\n<p>我去看了一下本地redis服务的配置文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ################################ SNAPSHOTTING  ################################</div><div class=\"line\">#</div><div class=\"line\"># Save the DB on disk:</div><div class=\"line\">#</div><div class=\"line\">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\">#</div><div class=\"line\">#   Will save the DB if both the given number of seconds and the given</div><div class=\"line\">#   number of write operations against the DB occurred.</div><div class=\"line\">#</div><div class=\"line\">#   In the example below the behaviour will be to save:</div><div class=\"line\">#   after 900 sec (15 min) if at least 1 key changed</div><div class=\"line\">#   after 300 sec (5 min) if at least 10 keys changed</div><div class=\"line\">#   after 60 sec if at least 10000 keys changed</div><div class=\"line\">#</div><div class=\"line\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</div><div class=\"line\">#</div><div class=\"line\">#   It is also possible to remove all the previously configured save</div><div class=\"line\">#   points by adding a save directive with a single empty string argument</div><div class=\"line\">#   like in the following example:</div><div class=\"line\">#</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"></div><div class=\"line\"># By default Redis will stop accepting writes if RDB snapshots are enabled</div><div class=\"line\"># (at least one save point) and the latest background save failed.</div><div class=\"line\"># This will make the user aware (in a hard way) that data is not persisting</div><div class=\"line\"># on disk properly, otherwise chances are that no one will notice and some</div><div class=\"line\"># disaster will happen.</div><div class=\"line\">#</div><div class=\"line\"># If the background saving process will start working again Redis will</div><div class=\"line\"># automatically allow writes again.</div><div class=\"line\">#</div><div class=\"line\"># However if you have setup your proper monitoring of the Redis server</div><div class=\"line\"># and persistence, you may want to disable this feature so that Redis will</div><div class=\"line\"># continue to work as usual even if there are problems with disk,</div><div class=\"line\"># permissions, and so forth.</div><div class=\"line\">stop-writes-on-bgsave-error yes</div></pre></td></tr></table></figure>\n<p>首先,前面是数据快照的策略配置,默认</p>\n<ul>\n<li>至少1次更改,将于900秒后存储快照</li>\n<li>至少10次更改,将于300秒后存储快照</li>\n<li>至少10000次更改,将于60秒后存储快照</li>\n</ul>\n<p>下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.</p>\n<p>然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云…</p>\n<p>接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为<code>no</code></p>\n<blockquote>\n<p>我查看了一下本机内存是没有问题的 硬盘就更不用说了</p>\n<p>所以肯定不是因为内存不够的原因导致的</p>\n<p>于是我在cmd里运行redis-server</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[7312] 03 Jan 23:38:08.472 #</div><div class=\"line\">The Windows version of Redis allocates a memory mapped heap for sharing with</div><div class=\"line\">the forked process used for persistence operations. In order to share this</div><div class=\"line\">memory, Windows allocates from the system paging file a portion equal to the</div><div class=\"line\">size of the Redis heap. At this time there is insufficient contiguous free</div><div class=\"line\">space available in the system paging file for this operation (Windows error</div><div class=\"line\">0x5AF). To work around this you may either increase the size of the system</div><div class=\"line\">paging file, or decrease the size of the Redis heap with the --maxheap flag.</div><div class=\"line\">Sometimes a reboot will defragment the system paging file sufficiently for</div><div class=\"line\">this operation to complete successfully.</div><div class=\"line\"></div><div class=\"line\">Please see the documentation included with the binary distributions for more</div><div class=\"line\">details on the --maxheap flag.</div><div class=\"line\"></div><div class=\"line\">Redis can not continue. Exiting.</div></pre></td></tr></table></figure>\n<p>从上面的错误来看,应该<em>decrease maxheap</em>,<strong>我猜有可能是windows下默认的maxheap超过了阈值</strong></p>\n<p>决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了<em>maxheap 1.5gb/ maxmemory 1gb</em>,再启动服务就好了…</p>"},{"title":"工具使用","date":"2016-09-28T04:42:06.000Z","_content":"\n# Git\n\n### 生成ssh\n\n    - 配置全局设置 `git config --global user.name \"username\"` `git confgi --global user.email \"example@xxx.com\"`\n    - 生成ssh `ssh-keygen -t rsa -C \"example@xxx.com\"` 会在C:\\User\\xxx目录下生成.ssh目录\n    - 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n    - 验证 ssh 是否添加成功 `ssh git@github.com`\n\n### 解决git clone时文件目录过长的方法\n\n    修改git设置 `git config --system core.longpaths true`\n\n<!--more-->\n\n# VS CODE\n\n### 配置代码段\n\n- `ctrl + p` 打开quick open\n- 输入 `>snippets` 回车\n- 进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车\n- 打开一个名称为javascript.json的配置文件\n- 假设我们要一个控制台打印的代码段,缩写为`_cl`,则需要添加如下配置\n\n        \"Console log\": {    // 代码段的名称\n            \"prefix\": \"_cl\",    // 触发代码段的缩写\n            \"body\": [\n                \"console.log('$1')\",    // 代码段的第一行 $1表示第一个变量\n                \"$2\"    // 代码段的第二行\n            ],\n            \"description\": \"输出到控制台\" // 代码段的描述\n        }\n\n- 保存即生效,当然只能在你指定的语言中生效\n\n# GULP/WEBPACK\n\n### 多入口打包ES6模块化文件\n\n        var gulp = require('gulp')\n        var webpack = require('webpack-stream')\n        var uglify = require('gulp-uglify')\n        var through = require('through2')\n\n        gulp.task('packagedScripts', () => {\n            gulp.src('./src/scripts/entrances/**/*')\n                .pipe(through.obj(function (file, enc, cb) {\n                    var __filename = file.path.split('\\\\').reverse()[0]\n                    gulp.src(file.path)\n                        .pipe(webpack({\n                            output: {\n                                filename: __filename\n                            },\n                            module: {\n                                loaders: [\n                                    {\n                                        test: /\\.js$/,\n                                        exclude: /node_modules/,\n                                        loader: 'babel',\n                                        query: {\n                                            presets: ['es2015']\n                                        }\n                                    }\n                                ]\n                            }\n                        }))\n                        .pipe(uglify())\n                        .pipe(gulp.dest('./src/scripts/packaged'))  // 输出到指定目录\n                    cb()\n                }))\n        })\n\n### gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\n\n        var gulp = require('gulp')\n        var sass = require('gulp-sass')\n        var imagemin = require('gulp-imagemin')\n        var uglify = require('gulp-uglify')\n        var cssMinify = require('gulp-minify-css')\n        var RevAll = require('gulp-rev-all')\n        var filter = require('gulp-filter')\n\n        var buildFunc = () => {\n            var jsFilter = filter('**/*.js')\n            var htmlFilter = filter('**/*.html')\n            var cssFilter = filter('**/*.css')\n            var picFilter = filter(['**/*.jpg', '**/*.png'])\n\n            var revAll = RevAll({\n                dontGlobal: ['.scss'],\n                dontRenameFile: ['.html'],\n                dontSearchFile: ['.css'],\n                transformPath: function(rev) {\n                    return rev\n                        .replace('scripts/', 'dist/scripts/')\n                        .replace('style/', 'dist/style/')\n                        .replace('images/', 'dist/images/')\n                }\n            })\n\n            var v = gulp.src('src/**/*')\n                .pipe(revAll.revision());\n\n            // 压缩js\n            v.pipe(jsFilter)\n                .pipe(uglify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩css\n            v.pipe(cssFilter)\n                .pipe(cssMinify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩图片\n            v.pipe(picFilter)\n                .pipe(imagemin())\n                .pipe(gulp.dest('./dist'))\n\n            // 生成index.html\n            v.pipe(htmlFilter)\n                .pipe(gulp.dest('./'));\n        }\n\n### 使用postcss/autoprefixer/postcss-scss \n\n> 需要安装 `npm i postcss postcss-loader autoprefixer postcss-scss` ,切记一定要装 `postcss`\n\n- webpack.config.js中添加配置\n\n```\nmodule:{\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css?importLoaders=1!postcss!sass'    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变\n        }\n    ]\n},\npostcss: [autoprefixer({    \n    // 需要支持的浏览器或者平台的配置\n    browsers: [\n        \"android 4\",\n        \"iOS 6\",\n        \"last 2 versions\"\n    ]\n})],\n```\n\n- package.json中添加配置（也可以选择postcss.config.js等形式配置)\n\n```\n\"postcss\": {\n    \"plugins\": {\n        \"parser\": \"postcss-scss\", \n        \"autoprefixer\": true\n    }\n}\n```\n","source":"_posts/工具使用.md","raw":"---\ntitle: 工具使用\ndate: 2016-9-28 12:42:06\ntags: 工具\n---\n\n# Git\n\n### 生成ssh\n\n    - 配置全局设置 `git config --global user.name \"username\"` `git confgi --global user.email \"example@xxx.com\"`\n    - 生成ssh `ssh-keygen -t rsa -C \"example@xxx.com\"` 会在C:\\User\\xxx目录下生成.ssh目录\n    - 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n    - 验证 ssh 是否添加成功 `ssh git@github.com`\n\n### 解决git clone时文件目录过长的方法\n\n    修改git设置 `git config --system core.longpaths true`\n\n<!--more-->\n\n# VS CODE\n\n### 配置代码段\n\n- `ctrl + p` 打开quick open\n- 输入 `>snippets` 回车\n- 进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车\n- 打开一个名称为javascript.json的配置文件\n- 假设我们要一个控制台打印的代码段,缩写为`_cl`,则需要添加如下配置\n\n        \"Console log\": {    // 代码段的名称\n            \"prefix\": \"_cl\",    // 触发代码段的缩写\n            \"body\": [\n                \"console.log('$1')\",    // 代码段的第一行 $1表示第一个变量\n                \"$2\"    // 代码段的第二行\n            ],\n            \"description\": \"输出到控制台\" // 代码段的描述\n        }\n\n- 保存即生效,当然只能在你指定的语言中生效\n\n# GULP/WEBPACK\n\n### 多入口打包ES6模块化文件\n\n        var gulp = require('gulp')\n        var webpack = require('webpack-stream')\n        var uglify = require('gulp-uglify')\n        var through = require('through2')\n\n        gulp.task('packagedScripts', () => {\n            gulp.src('./src/scripts/entrances/**/*')\n                .pipe(through.obj(function (file, enc, cb) {\n                    var __filename = file.path.split('\\\\').reverse()[0]\n                    gulp.src(file.path)\n                        .pipe(webpack({\n                            output: {\n                                filename: __filename\n                            },\n                            module: {\n                                loaders: [\n                                    {\n                                        test: /\\.js$/,\n                                        exclude: /node_modules/,\n                                        loader: 'babel',\n                                        query: {\n                                            presets: ['es2015']\n                                        }\n                                    }\n                                ]\n                            }\n                        }))\n                        .pipe(uglify())\n                        .pipe(gulp.dest('./src/scripts/packaged'))  // 输出到指定目录\n                    cb()\n                }))\n        })\n\n### gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\n\n        var gulp = require('gulp')\n        var sass = require('gulp-sass')\n        var imagemin = require('gulp-imagemin')\n        var uglify = require('gulp-uglify')\n        var cssMinify = require('gulp-minify-css')\n        var RevAll = require('gulp-rev-all')\n        var filter = require('gulp-filter')\n\n        var buildFunc = () => {\n            var jsFilter = filter('**/*.js')\n            var htmlFilter = filter('**/*.html')\n            var cssFilter = filter('**/*.css')\n            var picFilter = filter(['**/*.jpg', '**/*.png'])\n\n            var revAll = RevAll({\n                dontGlobal: ['.scss'],\n                dontRenameFile: ['.html'],\n                dontSearchFile: ['.css'],\n                transformPath: function(rev) {\n                    return rev\n                        .replace('scripts/', 'dist/scripts/')\n                        .replace('style/', 'dist/style/')\n                        .replace('images/', 'dist/images/')\n                }\n            })\n\n            var v = gulp.src('src/**/*')\n                .pipe(revAll.revision());\n\n            // 压缩js\n            v.pipe(jsFilter)\n                .pipe(uglify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩css\n            v.pipe(cssFilter)\n                .pipe(cssMinify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩图片\n            v.pipe(picFilter)\n                .pipe(imagemin())\n                .pipe(gulp.dest('./dist'))\n\n            // 生成index.html\n            v.pipe(htmlFilter)\n                .pipe(gulp.dest('./'));\n        }\n\n### 使用postcss/autoprefixer/postcss-scss \n\n> 需要安装 `npm i postcss postcss-loader autoprefixer postcss-scss` ,切记一定要装 `postcss`\n\n- webpack.config.js中添加配置\n\n```\nmodule:{\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css?importLoaders=1!postcss!sass'    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变\n        }\n    ]\n},\npostcss: [autoprefixer({    \n    // 需要支持的浏览器或者平台的配置\n    browsers: [\n        \"android 4\",\n        \"iOS 6\",\n        \"last 2 versions\"\n    ]\n})],\n```\n\n- package.json中添加配置（也可以选择postcss.config.js等形式配置)\n\n```\n\"postcss\": {\n    \"plugins\": {\n        \"parser\": \"postcss-scss\", \n        \"autoprefixer\": true\n    }\n}\n```\n","slug":"工具使用","published":1,"updated":"2016-10-11T10:02:10.000Z","_id":"citqv02ef00011cpoe06muy6l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h3 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h3><pre><code>- 配置全局设置 `git config --global user.name &quot;username&quot;` `git confgi --global user.email &quot;example@xxx.com&quot;`\n- 生成ssh `ssh-keygen -t rsa -C &quot;example@xxx.com&quot;` 会在C:\\User\\xxx目录下生成.ssh目录\n- 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n- 验证 ssh 是否添加成功 `ssh git@github.com`\n</code></pre><h3 id=\"解决git-clone时文件目录过长的方法\"><a href=\"#解决git-clone时文件目录过长的方法\" class=\"headerlink\" title=\"解决git clone时文件目录过长的方法\"></a>解决git clone时文件目录过长的方法</h3><pre><code>修改git设置 `git config --system core.longpaths true`\n</code></pre><a id=\"more\"></a>\n<h1 id=\"VS-CODE\"><a href=\"#VS-CODE\" class=\"headerlink\" title=\"VS CODE\"></a>VS CODE</h1><h3 id=\"配置代码段\"><a href=\"#配置代码段\" class=\"headerlink\" title=\"配置代码段\"></a>配置代码段</h3><ul>\n<li><code>ctrl + p</code> 打开quick open</li>\n<li>输入 <code>&gt;snippets</code> 回车</li>\n<li>进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车</li>\n<li>打开一个名称为javascript.json的配置文件</li>\n<li><p>假设我们要一个控制台打印的代码段,缩写为<code>_cl</code>,则需要添加如下配置</p>\n<pre><code>&quot;Console log&quot;: {    // 代码段的名称\n    &quot;prefix&quot;: &quot;_cl&quot;,    // 触发代码段的缩写\n    &quot;body&quot;: [\n        &quot;console.log(&apos;$1&apos;)&quot;,    // 代码段的第一行 $1表示第一个变量\n        &quot;$2&quot;    // 代码段的第二行\n    ],\n    &quot;description&quot;: &quot;输出到控制台&quot; // 代码段的描述\n}\n</code></pre></li>\n<li><p>保存即生效,当然只能在你指定的语言中生效</p>\n</li>\n</ul>\n<h1 id=\"GULP-WEBPACK\"><a href=\"#GULP-WEBPACK\" class=\"headerlink\" title=\"GULP/WEBPACK\"></a>GULP/WEBPACK</h1><h3 id=\"多入口打包ES6模块化文件\"><a href=\"#多入口打包ES6模块化文件\" class=\"headerlink\" title=\"多入口打包ES6模块化文件\"></a>多入口打包ES6模块化文件</h3><pre><code>var gulp = require(&apos;gulp&apos;)\nvar webpack = require(&apos;webpack-stream&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar through = require(&apos;through2&apos;)\n\ngulp.task(&apos;packagedScripts&apos;, () =&gt; {\n    gulp.src(&apos;./src/scripts/entrances/**/*&apos;)\n        .pipe(through.obj(function (file, enc, cb) {\n            var __filename = file.path.split(&apos;\\\\&apos;).reverse()[0]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename\n                    },\n                    module: {\n                        loaders: [\n                            {\n                                test: /\\.js$/,\n                                exclude: /node_modules/,\n                                loader: &apos;babel&apos;,\n                                query: {\n                                    presets: [&apos;es2015&apos;]\n                                }\n                            }\n                        ]\n                    }\n                }))\n                .pipe(uglify())\n                .pipe(gulp.dest(&apos;./src/scripts/packaged&apos;))  // 输出到指定目录\n            cb()\n        }))\n})\n</code></pre><h3 id=\"gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\"><a href=\"#gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\" class=\"headerlink\" title=\"gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\"></a>gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用</h3><pre><code>var gulp = require(&apos;gulp&apos;)\nvar sass = require(&apos;gulp-sass&apos;)\nvar imagemin = require(&apos;gulp-imagemin&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar cssMinify = require(&apos;gulp-minify-css&apos;)\nvar RevAll = require(&apos;gulp-rev-all&apos;)\nvar filter = require(&apos;gulp-filter&apos;)\n\nvar buildFunc = () =&gt; {\n    var jsFilter = filter(&apos;**/*.js&apos;)\n    var htmlFilter = filter(&apos;**/*.html&apos;)\n    var cssFilter = filter(&apos;**/*.css&apos;)\n    var picFilter = filter([&apos;**/*.jpg&apos;, &apos;**/*.png&apos;])\n\n    var revAll = RevAll({\n        dontGlobal: [&apos;.scss&apos;],\n        dontRenameFile: [&apos;.html&apos;],\n        dontSearchFile: [&apos;.css&apos;],\n        transformPath: function(rev) {\n            return rev\n                .replace(&apos;scripts/&apos;, &apos;dist/scripts/&apos;)\n                .replace(&apos;style/&apos;, &apos;dist/style/&apos;)\n                .replace(&apos;images/&apos;, &apos;dist/images/&apos;)\n        }\n    })\n\n    var v = gulp.src(&apos;src/**/*&apos;)\n        .pipe(revAll.revision());\n\n    // 压缩js\n    v.pipe(jsFilter)\n        .pipe(uglify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩css\n    v.pipe(cssFilter)\n        .pipe(cssMinify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩图片\n    v.pipe(picFilter)\n        .pipe(imagemin())\n        .pipe(gulp.dest(&apos;./dist&apos;))\n\n    // 生成index.html\n    v.pipe(htmlFilter)\n        .pipe(gulp.dest(&apos;./&apos;));\n}\n</code></pre><h3 id=\"使用postcss-autoprefixer-postcss-scss\"><a href=\"#使用postcss-autoprefixer-postcss-scss\" class=\"headerlink\" title=\"使用postcss/autoprefixer/postcss-scss\"></a>使用postcss/autoprefixer/postcss-scss</h3><blockquote>\n<p>需要安装 <code>npm i postcss postcss-loader autoprefixer postcss-scss</code> ,切记一定要装 <code>postcss</code></p>\n</blockquote>\n<ul>\n<li>webpack.config.js中添加配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">module:&#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            test: /\\.scss$/,</div><div class=\"line\">            loader: &apos;style!css?importLoaders=1!postcss!sass&apos;    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;,</div><div class=\"line\">postcss: [autoprefixer(&#123;    </div><div class=\"line\">    // 需要支持的浏览器或者平台的配置</div><div class=\"line\">    browsers: [</div><div class=\"line\">        &quot;android 4&quot;,</div><div class=\"line\">        &quot;iOS 6&quot;,</div><div class=\"line\">        &quot;last 2 versions&quot;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;)],</div></pre></td></tr></table></figure>\n<ul>\n<li>package.json中添加配置（也可以选择postcss.config.js等形式配置)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;postcss&quot;: &#123;</div><div class=\"line\">    &quot;plugins&quot;: &#123;</div><div class=\"line\">        &quot;parser&quot;: &quot;postcss-scss&quot;, </div><div class=\"line\">        &quot;autoprefixer&quot;: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h3 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h3><pre><code>- 配置全局设置 `git config --global user.name &quot;username&quot;` `git confgi --global user.email &quot;example@xxx.com&quot;`\n- 生成ssh `ssh-keygen -t rsa -C &quot;example@xxx.com&quot;` 会在C:\\User\\xxx目录下生成.ssh目录\n- 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n- 验证 ssh 是否添加成功 `ssh git@github.com`\n</code></pre><h3 id=\"解决git-clone时文件目录过长的方法\"><a href=\"#解决git-clone时文件目录过长的方法\" class=\"headerlink\" title=\"解决git clone时文件目录过长的方法\"></a>解决git clone时文件目录过长的方法</h3><pre><code>修改git设置 `git config --system core.longpaths true`\n</code></pre>","more":"<h1 id=\"VS-CODE\"><a href=\"#VS-CODE\" class=\"headerlink\" title=\"VS CODE\"></a>VS CODE</h1><h3 id=\"配置代码段\"><a href=\"#配置代码段\" class=\"headerlink\" title=\"配置代码段\"></a>配置代码段</h3><ul>\n<li><code>ctrl + p</code> 打开quick open</li>\n<li>输入 <code>&gt;snippets</code> 回车</li>\n<li>进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车</li>\n<li>打开一个名称为javascript.json的配置文件</li>\n<li><p>假设我们要一个控制台打印的代码段,缩写为<code>_cl</code>,则需要添加如下配置</p>\n<pre><code>&quot;Console log&quot;: {    // 代码段的名称\n    &quot;prefix&quot;: &quot;_cl&quot;,    // 触发代码段的缩写\n    &quot;body&quot;: [\n        &quot;console.log(&apos;$1&apos;)&quot;,    // 代码段的第一行 $1表示第一个变量\n        &quot;$2&quot;    // 代码段的第二行\n    ],\n    &quot;description&quot;: &quot;输出到控制台&quot; // 代码段的描述\n}\n</code></pre></li>\n<li><p>保存即生效,当然只能在你指定的语言中生效</p>\n</li>\n</ul>\n<h1 id=\"GULP-WEBPACK\"><a href=\"#GULP-WEBPACK\" class=\"headerlink\" title=\"GULP/WEBPACK\"></a>GULP/WEBPACK</h1><h3 id=\"多入口打包ES6模块化文件\"><a href=\"#多入口打包ES6模块化文件\" class=\"headerlink\" title=\"多入口打包ES6模块化文件\"></a>多入口打包ES6模块化文件</h3><pre><code>var gulp = require(&apos;gulp&apos;)\nvar webpack = require(&apos;webpack-stream&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar through = require(&apos;through2&apos;)\n\ngulp.task(&apos;packagedScripts&apos;, () =&gt; {\n    gulp.src(&apos;./src/scripts/entrances/**/*&apos;)\n        .pipe(through.obj(function (file, enc, cb) {\n            var __filename = file.path.split(&apos;\\\\&apos;).reverse()[0]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename\n                    },\n                    module: {\n                        loaders: [\n                            {\n                                test: /\\.js$/,\n                                exclude: /node_modules/,\n                                loader: &apos;babel&apos;,\n                                query: {\n                                    presets: [&apos;es2015&apos;]\n                                }\n                            }\n                        ]\n                    }\n                }))\n                .pipe(uglify())\n                .pipe(gulp.dest(&apos;./src/scripts/packaged&apos;))  // 输出到指定目录\n            cb()\n        }))\n})\n</code></pre><h3 id=\"gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\"><a href=\"#gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\" class=\"headerlink\" title=\"gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\"></a>gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用</h3><pre><code>var gulp = require(&apos;gulp&apos;)\nvar sass = require(&apos;gulp-sass&apos;)\nvar imagemin = require(&apos;gulp-imagemin&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar cssMinify = require(&apos;gulp-minify-css&apos;)\nvar RevAll = require(&apos;gulp-rev-all&apos;)\nvar filter = require(&apos;gulp-filter&apos;)\n\nvar buildFunc = () =&gt; {\n    var jsFilter = filter(&apos;**/*.js&apos;)\n    var htmlFilter = filter(&apos;**/*.html&apos;)\n    var cssFilter = filter(&apos;**/*.css&apos;)\n    var picFilter = filter([&apos;**/*.jpg&apos;, &apos;**/*.png&apos;])\n\n    var revAll = RevAll({\n        dontGlobal: [&apos;.scss&apos;],\n        dontRenameFile: [&apos;.html&apos;],\n        dontSearchFile: [&apos;.css&apos;],\n        transformPath: function(rev) {\n            return rev\n                .replace(&apos;scripts/&apos;, &apos;dist/scripts/&apos;)\n                .replace(&apos;style/&apos;, &apos;dist/style/&apos;)\n                .replace(&apos;images/&apos;, &apos;dist/images/&apos;)\n        }\n    })\n\n    var v = gulp.src(&apos;src/**/*&apos;)\n        .pipe(revAll.revision());\n\n    // 压缩js\n    v.pipe(jsFilter)\n        .pipe(uglify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩css\n    v.pipe(cssFilter)\n        .pipe(cssMinify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩图片\n    v.pipe(picFilter)\n        .pipe(imagemin())\n        .pipe(gulp.dest(&apos;./dist&apos;))\n\n    // 生成index.html\n    v.pipe(htmlFilter)\n        .pipe(gulp.dest(&apos;./&apos;));\n}\n</code></pre><h3 id=\"使用postcss-autoprefixer-postcss-scss\"><a href=\"#使用postcss-autoprefixer-postcss-scss\" class=\"headerlink\" title=\"使用postcss/autoprefixer/postcss-scss\"></a>使用postcss/autoprefixer/postcss-scss</h3><blockquote>\n<p>需要安装 <code>npm i postcss postcss-loader autoprefixer postcss-scss</code> ,切记一定要装 <code>postcss</code></p>\n</blockquote>\n<ul>\n<li>webpack.config.js中添加配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">module:&#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            test: /\\.scss$/,</div><div class=\"line\">            loader: &apos;style!css?importLoaders=1!postcss!sass&apos;    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;,</div><div class=\"line\">postcss: [autoprefixer(&#123;    </div><div class=\"line\">    // 需要支持的浏览器或者平台的配置</div><div class=\"line\">    browsers: [</div><div class=\"line\">        &quot;android 4&quot;,</div><div class=\"line\">        &quot;iOS 6&quot;,</div><div class=\"line\">        &quot;last 2 versions&quot;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;)],</div></pre></td></tr></table></figure>\n<ul>\n<li>package.json中添加配置（也可以选择postcss.config.js等形式配置)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;postcss&quot;: &#123;</div><div class=\"line\">    &quot;plugins&quot;: &#123;</div><div class=\"line\">        &quot;parser&quot;: &quot;postcss-scss&quot;, </div><div class=\"line\">        &quot;autoprefixer&quot;: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"奇技淫巧","date":"2016-09-28T04:26:03.000Z","_content":"\n### generator 生成i内的 fibonacci数组\n\n    let i = 1000;\n    [...(function(limit){ \n        return function* (){\n            let [prev, curr] = [0,1]\n            while(prev + curr < limit){\n                [prev, curr] = [curr, prev + curr]\n                yield curr\n            }\n        }\n    })(i)()]\n\n<!--more-->\n\n### 求反运算配合indexOf的运用\n\n    Array.prototype.has = String.prototype.has = function(sth){\n        return !!~this.indexOf(sth)\n    }\n\n    'csa'.has('a');   // true\n    [1,2,3].has('1'); // false\n    [1,2,3].has(3);  // true\n\n### 不需要中间变量,交换两个值类型变量的值得装逼进阶\n\n    let [a,b]=[1,2]\n    // 普通青年\n    a=a+b\n    b=a-b\n    a=a-b\n    // 文艺青年\n    a=a^b\n    b=a^b\n    a=a^b\n    // 进阶演化\n    a^=b\n    b^=a\n    a^=b\n    -----\n    b^=a^=b\n    a^=b\n    -----\n    a=(b^=a^=b)^a\n    -----\n    // 究极装逼方案\n    b^=a^(a=b)\n\n为什么会这样呢?  \n因为行内的赋值写法一开始就把右侧变量的值确定下来了  \n也就是说 `b^=a^(a=b)`  \n等价于 `b=b^a^(a=b)`  \n等价于 `b=2^1^(a=2)`  \n等价于 `a=2;b=2^1^2` -- `a=2;b=1`  \n也就解释了 为什么`a^=b^=a^=b`是错误的   \n因为其等价于`a=a^(b=b^(a=a^b))`  \n`a=1^(b=2^(a=1^2))`   // a=1,b=2\n`a=1^(b=2^(a=3))` // a被赋值为3,b=2   \n`a=1^(b=2^3)`  // a=3,b=2  \n`a=1^(b=1)`  // a=3,b被赋值为1  \n`a=1^1` // a=1,b=1\n`a=0` // a被赋值为0,b=1  \n\n### 一些数组操作的技巧,效率据说会高一些\n\n    // 譬如说\n    let arr = []\n    arr[arr.length] = 1 // arr.push(1)\n    [1].concat(arr) // arr.unshift(1)\n\n    // 比如将一个数组的对象转换为数值类型\n    let arr1 = ['1',2,'3']\n    arr1 = arr1.map(v => +v)\n\n    // 比如函数接收一个数值或者一组数值作为参数,也有可能不传\n    function(arrOrValue){\n        let _arr= [].concat(arr || [])\n    }\n\n### 不动点组合子(只适合拿来装逼)\n\n    // 用于将递归匿名函数\n    let Y = f => (x => f(y => x(x)(y)))(x => f(y => x(x)(y)))\n    let steamrollArray = a => Y(fl => i => i instanceof Array ? i.reduce((p, n) => p.concat(fl(n)), []) : i)(a)\n\n通常我们可以将需要递归求值的函数存做一个变量,然后在其内部调用其本身.\n但是装逼的时候,可以采用Y-combinator(fixed-point combinator)的方式去实现匿名函数递归.\n参考[Fixed-point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator)\n","source":"_posts/奇技淫巧.md","raw":"---\ntitle: 奇技淫巧\ndate: 2016-9-28 12:26:03\ntags: javascript \n---\n\n### generator 生成i内的 fibonacci数组\n\n    let i = 1000;\n    [...(function(limit){ \n        return function* (){\n            let [prev, curr] = [0,1]\n            while(prev + curr < limit){\n                [prev, curr] = [curr, prev + curr]\n                yield curr\n            }\n        }\n    })(i)()]\n\n<!--more-->\n\n### 求反运算配合indexOf的运用\n\n    Array.prototype.has = String.prototype.has = function(sth){\n        return !!~this.indexOf(sth)\n    }\n\n    'csa'.has('a');   // true\n    [1,2,3].has('1'); // false\n    [1,2,3].has(3);  // true\n\n### 不需要中间变量,交换两个值类型变量的值得装逼进阶\n\n    let [a,b]=[1,2]\n    // 普通青年\n    a=a+b\n    b=a-b\n    a=a-b\n    // 文艺青年\n    a=a^b\n    b=a^b\n    a=a^b\n    // 进阶演化\n    a^=b\n    b^=a\n    a^=b\n    -----\n    b^=a^=b\n    a^=b\n    -----\n    a=(b^=a^=b)^a\n    -----\n    // 究极装逼方案\n    b^=a^(a=b)\n\n为什么会这样呢?  \n因为行内的赋值写法一开始就把右侧变量的值确定下来了  \n也就是说 `b^=a^(a=b)`  \n等价于 `b=b^a^(a=b)`  \n等价于 `b=2^1^(a=2)`  \n等价于 `a=2;b=2^1^2` -- `a=2;b=1`  \n也就解释了 为什么`a^=b^=a^=b`是错误的   \n因为其等价于`a=a^(b=b^(a=a^b))`  \n`a=1^(b=2^(a=1^2))`   // a=1,b=2\n`a=1^(b=2^(a=3))` // a被赋值为3,b=2   \n`a=1^(b=2^3)`  // a=3,b=2  \n`a=1^(b=1)`  // a=3,b被赋值为1  \n`a=1^1` // a=1,b=1\n`a=0` // a被赋值为0,b=1  \n\n### 一些数组操作的技巧,效率据说会高一些\n\n    // 譬如说\n    let arr = []\n    arr[arr.length] = 1 // arr.push(1)\n    [1].concat(arr) // arr.unshift(1)\n\n    // 比如将一个数组的对象转换为数值类型\n    let arr1 = ['1',2,'3']\n    arr1 = arr1.map(v => +v)\n\n    // 比如函数接收一个数值或者一组数值作为参数,也有可能不传\n    function(arrOrValue){\n        let _arr= [].concat(arr || [])\n    }\n\n### 不动点组合子(只适合拿来装逼)\n\n    // 用于将递归匿名函数\n    let Y = f => (x => f(y => x(x)(y)))(x => f(y => x(x)(y)))\n    let steamrollArray = a => Y(fl => i => i instanceof Array ? i.reduce((p, n) => p.concat(fl(n)), []) : i)(a)\n\n通常我们可以将需要递归求值的函数存做一个变量,然后在其内部调用其本身.\n但是装逼的时候,可以采用Y-combinator(fixed-point combinator)的方式去实现匿名函数递归.\n参考[Fixed-point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator)\n","slug":"奇技淫巧","published":1,"updated":"2016-09-30T11:55:22.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citqv02ek00031cpo6zlshqbi","content":"<h3 id=\"generator-生成i内的-fibonacci数组\"><a href=\"#generator-生成i内的-fibonacci数组\" class=\"headerlink\" title=\"generator 生成i内的 fibonacci数组\"></a>generator 生成i内的 fibonacci数组</h3><pre><code>let i = 1000;\n[...(function(limit){ \n    return function* (){\n        let [prev, curr] = [0,1]\n        while(prev + curr &lt; limit){\n            [prev, curr] = [curr, prev + curr]\n            yield curr\n        }\n    }\n})(i)()]\n</code></pre><a id=\"more\"></a>\n<h3 id=\"求反运算配合indexOf的运用\"><a href=\"#求反运算配合indexOf的运用\" class=\"headerlink\" title=\"求反运算配合indexOf的运用\"></a>求反运算配合indexOf的运用</h3><pre><code>Array.prototype.has = String.prototype.has = function(sth){\n    return !!~this.indexOf(sth)\n}\n\n&apos;csa&apos;.has(&apos;a&apos;);   // true\n[1,2,3].has(&apos;1&apos;); // false\n[1,2,3].has(3);  // true\n</code></pre><h3 id=\"不需要中间变量-交换两个值类型变量的值得装逼进阶\"><a href=\"#不需要中间变量-交换两个值类型变量的值得装逼进阶\" class=\"headerlink\" title=\"不需要中间变量,交换两个值类型变量的值得装逼进阶\"></a>不需要中间变量,交换两个值类型变量的值得装逼进阶</h3><pre><code>let [a,b]=[1,2]\n// 普通青年\na=a+b\nb=a-b\na=a-b\n// 文艺青年\na=a^b\nb=a^b\na=a^b\n// 进阶演化\na^=b\nb^=a\na^=b\n-----\nb^=a^=b\na^=b\n-----\na=(b^=a^=b)^a\n-----\n// 究极装逼方案\nb^=a^(a=b)\n</code></pre><p>为什么会这样呢?<br>因为行内的赋值写法一开始就把右侧变量的值确定下来了<br>也就是说 <code>b^=a^(a=b)</code><br>等价于 <code>b=b^a^(a=b)</code><br>等价于 <code>b=2^1^(a=2)</code><br>等价于 <code>a=2;b=2^1^2</code> – <code>a=2;b=1</code><br>也就解释了 为什么<code>a^=b^=a^=b</code>是错误的<br>因为其等价于<code>a=a^(b=b^(a=a^b))</code><br><code>a=1^(b=2^(a=1^2))</code>   // a=1,b=2<br><code>a=1^(b=2^(a=3))</code> // a被赋值为3,b=2<br><code>a=1^(b=2^3)</code>  // a=3,b=2<br><code>a=1^(b=1)</code>  // a=3,b被赋值为1<br><code>a=1^1</code> // a=1,b=1<br><code>a=0</code> // a被赋值为0,b=1  </p>\n<h3 id=\"一些数组操作的技巧-效率据说会高一些\"><a href=\"#一些数组操作的技巧-效率据说会高一些\" class=\"headerlink\" title=\"一些数组操作的技巧,效率据说会高一些\"></a>一些数组操作的技巧,效率据说会高一些</h3><pre><code>// 譬如说\nlet arr = []\narr[arr.length] = 1 // arr.push(1)\n[1].concat(arr) // arr.unshift(1)\n\n// 比如将一个数组的对象转换为数值类型\nlet arr1 = [&apos;1&apos;,2,&apos;3&apos;]\narr1 = arr1.map(v =&gt; +v)\n\n// 比如函数接收一个数值或者一组数值作为参数,也有可能不传\nfunction(arrOrValue){\n    let _arr= [].concat(arr || [])\n}\n</code></pre><h3 id=\"不动点组合子-只适合拿来装逼\"><a href=\"#不动点组合子-只适合拿来装逼\" class=\"headerlink\" title=\"不动点组合子(只适合拿来装逼)\"></a>不动点组合子(只适合拿来装逼)</h3><pre><code>// 用于将递归匿名函数\nlet Y = f =&gt; (x =&gt; f(y =&gt; x(x)(y)))(x =&gt; f(y =&gt; x(x)(y)))\nlet steamrollArray = a =&gt; Y(fl =&gt; i =&gt; i instanceof Array ? i.reduce((p, n) =&gt; p.concat(fl(n)), []) : i)(a)\n</code></pre><p>通常我们可以将需要递归求值的函数存做一个变量,然后在其内部调用其本身.<br>但是装逼的时候,可以采用Y-combinator(fixed-point combinator)的方式去实现匿名函数递归.<br>参考<a href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator\" target=\"_blank\" rel=\"external\">Fixed-point combinator</a></p>\n","excerpt":"<h3 id=\"generator-生成i内的-fibonacci数组\"><a href=\"#generator-生成i内的-fibonacci数组\" class=\"headerlink\" title=\"generator 生成i内的 fibonacci数组\"></a>generator 生成i内的 fibonacci数组</h3><pre><code>let i = 1000;\n[...(function(limit){ \n    return function* (){\n        let [prev, curr] = [0,1]\n        while(prev + curr &lt; limit){\n            [prev, curr] = [curr, prev + curr]\n            yield curr\n        }\n    }\n})(i)()]\n</code></pre>","more":"<h3 id=\"求反运算配合indexOf的运用\"><a href=\"#求反运算配合indexOf的运用\" class=\"headerlink\" title=\"求反运算配合indexOf的运用\"></a>求反运算配合indexOf的运用</h3><pre><code>Array.prototype.has = String.prototype.has = function(sth){\n    return !!~this.indexOf(sth)\n}\n\n&apos;csa&apos;.has(&apos;a&apos;);   // true\n[1,2,3].has(&apos;1&apos;); // false\n[1,2,3].has(3);  // true\n</code></pre><h3 id=\"不需要中间变量-交换两个值类型变量的值得装逼进阶\"><a href=\"#不需要中间变量-交换两个值类型变量的值得装逼进阶\" class=\"headerlink\" title=\"不需要中间变量,交换两个值类型变量的值得装逼进阶\"></a>不需要中间变量,交换两个值类型变量的值得装逼进阶</h3><pre><code>let [a,b]=[1,2]\n// 普通青年\na=a+b\nb=a-b\na=a-b\n// 文艺青年\na=a^b\nb=a^b\na=a^b\n// 进阶演化\na^=b\nb^=a\na^=b\n-----\nb^=a^=b\na^=b\n-----\na=(b^=a^=b)^a\n-----\n// 究极装逼方案\nb^=a^(a=b)\n</code></pre><p>为什么会这样呢?<br>因为行内的赋值写法一开始就把右侧变量的值确定下来了<br>也就是说 <code>b^=a^(a=b)</code><br>等价于 <code>b=b^a^(a=b)</code><br>等价于 <code>b=2^1^(a=2)</code><br>等价于 <code>a=2;b=2^1^2</code> – <code>a=2;b=1</code><br>也就解释了 为什么<code>a^=b^=a^=b</code>是错误的<br>因为其等价于<code>a=a^(b=b^(a=a^b))</code><br><code>a=1^(b=2^(a=1^2))</code>   // a=1,b=2<br><code>a=1^(b=2^(a=3))</code> // a被赋值为3,b=2<br><code>a=1^(b=2^3)</code>  // a=3,b=2<br><code>a=1^(b=1)</code>  // a=3,b被赋值为1<br><code>a=1^1</code> // a=1,b=1<br><code>a=0</code> // a被赋值为0,b=1  </p>\n<h3 id=\"一些数组操作的技巧-效率据说会高一些\"><a href=\"#一些数组操作的技巧-效率据说会高一些\" class=\"headerlink\" title=\"一些数组操作的技巧,效率据说会高一些\"></a>一些数组操作的技巧,效率据说会高一些</h3><pre><code>// 譬如说\nlet arr = []\narr[arr.length] = 1 // arr.push(1)\n[1].concat(arr) // arr.unshift(1)\n\n// 比如将一个数组的对象转换为数值类型\nlet arr1 = [&apos;1&apos;,2,&apos;3&apos;]\narr1 = arr1.map(v =&gt; +v)\n\n// 比如函数接收一个数值或者一组数值作为参数,也有可能不传\nfunction(arrOrValue){\n    let _arr= [].concat(arr || [])\n}\n</code></pre><h3 id=\"不动点组合子-只适合拿来装逼\"><a href=\"#不动点组合子-只适合拿来装逼\" class=\"headerlink\" title=\"不动点组合子(只适合拿来装逼)\"></a>不动点组合子(只适合拿来装逼)</h3><pre><code>// 用于将递归匿名函数\nlet Y = f =&gt; (x =&gt; f(y =&gt; x(x)(y)))(x =&gt; f(y =&gt; x(x)(y)))\nlet steamrollArray = a =&gt; Y(fl =&gt; i =&gt; i instanceof Array ? i.reduce((p, n) =&gt; p.concat(fl(n)), []) : i)(a)\n</code></pre><p>通常我们可以将需要递归求值的函数存做一个变量,然后在其内部调用其本身.<br>但是装逼的时候,可以采用Y-combinator(fixed-point combinator)的方式去实现匿名函数递归.<br>参考<a href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator\">Fixed-point combinator</a></p>"},{"layout":"network.md","title":"好玩的社区","date":"2016-10-01T06:52:16.000Z","_content":"\n> 以下是个人搜罗的一些比较喜欢的社区,比起传统的csdn和open-open那种技术性论坛和博客,这里给我的感觉更像是家.哈哈哈.\n\n<!--more-->\n### [知乎](http://www.zhihu.com)\n\n不用多说,这应该是当前国内互联网社区的当家花旦.\n\n### [简书](http://www.jianshu.com)\n\n一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.\n\n### [SegmentFault](http://www.segmentfault.com)\n\n相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.\n\n### [PingWest品玩](http://www.pingwest.com)\n\n狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.\n\n### [那么(原孢子)](http://www.named.cn)\n\n从前有一个设计师社区,后来...没有了...(好失落)\n\n### [LOFTER乐乎](http://www.lofter.com)\n\n每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!\n\n### [V2EX](http://www.v2ex.com)\n\n简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.\n\n### [众成翻译](http://www.zcfy.cc/)\n\n打着翻译的旗号的前沿技术社区.\n\n### [云栖社区](https://yq.aliyun.com/)\n\n阿里爸爸的技术社区.\n\n","source":"_posts/好玩的社区.md","raw":"layout: network.md\ntitle: 好玩的社区\ndate: 2016-10-01 14:52:16\ntags: 技术 社区\n---\n\n> 以下是个人搜罗的一些比较喜欢的社区,比起传统的csdn和open-open那种技术性论坛和博客,这里给我的感觉更像是家.哈哈哈.\n\n<!--more-->\n### [知乎](http://www.zhihu.com)\n\n不用多说,这应该是当前国内互联网社区的当家花旦.\n\n### [简书](http://www.jianshu.com)\n\n一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.\n\n### [SegmentFault](http://www.segmentfault.com)\n\n相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.\n\n### [PingWest品玩](http://www.pingwest.com)\n\n狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.\n\n### [那么(原孢子)](http://www.named.cn)\n\n从前有一个设计师社区,后来...没有了...(好失落)\n\n### [LOFTER乐乎](http://www.lofter.com)\n\n每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!\n\n### [V2EX](http://www.v2ex.com)\n\n简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.\n\n### [众成翻译](http://www.zcfy.cc/)\n\n打着翻译的旗号的前沿技术社区.\n\n### [云栖社区](https://yq.aliyun.com/)\n\n阿里爸爸的技术社区.\n\n","slug":"好玩的社区","published":1,"updated":"2016-10-09T03:08:04.515Z","_id":"citqv02el00041cpo64s2qj08","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>以下是个人搜罗的一些比较喜欢的社区,比起传统的csdn和open-open那种技术性论坛和博客,这里给我的感觉更像是家.哈哈哈.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"知乎\"><a href=\"#知乎\" class=\"headerlink\" title=\"知乎\"></a><a href=\"http://www.zhihu.com\" target=\"_blank\" rel=\"external\">知乎</a></h3><p>不用多说,这应该是当前国内互联网社区的当家花旦.</p>\n<h3 id=\"简书\"><a href=\"#简书\" class=\"headerlink\" title=\"简书\"></a><a href=\"http://www.jianshu.com\" target=\"_blank\" rel=\"external\">简书</a></h3><p>一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.</p>\n<h3 id=\"SegmentFault\"><a href=\"#SegmentFault\" class=\"headerlink\" title=\"SegmentFault\"></a><a href=\"http://www.segmentfault.com\" target=\"_blank\" rel=\"external\">SegmentFault</a></h3><p>相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.</p>\n<h3 id=\"PingWest品玩\"><a href=\"#PingWest品玩\" class=\"headerlink\" title=\"PingWest品玩\"></a><a href=\"http://www.pingwest.com\" target=\"_blank\" rel=\"external\">PingWest品玩</a></h3><p>狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.</p>\n<h3 id=\"那么-原孢子\"><a href=\"#那么-原孢子\" class=\"headerlink\" title=\"那么(原孢子)\"></a><a href=\"http://www.named.cn\" target=\"_blank\" rel=\"external\">那么(原孢子)</a></h3><p>从前有一个设计师社区,后来…没有了…(好失落)</p>\n<h3 id=\"LOFTER乐乎\"><a href=\"#LOFTER乐乎\" class=\"headerlink\" title=\"LOFTER乐乎\"></a><a href=\"http://www.lofter.com\" target=\"_blank\" rel=\"external\">LOFTER乐乎</a></h3><p>每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!</p>\n<h3 id=\"V2EX\"><a href=\"#V2EX\" class=\"headerlink\" title=\"V2EX\"></a><a href=\"http://www.v2ex.com\" target=\"_blank\" rel=\"external\">V2EX</a></h3><p>简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.</p>\n<h3 id=\"众成翻译\"><a href=\"#众成翻译\" class=\"headerlink\" title=\"众成翻译\"></a><a href=\"http://www.zcfy.cc/\" target=\"_blank\" rel=\"external\">众成翻译</a></h3><p>打着翻译的旗号的前沿技术社区.</p>\n<h3 id=\"云栖社区\"><a href=\"#云栖社区\" class=\"headerlink\" title=\"云栖社区\"></a><a href=\"https://yq.aliyun.com/\" target=\"_blank\" rel=\"external\">云栖社区</a></h3><p>阿里爸爸的技术社区.</p>\n","excerpt":"<blockquote>\n<p>以下是个人搜罗的一些比较喜欢的社区,比起传统的csdn和open-open那种技术性论坛和博客,这里给我的感觉更像是家.哈哈哈.</p>\n</blockquote>","more":"<h3 id=\"知乎\"><a href=\"#知乎\" class=\"headerlink\" title=\"知乎\"></a><a href=\"http://www.zhihu.com\">知乎</a></h3><p>不用多说,这应该是当前国内互联网社区的当家花旦.</p>\n<h3 id=\"简书\"><a href=\"#简书\" class=\"headerlink\" title=\"简书\"></a><a href=\"http://www.jianshu.com\">简书</a></h3><p>一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.</p>\n<h3 id=\"SegmentFault\"><a href=\"#SegmentFault\" class=\"headerlink\" title=\"SegmentFault\"></a><a href=\"http://www.segmentfault.com\">SegmentFault</a></h3><p>相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.</p>\n<h3 id=\"PingWest品玩\"><a href=\"#PingWest品玩\" class=\"headerlink\" title=\"PingWest品玩\"></a><a href=\"http://www.pingwest.com\">PingWest品玩</a></h3><p>狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.</p>\n<h3 id=\"那么-原孢子\"><a href=\"#那么-原孢子\" class=\"headerlink\" title=\"那么(原孢子)\"></a><a href=\"http://www.named.cn\">那么(原孢子)</a></h3><p>从前有一个设计师社区,后来…没有了…(好失落)</p>\n<h3 id=\"LOFTER乐乎\"><a href=\"#LOFTER乐乎\" class=\"headerlink\" title=\"LOFTER乐乎\"></a><a href=\"http://www.lofter.com\">LOFTER乐乎</a></h3><p>每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!</p>\n<h3 id=\"V2EX\"><a href=\"#V2EX\" class=\"headerlink\" title=\"V2EX\"></a><a href=\"http://www.v2ex.com\">V2EX</a></h3><p>简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.</p>\n<h3 id=\"众成翻译\"><a href=\"#众成翻译\" class=\"headerlink\" title=\"众成翻译\"></a><a href=\"http://www.zcfy.cc/\">众成翻译</a></h3><p>打着翻译的旗号的前沿技术社区.</p>\n<h3 id=\"云栖社区\"><a href=\"#云栖社区\" class=\"headerlink\" title=\"云栖社区\"></a><a href=\"https://yq.aliyun.com/\">云栖社区</a></h3><p>阿里爸爸的技术社区.</p>"},{"title":"踩过的坑","date":"2016-09-28T04:57:29.000Z","_content":"\n\n# 浏览器\n\n### IE 系列\n\n - IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.\n - 在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是**respond默认不会加载跨域样式资源**,\n - 在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.\n\n### Ajax/CORS\n\n - XMLHttpRequest的`setRequestHeader`要在`open`后进行\n - 在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的`withCredentials`要在`open`后,设置为`true`(对应的,服务器要有`Access-Control-Allow-Credentials: true`的responseHeader)\n - XHR的同步请求中不能设置timeout,否则会报错\n - XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick\n\n<!--more-->\n\n### IOS 微信X5\n\n - 不支持canvas.resetTransform()\n - 不支持Array.fill\n - 不支持Array.findIndex \n\n### Android 微信X5\n\n - 不支持字符串模板\n\n# NODEJS\n\n### MSBuild Error MSB4132 错误 \n\n该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.\n\n> msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0\n\n- 首先检查Python安装的版本和系统变量\n- 然后检查是否安装MS build tools\n- 接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)\n- 告诉npm当前系统msbuild的版本\n\t- 可以设置npm全局配置 `npm config set msvs_version xxxx --global` xxxx代表版本 2012/2013/2015  \n\t- 或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 `npm install <module> --msvs_version=xxxx`\n- 重装node-gyp\n\n### MSBuild Error MSB4019 错误\n\n这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的\n\n- 首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了`vcredist_x64 2013`是没有的\n- 其次,确保路径设置正确\n\t- 打开注册表确认`HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0`路径下的`VCTargetsPath`的值为`$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140`,V140是vs2015的路径,其余版本还得视情况而定\n\t- 也可以打开cmd,设置VCTargetsPath路径 `set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140`,不过这个方式cmd关了就没用了\n- 重新 `npm rebuild node-sass`\n\n<strike>\n### MSBuild Error MSB3428 错误\n\n该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题\n\n- 首先检查系统是否安装了.net framework 2.0 sdk\n\t- 如果没有装,这里是下载地址 https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！ \n- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径\n</strike>\n\n### Babel-Gulp使用[Symbol.iterator]时编译出现错误 \n\n> npm install babel-plugin-transform-runtime\n\n然后在\n\n\tgulp.task('default', ()=> {\n\t  return gulp\n\t    .src('app.js')\n\t    .pipe(babel({\n\t      presets: ['es2015'],\n\t      plugins: ['transform-runtime']\n\t    }))\n\t    .pipe(gulp.dest('dist'))\n\t    ;\n\t});\n\n但是编译完成后的文件模块的路径出现了问题\n\n\tError: Cannot find module 'babel-runtime/core-js/get-iterator'\n\t    at Function.Module._resolveFilename (module.js:337:15)\n\t    at Function.Module._load (module.js:287:25)\n\t    at Module.require (module.js:366:17)\n\t    at require (module.js:385:17)\n\t    at Object.<anonymous> (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n\t    at Module._compile (module.js:435:26)\n\t    at Object.Module._extensions..js (module.js:442:10)\n\t    at Module.load (module.js:356:32)\n\t    at Function.Module._load (module.js:311:12)\n\t    at Function.Module.runMain (module.js:467:10)\n\n\t尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 \"Cannot find module 'babel-runtime/regenerator'\")\n\n# ELM\n\n### windows环境下 elm-package install/elm-make 出现错误permission denied\n\n\telm-make: elm-lang-core-5204441: MoveFileEx \"elm-lang-core-5204441\" \"2.1.0\": permission denied (Access is denied.)\n\n详情参见 [ISSUE](https://github.com/elm-lang/elm-platform/issues/81)  \n分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.  \n临时解决方法是手动移动`elm-lang-core-5204441`文件夹到`elm-stuff/packages/elm-lang/core/`目录下,重命名目录名称为`2.1.0`\n\n# REACT-NATIVE\n\n### windows环境下 android开发 \n\n\t- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n\t于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n\t然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了","source":"_posts/踩过的坑.md","raw":"---\ntitle: 踩过的坑\ndate: 2016-9-28 12:57:29\ntags: 踩坑\n---\n\n\n# 浏览器\n\n### IE 系列\n\n - IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.\n - 在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是**respond默认不会加载跨域样式资源**,\n - 在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.\n\n### Ajax/CORS\n\n - XMLHttpRequest的`setRequestHeader`要在`open`后进行\n - 在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的`withCredentials`要在`open`后,设置为`true`(对应的,服务器要有`Access-Control-Allow-Credentials: true`的responseHeader)\n - XHR的同步请求中不能设置timeout,否则会报错\n - XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick\n\n<!--more-->\n\n### IOS 微信X5\n\n - 不支持canvas.resetTransform()\n - 不支持Array.fill\n - 不支持Array.findIndex \n\n### Android 微信X5\n\n - 不支持字符串模板\n\n# NODEJS\n\n### MSBuild Error MSB4132 错误 \n\n该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.\n\n> msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0\n\n- 首先检查Python安装的版本和系统变量\n- 然后检查是否安装MS build tools\n- 接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)\n- 告诉npm当前系统msbuild的版本\n\t- 可以设置npm全局配置 `npm config set msvs_version xxxx --global` xxxx代表版本 2012/2013/2015  \n\t- 或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 `npm install <module> --msvs_version=xxxx`\n- 重装node-gyp\n\n### MSBuild Error MSB4019 错误\n\n这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的\n\n- 首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了`vcredist_x64 2013`是没有的\n- 其次,确保路径设置正确\n\t- 打开注册表确认`HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0`路径下的`VCTargetsPath`的值为`$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140`,V140是vs2015的路径,其余版本还得视情况而定\n\t- 也可以打开cmd,设置VCTargetsPath路径 `set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140`,不过这个方式cmd关了就没用了\n- 重新 `npm rebuild node-sass`\n\n<strike>\n### MSBuild Error MSB3428 错误\n\n该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题\n\n- 首先检查系统是否安装了.net framework 2.0 sdk\n\t- 如果没有装,这里是下载地址 https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！ \n- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径\n</strike>\n\n### Babel-Gulp使用[Symbol.iterator]时编译出现错误 \n\n> npm install babel-plugin-transform-runtime\n\n然后在\n\n\tgulp.task('default', ()=> {\n\t  return gulp\n\t    .src('app.js')\n\t    .pipe(babel({\n\t      presets: ['es2015'],\n\t      plugins: ['transform-runtime']\n\t    }))\n\t    .pipe(gulp.dest('dist'))\n\t    ;\n\t});\n\n但是编译完成后的文件模块的路径出现了问题\n\n\tError: Cannot find module 'babel-runtime/core-js/get-iterator'\n\t    at Function.Module._resolveFilename (module.js:337:15)\n\t    at Function.Module._load (module.js:287:25)\n\t    at Module.require (module.js:366:17)\n\t    at require (module.js:385:17)\n\t    at Object.<anonymous> (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n\t    at Module._compile (module.js:435:26)\n\t    at Object.Module._extensions..js (module.js:442:10)\n\t    at Module.load (module.js:356:32)\n\t    at Function.Module._load (module.js:311:12)\n\t    at Function.Module.runMain (module.js:467:10)\n\n\t尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 \"Cannot find module 'babel-runtime/regenerator'\")\n\n# ELM\n\n### windows环境下 elm-package install/elm-make 出现错误permission denied\n\n\telm-make: elm-lang-core-5204441: MoveFileEx \"elm-lang-core-5204441\" \"2.1.0\": permission denied (Access is denied.)\n\n详情参见 [ISSUE](https://github.com/elm-lang/elm-platform/issues/81)  \n分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.  \n临时解决方法是手动移动`elm-lang-core-5204441`文件夹到`elm-stuff/packages/elm-lang/core/`目录下,重命名目录名称为`2.1.0`\n\n# REACT-NATIVE\n\n### windows环境下 android开发 \n\n\t- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n\t于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n\t然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了","slug":"踩过的坑","published":1,"updated":"2016-10-20T11:17:53.000Z","_id":"citqv02em00051cpogldidd2o","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h3 id=\"IE-系列\"><a href=\"#IE-系列\" class=\"headerlink\" title=\"IE 系列\"></a>IE 系列</h3><ul>\n<li>IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.</li>\n<li>在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是<strong>respond默认不会加载跨域样式资源</strong>,</li>\n<li>在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.</li>\n</ul>\n<h3 id=\"Ajax-CORS\"><a href=\"#Ajax-CORS\" class=\"headerlink\" title=\"Ajax/CORS\"></a>Ajax/CORS</h3><ul>\n<li>XMLHttpRequest的<code>setRequestHeader</code>要在<code>open</code>后进行</li>\n<li>在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的<code>withCredentials</code>要在<code>open</code>后,设置为<code>true</code>(对应的,服务器要有<code>Access-Control-Allow-Credentials: true</code>的responseHeader)</li>\n<li>XHR的同步请求中不能设置timeout,否则会报错</li>\n<li>XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"IOS-微信X5\"><a href=\"#IOS-微信X5\" class=\"headerlink\" title=\"IOS 微信X5\"></a>IOS 微信X5</h3><ul>\n<li>不支持canvas.resetTransform()</li>\n<li>不支持Array.fill</li>\n<li>不支持Array.findIndex </li>\n</ul>\n<h3 id=\"Android-微信X5\"><a href=\"#Android-微信X5\" class=\"headerlink\" title=\"Android 微信X5\"></a>Android 微信X5</h3><ul>\n<li>不支持字符串模板</li>\n</ul>\n<h1 id=\"NODEJS\"><a href=\"#NODEJS\" class=\"headerlink\" title=\"NODEJS\"></a>NODEJS</h1><h3 id=\"MSBuild-Error-MSB4132-错误\"><a href=\"#MSBuild-Error-MSB4132-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4132 错误\"></a>MSBuild Error MSB4132 错误</h3><p>该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.</p>\n<blockquote>\n<p>msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0</p>\n</blockquote>\n<ul>\n<li>首先检查Python安装的版本和系统变量</li>\n<li>然后检查是否安装MS build tools</li>\n<li>接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)</li>\n<li>告诉npm当前系统msbuild的版本<ul>\n<li>可以设置npm全局配置 <code>npm config set msvs_version xxxx --global</code> xxxx代表版本 2012/2013/2015  </li>\n<li>或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 <code>npm install &lt;module&gt; --msvs_version=xxxx</code></li>\n</ul>\n</li>\n<li>重装node-gyp</li>\n</ul>\n<h3 id=\"MSBuild-Error-MSB4019-错误\"><a href=\"#MSBuild-Error-MSB4019-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4019 错误\"></a>MSBuild Error MSB4019 错误</h3><p>这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的</p>\n<ul>\n<li>首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了<code>vcredist_x64 2013</code>是没有的</li>\n<li>其次,确保路径设置正确<ul>\n<li>打开注册表确认<code>HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0</code>路径下的<code>VCTargetsPath</code>的值为<code>$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140</code>,V140是vs2015的路径,其余版本还得视情况而定</li>\n<li>也可以打开cmd,设置VCTargetsPath路径 <code>set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140</code>,不过这个方式cmd关了就没用了</li>\n</ul>\n</li>\n<li>重新 <code>npm rebuild node-sass</code></li>\n</ul>\n<strike><br>### MSBuild Error MSB3428 错误<br><br>该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题<br><br>- 首先检查系统是否安装了.net framework 2.0 sdk<br>    - 如果没有装,这里是下载地址 <a href=\"https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe\" target=\"_blank\" rel=\"external\">https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe</a> 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！<br>- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径<br></strike>\n\n<h3 id=\"Babel-Gulp使用-Symbol-iterator-时编译出现错误\"><a href=\"#Babel-Gulp使用-Symbol-iterator-时编译出现错误\" class=\"headerlink\" title=\"Babel-Gulp使用[Symbol.iterator]时编译出现错误\"></a>Babel-Gulp使用[Symbol.iterator]时编译出现错误</h3><blockquote>\n<p>npm install babel-plugin-transform-runtime</p>\n</blockquote>\n<p>然后在</p>\n<pre><code>gulp.task(&apos;default&apos;, ()=&gt; {\n  return gulp\n    .src(&apos;app.js&apos;)\n    .pipe(babel({\n      presets: [&apos;es2015&apos;],\n      plugins: [&apos;transform-runtime&apos;]\n    }))\n    .pipe(gulp.dest(&apos;dist&apos;))\n    ;\n});\n</code></pre><p>但是编译完成后的文件模块的路径出现了问题</p>\n<pre><code>Error: Cannot find module &apos;babel-runtime/core-js/get-iterator&apos;\n    at Function.Module._resolveFilename (module.js:337:15)\n    at Function.Module._load (module.js:287:25)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.&lt;anonymous&gt; (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Function.Module.runMain (module.js:467:10)\n\n尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 &quot;Cannot find module &apos;babel-runtime/regenerator&apos;&quot;)\n</code></pre><h1 id=\"ELM\"><a href=\"#ELM\" class=\"headerlink\" title=\"ELM\"></a>ELM</h1><h3 id=\"windows环境下-elm-package-install-elm-make-出现错误permission-denied\"><a href=\"#windows环境下-elm-package-install-elm-make-出现错误permission-denied\" class=\"headerlink\" title=\"windows环境下 elm-package install/elm-make 出现错误permission denied\"></a>windows环境下 elm-package install/elm-make 出现错误permission denied</h3><pre><code>elm-make: elm-lang-core-5204441: MoveFileEx &quot;elm-lang-core-5204441&quot; &quot;2.1.0&quot;: permission denied (Access is denied.)\n</code></pre><p>详情参见 <a href=\"https://github.com/elm-lang/elm-platform/issues/81\">ISSUE</a><br>分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.<br>临时解决方法是手动移动<code>elm-lang-core-5204441</code>文件夹到<code>elm-stuff/packages/elm-lang/core/</code>目录下,重命名目录名称为<code>2.1.0</code></p>\n<h1 id=\"REACT-NATIVE\"><a href=\"#REACT-NATIVE\" class=\"headerlink\" title=\"REACT-NATIVE\"></a>REACT-NATIVE</h1><h3 id=\"windows环境下-android开发\"><a href=\"#windows环境下-android开发\" class=\"headerlink\" title=\"windows环境下 android开发\"></a>windows环境下 android开发</h3><pre><code>- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n</code></pre>","excerpt":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h3 id=\"IE-系列\"><a href=\"#IE-系列\" class=\"headerlink\" title=\"IE 系列\"></a>IE 系列</h3><ul>\n<li>IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.</li>\n<li>在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是<strong>respond默认不会加载跨域样式资源</strong>,</li>\n<li>在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.</li>\n</ul>\n<h3 id=\"Ajax-CORS\"><a href=\"#Ajax-CORS\" class=\"headerlink\" title=\"Ajax/CORS\"></a>Ajax/CORS</h3><ul>\n<li>XMLHttpRequest的<code>setRequestHeader</code>要在<code>open</code>后进行</li>\n<li>在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的<code>withCredentials</code>要在<code>open</code>后,设置为<code>true</code>(对应的,服务器要有<code>Access-Control-Allow-Credentials: true</code>的responseHeader)</li>\n<li>XHR的同步请求中不能设置timeout,否则会报错</li>\n<li>XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick</li>\n</ul>","more":"<h3 id=\"IOS-微信X5\"><a href=\"#IOS-微信X5\" class=\"headerlink\" title=\"IOS 微信X5\"></a>IOS 微信X5</h3><ul>\n<li>不支持canvas.resetTransform()</li>\n<li>不支持Array.fill</li>\n<li>不支持Array.findIndex </li>\n</ul>\n<h3 id=\"Android-微信X5\"><a href=\"#Android-微信X5\" class=\"headerlink\" title=\"Android 微信X5\"></a>Android 微信X5</h3><ul>\n<li>不支持字符串模板</li>\n</ul>\n<h1 id=\"NODEJS\"><a href=\"#NODEJS\" class=\"headerlink\" title=\"NODEJS\"></a>NODEJS</h1><h3 id=\"MSBuild-Error-MSB4132-错误\"><a href=\"#MSBuild-Error-MSB4132-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4132 错误\"></a>MSBuild Error MSB4132 错误</h3><p>该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.</p>\n<blockquote>\n<p>msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0</p>\n</blockquote>\n<ul>\n<li>首先检查Python安装的版本和系统变量</li>\n<li>然后检查是否安装MS build tools</li>\n<li>接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)</li>\n<li>告诉npm当前系统msbuild的版本<ul>\n<li>可以设置npm全局配置 <code>npm config set msvs_version xxxx --global</code> xxxx代表版本 2012/2013/2015  </li>\n<li>或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 <code>npm install &lt;module&gt; --msvs_version=xxxx</code></li>\n</ul>\n</li>\n<li>重装node-gyp</li>\n</ul>\n<h3 id=\"MSBuild-Error-MSB4019-错误\"><a href=\"#MSBuild-Error-MSB4019-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4019 错误\"></a>MSBuild Error MSB4019 错误</h3><p>这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的</p>\n<ul>\n<li>首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了<code>vcredist_x64 2013</code>是没有的</li>\n<li>其次,确保路径设置正确<ul>\n<li>打开注册表确认<code>HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0</code>路径下的<code>VCTargetsPath</code>的值为<code>$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140</code>,V140是vs2015的路径,其余版本还得视情况而定</li>\n<li>也可以打开cmd,设置VCTargetsPath路径 <code>set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140</code>,不过这个方式cmd关了就没用了</li>\n</ul>\n</li>\n<li>重新 <code>npm rebuild node-sass</code></li>\n</ul>\n<strike><br>### MSBuild Error MSB3428 错误<br><br>该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题<br><br>- 首先检查系统是否安装了.net framework 2.0 sdk<br>    - 如果没有装,这里是下载地址 <a href=\"https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe\">https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe</a> 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！<br>- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径<br></strike>\n\n<h3 id=\"Babel-Gulp使用-Symbol-iterator-时编译出现错误\"><a href=\"#Babel-Gulp使用-Symbol-iterator-时编译出现错误\" class=\"headerlink\" title=\"Babel-Gulp使用[Symbol.iterator]时编译出现错误\"></a>Babel-Gulp使用[Symbol.iterator]时编译出现错误</h3><blockquote>\n<p>npm install babel-plugin-transform-runtime</p>\n</blockquote>\n<p>然后在</p>\n<pre><code>gulp.task(&apos;default&apos;, ()=&gt; {\n  return gulp\n    .src(&apos;app.js&apos;)\n    .pipe(babel({\n      presets: [&apos;es2015&apos;],\n      plugins: [&apos;transform-runtime&apos;]\n    }))\n    .pipe(gulp.dest(&apos;dist&apos;))\n    ;\n});\n</code></pre><p>但是编译完成后的文件模块的路径出现了问题</p>\n<pre><code>Error: Cannot find module &apos;babel-runtime/core-js/get-iterator&apos;\n    at Function.Module._resolveFilename (module.js:337:15)\n    at Function.Module._load (module.js:287:25)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.&lt;anonymous&gt; (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Function.Module.runMain (module.js:467:10)\n\n尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 &quot;Cannot find module &apos;babel-runtime/regenerator&apos;&quot;)\n</code></pre><h1 id=\"ELM\"><a href=\"#ELM\" class=\"headerlink\" title=\"ELM\"></a>ELM</h1><h3 id=\"windows环境下-elm-package-install-elm-make-出现错误permission-denied\"><a href=\"#windows环境下-elm-package-install-elm-make-出现错误permission-denied\" class=\"headerlink\" title=\"windows环境下 elm-package install/elm-make 出现错误permission denied\"></a>windows环境下 elm-package install/elm-make 出现错误permission denied</h3><pre><code>elm-make: elm-lang-core-5204441: MoveFileEx &quot;elm-lang-core-5204441&quot; &quot;2.1.0&quot;: permission denied (Access is denied.)\n</code></pre><p>详情参见 <a href=\"https://github.com/elm-lang/elm-platform/issues/81\">ISSUE</a><br>分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.<br>临时解决方法是手动移动<code>elm-lang-core-5204441</code>文件夹到<code>elm-stuff/packages/elm-lang/core/</code>目录下,重命名目录名称为<code>2.1.0</code></p>\n<h1 id=\"REACT-NATIVE\"><a href=\"#REACT-NATIVE\" class=\"headerlink\" title=\"REACT-NATIVE\"></a>REACT-NATIVE</h1><h3 id=\"windows环境下-android开发\"><a href=\"#windows环境下-android开发\" class=\"headerlink\" title=\"windows环境下 android开发\"></a>windows环境下 android开发</h3><pre><code>- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n</code></pre>"},{"title":"javascript全栈应用实践之路(简述)","date":"2016-09-27T10:24:01.000Z","_content":"\n#### 前言\n\n前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.\n\n所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.\n\n一来,可以分享给更多关注这一块的朋友,去作为入门参考.  \n二来,也可以作为自己两年多的前端工作经验的阶段性总结.  \n再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.  \n最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.\n\n> 食用本系列文章前请注意:\n1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下[阮一峰老师的入门博客](http://es6.ruanyifeng.com)  \n2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明  \n3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出  \n4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用\n\n<!--more-->\n\n![天真笑容.jpg](http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 简介\n\n既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.\n选型可能部分比较保守,譬如选择了express而不是koa等.\n下面,先大致介绍一下将要涉及的部分类库.\n\n###### nodejs 服务器端\n\n- express 基础框架\n- connect-redis & express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)\n- graphql & express-graphql 数据服务(相对传统的restful API更灵活,开发高效)\n- jade 服务器端渲染\n- socket.io 架设套接字通信服务,经典的应用场景:聊天室\n- mongoose mongodb的ODM\n\n###### PC端\n\n- bootstrap & AdminLTE 样式框架\n- angularjs@1.x web前端MVVM解决方案\n\n###### Android移动端\n\n- react-native 我又不会写原生,既然是js全栈,讲道理嘛\n- socket.io.client 套接字通信的客户端\n\n###### 工程化/开发工具\n\n- nodemon 服务器守护进程工具\n- eslint 编码质量工具\n- node-sass css预处理\n- babel 世界正义的卫道士(画风突变)\n- gulp 任务管理\n- webpack web资源打包工具\n\n\n[下一集:服务器搭建](http://www.jianshu.com/p/8616aa298cc5)","source":"_posts/jsFullStackSeries/01.md","raw":"---\ntitle: javascript全栈应用实践之路(简述)\ndate: 2016-09-27 18:24:01\ntags: javascript 全栈\n---\n\n#### 前言\n\n前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.\n\n所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.\n\n一来,可以分享给更多关注这一块的朋友,去作为入门参考.  \n二来,也可以作为自己两年多的前端工作经验的阶段性总结.  \n再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.  \n最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.\n\n> 食用本系列文章前请注意:\n1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下[阮一峰老师的入门博客](http://es6.ruanyifeng.com)  \n2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明  \n3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出  \n4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用\n\n<!--more-->\n\n![天真笑容.jpg](http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 简介\n\n既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.\n选型可能部分比较保守,譬如选择了express而不是koa等.\n下面,先大致介绍一下将要涉及的部分类库.\n\n###### nodejs 服务器端\n\n- express 基础框架\n- connect-redis & express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)\n- graphql & express-graphql 数据服务(相对传统的restful API更灵活,开发高效)\n- jade 服务器端渲染\n- socket.io 架设套接字通信服务,经典的应用场景:聊天室\n- mongoose mongodb的ODM\n\n###### PC端\n\n- bootstrap & AdminLTE 样式框架\n- angularjs@1.x web前端MVVM解决方案\n\n###### Android移动端\n\n- react-native 我又不会写原生,既然是js全栈,讲道理嘛\n- socket.io.client 套接字通信的客户端\n\n###### 工程化/开发工具\n\n- nodemon 服务器守护进程工具\n- eslint 编码质量工具\n- node-sass css预处理\n- babel 世界正义的卫道士(画风突变)\n- gulp 任务管理\n- webpack web资源打包工具\n\n\n[下一集:服务器搭建](http://www.jianshu.com/p/8616aa298cc5)","slug":"jsFullStackSeries/01","published":1,"updated":"2016-09-30T11:55:22.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citqv02f5000f1cpo82rummfs","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.</p>\n<p>所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.</p>\n<p>一来,可以分享给更多关注这一块的朋友,去作为入门参考.<br>二来,也可以作为自己两年多的前端工作经验的阶段性总结.<br>再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.<br>最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.</p>\n<blockquote>\n<p>食用本系列文章前请注意:<br>1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下<a href=\"http://es6.ruanyifeng.com\" target=\"_blank\" rel=\"external\">阮一峰老师的入门博客</a><br>2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明<br>3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出<br>4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天真笑容.jpg\"></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.<br>选型可能部分比较保守,譬如选择了express而不是koa等.<br>下面,先大致介绍一下将要涉及的部分类库.</p>\n<h6 id=\"nodejs-服务器端\"><a href=\"#nodejs-服务器端\" class=\"headerlink\" title=\"nodejs 服务器端\"></a>nodejs 服务器端</h6><ul>\n<li>express 基础框架</li>\n<li>connect-redis &amp; express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)</li>\n<li>graphql &amp; express-graphql 数据服务(相对传统的restful API更灵活,开发高效)</li>\n<li>jade 服务器端渲染</li>\n<li>socket.io 架设套接字通信服务,经典的应用场景:聊天室</li>\n<li>mongoose mongodb的ODM</li>\n</ul>\n<h6 id=\"PC端\"><a href=\"#PC端\" class=\"headerlink\" title=\"PC端\"></a>PC端</h6><ul>\n<li>bootstrap &amp; AdminLTE 样式框架</li>\n<li>angularjs@1.x web前端MVVM解决方案</li>\n</ul>\n<h6 id=\"Android移动端\"><a href=\"#Android移动端\" class=\"headerlink\" title=\"Android移动端\"></a>Android移动端</h6><ul>\n<li>react-native 我又不会写原生,既然是js全栈,讲道理嘛</li>\n<li>socket.io.client 套接字通信的客户端</li>\n</ul>\n<h6 id=\"工程化-开发工具\"><a href=\"#工程化-开发工具\" class=\"headerlink\" title=\"工程化/开发工具\"></a>工程化/开发工具</h6><ul>\n<li>nodemon 服务器守护进程工具</li>\n<li>eslint 编码质量工具</li>\n<li>node-sass css预处理</li>\n<li>babel 世界正义的卫道士(画风突变)</li>\n<li>gulp 任务管理</li>\n<li>webpack web资源打包工具</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/8616aa298cc5\" target=\"_blank\" rel=\"external\">下一集:服务器搭建</a></p>\n","excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.</p>\n<p>所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.</p>\n<p>一来,可以分享给更多关注这一块的朋友,去作为入门参考.<br>二来,也可以作为自己两年多的前端工作经验的阶段性总结.<br>再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.<br>最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.</p>\n<blockquote>\n<p>食用本系列文章前请注意:<br>1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下<a href=\"http://es6.ruanyifeng.com\">阮一峰老师的入门博客</a><br>2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明<br>3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出<br>4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用</p>\n</blockquote>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天真笑容.jpg\"></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.<br>选型可能部分比较保守,譬如选择了express而不是koa等.<br>下面,先大致介绍一下将要涉及的部分类库.</p>\n<h6 id=\"nodejs-服务器端\"><a href=\"#nodejs-服务器端\" class=\"headerlink\" title=\"nodejs 服务器端\"></a>nodejs 服务器端</h6><ul>\n<li>express 基础框架</li>\n<li>connect-redis &amp; express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)</li>\n<li>graphql &amp; express-graphql 数据服务(相对传统的restful API更灵活,开发高效)</li>\n<li>jade 服务器端渲染</li>\n<li>socket.io 架设套接字通信服务,经典的应用场景:聊天室</li>\n<li>mongoose mongodb的ODM</li>\n</ul>\n<h6 id=\"PC端\"><a href=\"#PC端\" class=\"headerlink\" title=\"PC端\"></a>PC端</h6><ul>\n<li>bootstrap &amp; AdminLTE 样式框架</li>\n<li>angularjs@1.x web前端MVVM解决方案</li>\n</ul>\n<h6 id=\"Android移动端\"><a href=\"#Android移动端\" class=\"headerlink\" title=\"Android移动端\"></a>Android移动端</h6><ul>\n<li>react-native 我又不会写原生,既然是js全栈,讲道理嘛</li>\n<li>socket.io.client 套接字通信的客户端</li>\n</ul>\n<h6 id=\"工程化-开发工具\"><a href=\"#工程化-开发工具\" class=\"headerlink\" title=\"工程化/开发工具\"></a>工程化/开发工具</h6><ul>\n<li>nodemon 服务器守护进程工具</li>\n<li>eslint 编码质量工具</li>\n<li>node-sass css预处理</li>\n<li>babel 世界正义的卫道士(画风突变)</li>\n<li>gulp 任务管理</li>\n<li>webpack web资源打包工具</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/8616aa298cc5\">下一集:服务器搭建</a></p>"},{"title":"javascript全栈应用实践之路 (服务器搭建篇 一)","date":"2016-09-27T10:26:00.000Z","_content":"\n#### 软件环境\n\n首先,需要安装一些必要的软件 \n\n- [nodejs(建议最新的6+) ](https://nodejs.org/zh-cn/)\n- [mongodb](https://www.mongodb.com/download-center#community)\n- [redis(windows)](https://github.com/ServiceStack/redis-windows)\n\n请按照官方教程下载,然后无脑下一步下一步至全部安装完成.\n当然**mongodb在注册成系统服务**以及**windows系统下redis服务启动**的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述...\n\n...了吧?\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向**文件** dbpath指向**目录** 都是绝对路径)\n> `mongod --install --serviceName '这个服务的名称' --serviceDisplayName '这个服务显示的名称' --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n接下来,我们要先创建自己的服务器端.\n\n<!--more-->\n\n#### 来吧,Server!\n\n 创建一个空的文件夹 MyServer\n`cd myserver & npm init` \n一路回车之后,再安装几个依赖\n`npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader`\n\n**然后你可以先去睡几个小时,装完之后让你女朋友叫醒你**\n\n哈哈哈,我开玩笑的\n... \n..\n.\n程序员**怎么可能**有女朋友!!! (╯‵□′)╯︵┻━┻\n\n装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:`mkdir server framework core`\n- framework 业务无关的公共的组件 譬如加密等\n- core 业务相关的公共组件  譬如数据模型等\n- server 服务器文件 譬如路由 各种及filter等\n\n接下来,我们在进入server目录创建server.js:`cd server & touch server.js` (cmd下的指令是`cd server & cd .>server.js` 下文将不再赘述)\n\nOK,现在我们在编辑器中打开server.js\n```\nlet propReader = require('properties-reader')('server.properties')\nlet express = require('express')\nlet app = express()\nlet server = require('http').createServer(app)\nlet session = require('../framework/redis/session')\nlet bodyParser = require('body-parser')\nlet initRouters = require('./routes/Initialize')\nconst PORT = propReader.get('server.port') || 80 // 设置应用占用的端口\n\n// 添加bodyParser和session插件\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(session)\n// 初始化路由\ninitRouters(app)  \n\nserver.listen(PORT, () => {\n  console.log(`服务器启动在端口:${PORT}`)\n})\n```\n\n好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:\n`let session = require('../framework/redis/session')`\n`let initRouters = require('./routes/Initialize')`\n接下来,我们去实现这两个模块.\n\n进入到framework目录,创建redis目录,进入之后创建session.js\n```\nlet session = require('express-session')\nlet RedisStore = require('connect-redis')(session)\nlet client = require('./base')\n\nmodule.exports = session({\n  name: 's',\n  store: new RedisStore({\n    client: client,\n    prefix: 'RS'  \n  }),\n  secret: 'keyboard cat',  \n  resave: true,\n  saveUninitialized: false\n})\n```\n接着,在本目录创建 base.js\n```\nlet redis = require('redis')\nlet propReader = require('properties-reader')('server.properties')\nlet client = redis.createClient(propReader.get('redisServer.port'), propReader.get('redisServer.ip'), {})\n\nclient\n  .on('ready', ()=> {\n    console.log(`redis 连接成功`)\n  })\n  .on('reconnecting', ()=> {\n    console.log(`redis 重连中...`)\n  })\n  .on('error', (err)=> {\n    console.error(`redis 连接出错:${err}`)\n  })\n\nmodule.exports = client\n```\n恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties\n```\n# server 服务器配置\nserver.port=8001\n# dbServer 数据库服务器配置\ndbServer.ip=localhost\ndbServer.port=27010\ndbServer.name=test\n\n# redisServer redis服务器配置\nredisServer.ip=localhost\nredisServer.port=6379\n```\n\n好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法\n```\nlet indexRoutes = require('./actions/index')\nlet graphqlRoutes = require('./graphql/index')\n\nmodule.exports = function (app) {\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.\n其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:\n```\nlet router = require('express').Router()\n\nrouter.get(['/', '/index'], (req, res) => {\n\tres.send({\n\t\ttitle: '来啊,互相伤害啊!',\n\t})\n})\n\nmodule.exports = router\n```\n接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js\n```\nmodule.exports = function (mongoose) {\n    return mongoose.Schema({\n        username: {\n            type: String,\n            required: true\n        },\n        salt: {\n            type: String,\n            required: true\n        },\n        hash: {\n            type: String,\n            required: true\n        },\n        nickname: {\n            type: String\n        },\n        avatar: {\n            type: String,\n            'default': '/images/avatar_default.jpg'\n        },\n        gender: {\n            type: String,\n            'enum': ['男', '女']\n        },\n        age: {\n            type: Number,\n            min: 1,\n            max: 120\n        },\n        city: {\n            type: String\n        },\n        hometown: {\n            type: String\n        },\n        phone: {\n            type: String\n        },\n        email: {\n            type: String\n        },\n        birthday: {\n            type: Date\n        },\n        address: {\n            type: String\n        },\n        createdate: {\n            type: Date,\n            'default': Date.now()\n        }\n    })\n}\n```\n然后我们在core的根目录里添加一个models.js\n```\nconst mongoose = require('mongoose')\nmongoose.Promise = global.Promise\nconst propReader = require('properties-reader')('server.properties')\nlet db = mongoose.createConnection(\n    `mongodb://${propReader.get('dbServer.ip')}/${propReader.get('dbServer.name')}`,\n    { replset: { poolSize: 10 } }\n)\n\n// 成功链接数据库\ndb.once('open', function () {\n    console.log('mongodb 连接成功!')\n})\n\n// 链接数据库失败\ndb.on('error', function (err) {\n    console.log(`mongodb 连接错误: ${err}`)\n})\n\nconst CREATE_MODEL = function (key, model) {\n    return db.model(key, model)\n}\n\nconst SCHEMAS = ['user']\n\nlet schemaMapper = {}\nSCHEMAS.forEach(function (key) {\n    schemaMapper[key] = () => CREATE_MODEL(key, require(`./schemas/${key}`)(mongoose))\n}, this)\n\nmodule.exports = schemaMapper\n```\n好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:\n```\nlet UserModel = require('../../../core/models').user()  // 获取刚才的用户模型的数据库连接\nlet {\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLNonNull,\n    GraphQLBoolean,\n} = require('graphql')\n\n// 创建用户模型对应的graphql类型\nlet UserType = new GraphQLObjectType({\n    name: 'user',\n    description: 'user model',\n    fields: {\n        id: {\n            type: GraphQLString,\n            resolve: o => o['_id']\n        },\n        nickname: {\n            type: GraphQLString,\n            resolve: o => o.nickname\n        },\n        username: {\n            type: GraphQLString,\n            resolve: o => o.username\n        },\n        age: {\n            type: GraphQLString,\n            resolve: o => o.age\n        }\n    }\n})\n\n// 创建一个用户的集合类型\nlet UserListType = new GraphQLList(UserType)\n\n// 创建graphql的Schema\nlet schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n        name: 'UsersQuery',\n        description: '查询用户信息',\n        fields: {\n            userList: {\n                type: UserListType,\n                description: '用户列表',\n                resolve(root, param, session) {\n                    return UserModel.find()\n                }\n            },\n            user: {\n                type: UserType,\n                description: '指定用户信息',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                },\n                resolve(root, params, session) {\n                    return UserModel.findOne({\n                        _id: params.id\n                    })\n                }\n            }\n        }\n    }),\n    mutation: new GraphQLObjectType({\n        name: 'UsersMutation',\n        description: '修改用户信息',\n        fields: {\n            updateUserProfile: {\n                type: GraphQLBoolean,\n                description: '修改指定用户的个人资料',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                    terms: {\n                        type: GraphQLString,\n                        require: true\n                    }\n                },\n                resolve(root, params, session) {\n                    let tempModel = JSON.parse(params.terms)\n                    return UserModel\n                        .findOneAndUpdate({\n                            _id: params.id\n                        }, tempModel)\n                        .then((_d) => { return !!_d })  \n                }\n            }\n        }\n    })\n})\n\n// 构造graphql的路由\nlet graphqlRoutes = require('express-graphql')(req => ({\n    schema: schema,\n    context: req.session,\n    graphiql: true\n}))\n\nmodule.exports = graphqlRoutes\n```\n目前为止,我们已经创建了一个简单的服务器,目录结构是这样的\n\n\n![tree.jpg](http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n虽然很多细节并不完善,但是总要一步一步来.\n\n下面让我们在package.json里的scripts下添加一个debug指令\n```\n  \"debug\":\"nodemon server/server.js\"\n```\n保存后,在项目根目录打开控制台 输入`npm run debug` (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行\n\n\n接下来在浏览器访问http://localhost:8001\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 也可以访问 http://localhost:8001/graphql 查看graphql调试器 \n\n我们现在还没有用户数据,所以请求到的结果是空,下一章[我们将逐步完善服务器端功能,并且开始构建我们的web端之旅](http://www.jianshu.com/p/ccd3f3cdc5b4)","source":"_posts/jsFullStackSeries/02.md","raw":"---\ntitle: javascript全栈应用实践之路 (服务器搭建篇 一)\ndate: 2016-09-27 18:26:00\ntags: javascript 全栈\n---\n\n#### 软件环境\n\n首先,需要安装一些必要的软件 \n\n- [nodejs(建议最新的6+) ](https://nodejs.org/zh-cn/)\n- [mongodb](https://www.mongodb.com/download-center#community)\n- [redis(windows)](https://github.com/ServiceStack/redis-windows)\n\n请按照官方教程下载,然后无脑下一步下一步至全部安装完成.\n当然**mongodb在注册成系统服务**以及**windows系统下redis服务启动**的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述...\n\n...了吧?\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向**文件** dbpath指向**目录** 都是绝对路径)\n> `mongod --install --serviceName '这个服务的名称' --serviceDisplayName '这个服务显示的名称' --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n接下来,我们要先创建自己的服务器端.\n\n<!--more-->\n\n#### 来吧,Server!\n\n 创建一个空的文件夹 MyServer\n`cd myserver & npm init` \n一路回车之后,再安装几个依赖\n`npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader`\n\n**然后你可以先去睡几个小时,装完之后让你女朋友叫醒你**\n\n哈哈哈,我开玩笑的\n... \n..\n.\n程序员**怎么可能**有女朋友!!! (╯‵□′)╯︵┻━┻\n\n装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:`mkdir server framework core`\n- framework 业务无关的公共的组件 譬如加密等\n- core 业务相关的公共组件  譬如数据模型等\n- server 服务器文件 譬如路由 各种及filter等\n\n接下来,我们在进入server目录创建server.js:`cd server & touch server.js` (cmd下的指令是`cd server & cd .>server.js` 下文将不再赘述)\n\nOK,现在我们在编辑器中打开server.js\n```\nlet propReader = require('properties-reader')('server.properties')\nlet express = require('express')\nlet app = express()\nlet server = require('http').createServer(app)\nlet session = require('../framework/redis/session')\nlet bodyParser = require('body-parser')\nlet initRouters = require('./routes/Initialize')\nconst PORT = propReader.get('server.port') || 80 // 设置应用占用的端口\n\n// 添加bodyParser和session插件\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(session)\n// 初始化路由\ninitRouters(app)  \n\nserver.listen(PORT, () => {\n  console.log(`服务器启动在端口:${PORT}`)\n})\n```\n\n好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:\n`let session = require('../framework/redis/session')`\n`let initRouters = require('./routes/Initialize')`\n接下来,我们去实现这两个模块.\n\n进入到framework目录,创建redis目录,进入之后创建session.js\n```\nlet session = require('express-session')\nlet RedisStore = require('connect-redis')(session)\nlet client = require('./base')\n\nmodule.exports = session({\n  name: 's',\n  store: new RedisStore({\n    client: client,\n    prefix: 'RS'  \n  }),\n  secret: 'keyboard cat',  \n  resave: true,\n  saveUninitialized: false\n})\n```\n接着,在本目录创建 base.js\n```\nlet redis = require('redis')\nlet propReader = require('properties-reader')('server.properties')\nlet client = redis.createClient(propReader.get('redisServer.port'), propReader.get('redisServer.ip'), {})\n\nclient\n  .on('ready', ()=> {\n    console.log(`redis 连接成功`)\n  })\n  .on('reconnecting', ()=> {\n    console.log(`redis 重连中...`)\n  })\n  .on('error', (err)=> {\n    console.error(`redis 连接出错:${err}`)\n  })\n\nmodule.exports = client\n```\n恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties\n```\n# server 服务器配置\nserver.port=8001\n# dbServer 数据库服务器配置\ndbServer.ip=localhost\ndbServer.port=27010\ndbServer.name=test\n\n# redisServer redis服务器配置\nredisServer.ip=localhost\nredisServer.port=6379\n```\n\n好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法\n```\nlet indexRoutes = require('./actions/index')\nlet graphqlRoutes = require('./graphql/index')\n\nmodule.exports = function (app) {\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.\n其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:\n```\nlet router = require('express').Router()\n\nrouter.get(['/', '/index'], (req, res) => {\n\tres.send({\n\t\ttitle: '来啊,互相伤害啊!',\n\t})\n})\n\nmodule.exports = router\n```\n接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js\n```\nmodule.exports = function (mongoose) {\n    return mongoose.Schema({\n        username: {\n            type: String,\n            required: true\n        },\n        salt: {\n            type: String,\n            required: true\n        },\n        hash: {\n            type: String,\n            required: true\n        },\n        nickname: {\n            type: String\n        },\n        avatar: {\n            type: String,\n            'default': '/images/avatar_default.jpg'\n        },\n        gender: {\n            type: String,\n            'enum': ['男', '女']\n        },\n        age: {\n            type: Number,\n            min: 1,\n            max: 120\n        },\n        city: {\n            type: String\n        },\n        hometown: {\n            type: String\n        },\n        phone: {\n            type: String\n        },\n        email: {\n            type: String\n        },\n        birthday: {\n            type: Date\n        },\n        address: {\n            type: String\n        },\n        createdate: {\n            type: Date,\n            'default': Date.now()\n        }\n    })\n}\n```\n然后我们在core的根目录里添加一个models.js\n```\nconst mongoose = require('mongoose')\nmongoose.Promise = global.Promise\nconst propReader = require('properties-reader')('server.properties')\nlet db = mongoose.createConnection(\n    `mongodb://${propReader.get('dbServer.ip')}/${propReader.get('dbServer.name')}`,\n    { replset: { poolSize: 10 } }\n)\n\n// 成功链接数据库\ndb.once('open', function () {\n    console.log('mongodb 连接成功!')\n})\n\n// 链接数据库失败\ndb.on('error', function (err) {\n    console.log(`mongodb 连接错误: ${err}`)\n})\n\nconst CREATE_MODEL = function (key, model) {\n    return db.model(key, model)\n}\n\nconst SCHEMAS = ['user']\n\nlet schemaMapper = {}\nSCHEMAS.forEach(function (key) {\n    schemaMapper[key] = () => CREATE_MODEL(key, require(`./schemas/${key}`)(mongoose))\n}, this)\n\nmodule.exports = schemaMapper\n```\n好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:\n```\nlet UserModel = require('../../../core/models').user()  // 获取刚才的用户模型的数据库连接\nlet {\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLNonNull,\n    GraphQLBoolean,\n} = require('graphql')\n\n// 创建用户模型对应的graphql类型\nlet UserType = new GraphQLObjectType({\n    name: 'user',\n    description: 'user model',\n    fields: {\n        id: {\n            type: GraphQLString,\n            resolve: o => o['_id']\n        },\n        nickname: {\n            type: GraphQLString,\n            resolve: o => o.nickname\n        },\n        username: {\n            type: GraphQLString,\n            resolve: o => o.username\n        },\n        age: {\n            type: GraphQLString,\n            resolve: o => o.age\n        }\n    }\n})\n\n// 创建一个用户的集合类型\nlet UserListType = new GraphQLList(UserType)\n\n// 创建graphql的Schema\nlet schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n        name: 'UsersQuery',\n        description: '查询用户信息',\n        fields: {\n            userList: {\n                type: UserListType,\n                description: '用户列表',\n                resolve(root, param, session) {\n                    return UserModel.find()\n                }\n            },\n            user: {\n                type: UserType,\n                description: '指定用户信息',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                },\n                resolve(root, params, session) {\n                    return UserModel.findOne({\n                        _id: params.id\n                    })\n                }\n            }\n        }\n    }),\n    mutation: new GraphQLObjectType({\n        name: 'UsersMutation',\n        description: '修改用户信息',\n        fields: {\n            updateUserProfile: {\n                type: GraphQLBoolean,\n                description: '修改指定用户的个人资料',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                    terms: {\n                        type: GraphQLString,\n                        require: true\n                    }\n                },\n                resolve(root, params, session) {\n                    let tempModel = JSON.parse(params.terms)\n                    return UserModel\n                        .findOneAndUpdate({\n                            _id: params.id\n                        }, tempModel)\n                        .then((_d) => { return !!_d })  \n                }\n            }\n        }\n    })\n})\n\n// 构造graphql的路由\nlet graphqlRoutes = require('express-graphql')(req => ({\n    schema: schema,\n    context: req.session,\n    graphiql: true\n}))\n\nmodule.exports = graphqlRoutes\n```\n目前为止,我们已经创建了一个简单的服务器,目录结构是这样的\n\n\n![tree.jpg](http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n虽然很多细节并不完善,但是总要一步一步来.\n\n下面让我们在package.json里的scripts下添加一个debug指令\n```\n  \"debug\":\"nodemon server/server.js\"\n```\n保存后,在项目根目录打开控制台 输入`npm run debug` (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行\n\n\n接下来在浏览器访问http://localhost:8001\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 也可以访问 http://localhost:8001/graphql 查看graphql调试器 \n\n我们现在还没有用户数据,所以请求到的结果是空,下一章[我们将逐步完善服务器端功能,并且开始构建我们的web端之旅](http://www.jianshu.com/p/ccd3f3cdc5b4)","slug":"jsFullStackSeries/02","published":1,"updated":"2016-09-30T11:55:22.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citqv02f7000g1cpo2hxpflj0","content":"<h4 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h4><p>首先,需要安装一些必要的软件 </p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">nodejs(建议最新的6+) </a></li>\n<li><a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"external\">mongodb</a></li>\n<li><a href=\"https://github.com/ServiceStack/redis-windows\">redis(windows)</a></li>\n</ul>\n<p>请按照官方教程下载,然后无脑下一步下一步至全部安装完成.<br>当然<strong>mongodb在注册成系统服务</strong>以及<strong>windows系统下redis服务启动</strong>的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述…</p>\n<p>…了吧?</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向<strong>文件</strong> dbpath指向<strong>目录</strong> 都是绝对路径)<br><code>mongod --install --serviceName &#39;这个服务的名称&#39; --serviceDisplayName &#39;这个服务显示的名称&#39; --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>接下来,我们要先创建自己的服务器端.</p>\n<a id=\"more\"></a>\n<h4 id=\"来吧-Server\"><a href=\"#来吧-Server\" class=\"headerlink\" title=\"来吧,Server!\"></a>来吧,Server!</h4><p> 创建一个空的文件夹 MyServer<br><code>cd myserver &amp; npm init</code><br>一路回车之后,再安装几个依赖<br><code>npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader</code></p>\n<p><strong>然后你可以先去睡几个小时,装完之后让你女朋友叫醒你</strong></p>\n<p>哈哈哈,我开玩笑的<br>…<br>..<br>.<br>程序员<strong>怎么可能</strong>有女朋友!!! (╯‵□′)╯︵┻━┻</p>\n<p>装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:<code>mkdir server framework core</code></p>\n<ul>\n<li>framework 业务无关的公共的组件 譬如加密等</li>\n<li>core 业务相关的公共组件  譬如数据模型等</li>\n<li>server 服务器文件 譬如路由 各种及filter等</li>\n</ul>\n<p>接下来,我们在进入server目录创建server.js:<code>cd server &amp; touch server.js</code> (cmd下的指令是<code>cd server &amp; cd .&gt;server.js</code> 下文将不再赘述)</p>\n<p>OK,现在我们在编辑器中打开server.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let express = require(&apos;express&apos;)</div><div class=\"line\">let app = express()</div><div class=\"line\">let server = require(&apos;http&apos;).createServer(app)</div><div class=\"line\">let session = require(&apos;../framework/redis/session&apos;)</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let initRouters = require(&apos;./routes/Initialize&apos;)</div><div class=\"line\">const PORT = propReader.get(&apos;server.port&apos;) || 80 // 设置应用占用的端口</div><div class=\"line\"></div><div class=\"line\">// 添加bodyParser和session插件</div><div class=\"line\">app.use(bodyParser.json())</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(session)</div><div class=\"line\">// 初始化路由</div><div class=\"line\">initRouters(app)  </div><div class=\"line\"></div><div class=\"line\">server.listen(PORT, () =&gt; &#123;</div><div class=\"line\">  console.log(`服务器启动在端口:$&#123;PORT&#125;`)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:<br><code>let session = require(&#39;../framework/redis/session&#39;)</code><br><code>let initRouters = require(&#39;./routes/Initialize&#39;)</code><br>接下来,我们去实现这两个模块.</p>\n<p>进入到framework目录,创建redis目录,进入之后创建session.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">let session = require(&apos;express-session&apos;)</div><div class=\"line\">let RedisStore = require(&apos;connect-redis&apos;)(session)</div><div class=\"line\">let client = require(&apos;./base&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = session(&#123;</div><div class=\"line\">  name: &apos;s&apos;,</div><div class=\"line\">  store: new RedisStore(&#123;</div><div class=\"line\">    client: client,</div><div class=\"line\">    prefix: &apos;RS&apos;  </div><div class=\"line\">  &#125;),</div><div class=\"line\">  secret: &apos;keyboard cat&apos;,  </div><div class=\"line\">  resave: true,</div><div class=\"line\">  saveUninitialized: false</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>接着,在本目录创建 base.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let redis = require(&apos;redis&apos;)</div><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let client = redis.createClient(propReader.get(&apos;redisServer.port&apos;), propReader.get(&apos;redisServer.ip&apos;), &#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">client</div><div class=\"line\">  .on(&apos;ready&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 连接成功`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;reconnecting&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 重连中...`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;error&apos;, (err)=&gt; &#123;</div><div class=\"line\">    console.error(`redis 连接出错:$&#123;err&#125;`)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = client</div></pre></td></tr></table></figure></p>\n<p>恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server 服务器配置</div><div class=\"line\">server.port=8001</div><div class=\"line\"># dbServer 数据库服务器配置</div><div class=\"line\">dbServer.ip=localhost</div><div class=\"line\">dbServer.port=27010</div><div class=\"line\">dbServer.name=test</div><div class=\"line\"></div><div class=\"line\"># redisServer redis服务器配置</div><div class=\"line\">redisServer.ip=localhost</div><div class=\"line\">redisServer.port=6379</div></pre></td></tr></table></figure></p>\n<p>好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let indexRoutes = require(&apos;./actions/index&apos;)</div><div class=\"line\">let graphqlRoutes = require(&apos;./graphql/index&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.<br>其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\"></div><div class=\"line\">router.get([&apos;/&apos;, &apos;/index&apos;], (req, res) =&gt; &#123;</div><div class=\"line\">\tres.send(&#123;</div><div class=\"line\">\t\ttitle: &apos;来啊,互相伤害啊!&apos;,</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (mongoose) &#123;</div><div class=\"line\">    return mongoose.Schema(&#123;</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        salt: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hash: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        avatar: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;default&apos;: &apos;/images/avatar_default.jpg&apos;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        gender: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;enum&apos;: [&apos;男&apos;, &apos;女&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: Number,</div><div class=\"line\">            min: 1,</div><div class=\"line\">            max: 120</div><div class=\"line\">        &#125;,</div><div class=\"line\">        city: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hometown: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        phone: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        email: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        birthday: &#123;</div><div class=\"line\">            type: Date</div><div class=\"line\">        &#125;,</div><div class=\"line\">        address: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        createdate: &#123;</div><div class=\"line\">            type: Date,</div><div class=\"line\">            &apos;default&apos;: Date.now()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在core的根目录里添加一个models.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;)</div><div class=\"line\">mongoose.Promise = global.Promise</div><div class=\"line\">const propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let db = mongoose.createConnection(</div><div class=\"line\">    `mongodb://$&#123;propReader.get(&apos;dbServer.ip&apos;)&#125;/$&#123;propReader.get(&apos;dbServer.name&apos;)&#125;`,</div><div class=\"line\">    &#123; replset: &#123; poolSize: 10 &#125; &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// 成功链接数据库</div><div class=\"line\">db.once(&apos;open&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;mongodb 连接成功!&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 链接数据库失败</div><div class=\"line\">db.on(&apos;error&apos;, function (err) &#123;</div><div class=\"line\">    console.log(`mongodb 连接错误: $&#123;err&#125;`)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">const CREATE_MODEL = function (key, model) &#123;</div><div class=\"line\">    return db.model(key, model)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const SCHEMAS = [&apos;user&apos;]</div><div class=\"line\"></div><div class=\"line\">let schemaMapper = &#123;&#125;</div><div class=\"line\">SCHEMAS.forEach(function (key) &#123;</div><div class=\"line\">    schemaMapper[key] = () =&gt; CREATE_MODEL(key, require(`./schemas/$&#123;key&#125;`)(mongoose))</div><div class=\"line\">&#125;, this)</div><div class=\"line\"></div><div class=\"line\">module.exports = schemaMapper</div></pre></td></tr></table></figure></p>\n<p>好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">let UserModel = require(&apos;../../../core/models&apos;).user()  // 获取刚才的用户模型的数据库连接</div><div class=\"line\">let &#123;</div><div class=\"line\">    GraphQLSchema,</div><div class=\"line\">    GraphQLObjectType,</div><div class=\"line\">    GraphQLString,</div><div class=\"line\">    GraphQLList,</div><div class=\"line\">    GraphQLInt,</div><div class=\"line\">    GraphQLNonNull,</div><div class=\"line\">    GraphQLBoolean,</div><div class=\"line\">&#125; = require(&apos;graphql&apos;)</div><div class=\"line\"></div><div class=\"line\">// 创建用户模型对应的graphql类型</div><div class=\"line\">let UserType = new GraphQLObjectType(&#123;</div><div class=\"line\">    name: &apos;user&apos;,</div><div class=\"line\">    description: &apos;user model&apos;,</div><div class=\"line\">    fields: &#123;</div><div class=\"line\">        id: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o[&apos;_id&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.nickname</div><div class=\"line\">        &#125;,</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.username</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.age</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 创建一个用户的集合类型</div><div class=\"line\">let UserListType = new GraphQLList(UserType)</div><div class=\"line\"></div><div class=\"line\">// 创建graphql的Schema</div><div class=\"line\">let schema = new GraphQLSchema(&#123;</div><div class=\"line\">    query: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersQuery&apos;,</div><div class=\"line\">        description: &apos;查询用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            userList: &#123;</div><div class=\"line\">                type: UserListType,</div><div class=\"line\">                description: &apos;用户列表&apos;,</div><div class=\"line\">                resolve(root, param, session) &#123;</div><div class=\"line\">                    return UserModel.find()</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            user: &#123;</div><div class=\"line\">                type: UserType,</div><div class=\"line\">                description: &apos;指定用户信息&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    return UserModel.findOne(&#123;</div><div class=\"line\">                        _id: params.id</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    mutation: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersMutation&apos;,</div><div class=\"line\">        description: &apos;修改用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            updateUserProfile: &#123;</div><div class=\"line\">                type: GraphQLBoolean,</div><div class=\"line\">                description: &apos;修改指定用户的个人资料&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    terms: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    let tempModel = JSON.parse(params.terms)</div><div class=\"line\">                    return UserModel</div><div class=\"line\">                        .findOneAndUpdate(&#123;</div><div class=\"line\">                            _id: params.id</div><div class=\"line\">                        &#125;, tempModel)</div><div class=\"line\">                        .then((_d) =&gt; &#123; return !!_d &#125;)  </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 构造graphql的路由</div><div class=\"line\">let graphqlRoutes = require(&apos;express-graphql&apos;)(req =&gt; (&#123;</div><div class=\"line\">    schema: schema,</div><div class=\"line\">    context: req.session,</div><div class=\"line\">    graphiql: true</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">module.exports = graphqlRoutes</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们已经创建了一个简单的服务器,目录结构是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tree.jpg\"></p>\n<p>虽然很多细节并不完善,但是总要一步一步来.</p>\n<p>下面让我们在package.json里的scripts下添加一个debug指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;debug&quot;:&quot;nodemon server/server.js&quot;</div></pre></td></tr></table></figure></p>\n<p>保存后,在项目根目录打开控制台 输入<code>npm run debug</code> (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行</p>\n<p>接下来在浏览器访问<a href=\"http://localhost:8001\" target=\"_blank\" rel=\"external\">http://localhost:8001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p> 也可以访问 <a href=\"http://localhost:8001/graphql\" target=\"_blank\" rel=\"external\">http://localhost:8001/graphql</a> 查看graphql调试器 </p>\n<p>我们现在还没有用户数据,所以请求到的结果是空,下一章<a href=\"http://www.jianshu.com/p/ccd3f3cdc5b4\" target=\"_blank\" rel=\"external\">我们将逐步完善服务器端功能,并且开始构建我们的web端之旅</a></p>\n","excerpt":"<h4 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h4><p>首先,需要安装一些必要的软件 </p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\">nodejs(建议最新的6+) </a></li>\n<li><a href=\"https://www.mongodb.com/download-center#community\">mongodb</a></li>\n<li><a href=\"https://github.com/ServiceStack/redis-windows\">redis(windows)</a></li>\n</ul>\n<p>请按照官方教程下载,然后无脑下一步下一步至全部安装完成.<br>当然<strong>mongodb在注册成系统服务</strong>以及<strong>windows系统下redis服务启动</strong>的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述…</p>\n<p>…了吧?</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向<strong>文件</strong> dbpath指向<strong>目录</strong> 都是绝对路径)<br><code>mongod --install --serviceName &#39;这个服务的名称&#39; --serviceDisplayName &#39;这个服务显示的名称&#39; --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>接下来,我们要先创建自己的服务器端.</p>","more":"<h4 id=\"来吧-Server\"><a href=\"#来吧-Server\" class=\"headerlink\" title=\"来吧,Server!\"></a>来吧,Server!</h4><p> 创建一个空的文件夹 MyServer<br><code>cd myserver &amp; npm init</code><br>一路回车之后,再安装几个依赖<br><code>npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader</code></p>\n<p><strong>然后你可以先去睡几个小时,装完之后让你女朋友叫醒你</strong></p>\n<p>哈哈哈,我开玩笑的<br>…<br>..<br>.<br>程序员<strong>怎么可能</strong>有女朋友!!! (╯‵□′)╯︵┻━┻</p>\n<p>装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:<code>mkdir server framework core</code></p>\n<ul>\n<li>framework 业务无关的公共的组件 譬如加密等</li>\n<li>core 业务相关的公共组件  譬如数据模型等</li>\n<li>server 服务器文件 譬如路由 各种及filter等</li>\n</ul>\n<p>接下来,我们在进入server目录创建server.js:<code>cd server &amp; touch server.js</code> (cmd下的指令是<code>cd server &amp; cd .&gt;server.js</code> 下文将不再赘述)</p>\n<p>OK,现在我们在编辑器中打开server.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let express = require(&apos;express&apos;)</div><div class=\"line\">let app = express()</div><div class=\"line\">let server = require(&apos;http&apos;).createServer(app)</div><div class=\"line\">let session = require(&apos;../framework/redis/session&apos;)</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let initRouters = require(&apos;./routes/Initialize&apos;)</div><div class=\"line\">const PORT = propReader.get(&apos;server.port&apos;) || 80 // 设置应用占用的端口</div><div class=\"line\"></div><div class=\"line\">// 添加bodyParser和session插件</div><div class=\"line\">app.use(bodyParser.json())</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(session)</div><div class=\"line\">// 初始化路由</div><div class=\"line\">initRouters(app)  </div><div class=\"line\"></div><div class=\"line\">server.listen(PORT, () =&gt; &#123;</div><div class=\"line\">  console.log(`服务器启动在端口:$&#123;PORT&#125;`)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:<br><code>let session = require(&#39;../framework/redis/session&#39;)</code><br><code>let initRouters = require(&#39;./routes/Initialize&#39;)</code><br>接下来,我们去实现这两个模块.</p>\n<p>进入到framework目录,创建redis目录,进入之后创建session.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">let session = require(&apos;express-session&apos;)</div><div class=\"line\">let RedisStore = require(&apos;connect-redis&apos;)(session)</div><div class=\"line\">let client = require(&apos;./base&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = session(&#123;</div><div class=\"line\">  name: &apos;s&apos;,</div><div class=\"line\">  store: new RedisStore(&#123;</div><div class=\"line\">    client: client,</div><div class=\"line\">    prefix: &apos;RS&apos;  </div><div class=\"line\">  &#125;),</div><div class=\"line\">  secret: &apos;keyboard cat&apos;,  </div><div class=\"line\">  resave: true,</div><div class=\"line\">  saveUninitialized: false</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>接着,在本目录创建 base.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let redis = require(&apos;redis&apos;)</div><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let client = redis.createClient(propReader.get(&apos;redisServer.port&apos;), propReader.get(&apos;redisServer.ip&apos;), &#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">client</div><div class=\"line\">  .on(&apos;ready&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 连接成功`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;reconnecting&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 重连中...`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;error&apos;, (err)=&gt; &#123;</div><div class=\"line\">    console.error(`redis 连接出错:$&#123;err&#125;`)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = client</div></pre></td></tr></table></figure></p>\n<p>恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server 服务器配置</div><div class=\"line\">server.port=8001</div><div class=\"line\"># dbServer 数据库服务器配置</div><div class=\"line\">dbServer.ip=localhost</div><div class=\"line\">dbServer.port=27010</div><div class=\"line\">dbServer.name=test</div><div class=\"line\"></div><div class=\"line\"># redisServer redis服务器配置</div><div class=\"line\">redisServer.ip=localhost</div><div class=\"line\">redisServer.port=6379</div></pre></td></tr></table></figure></p>\n<p>好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let indexRoutes = require(&apos;./actions/index&apos;)</div><div class=\"line\">let graphqlRoutes = require(&apos;./graphql/index&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.<br>其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\"></div><div class=\"line\">router.get([&apos;/&apos;, &apos;/index&apos;], (req, res) =&gt; &#123;</div><div class=\"line\">\tres.send(&#123;</div><div class=\"line\">\t\ttitle: &apos;来啊,互相伤害啊!&apos;,</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (mongoose) &#123;</div><div class=\"line\">    return mongoose.Schema(&#123;</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        salt: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hash: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        avatar: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;default&apos;: &apos;/images/avatar_default.jpg&apos;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        gender: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;enum&apos;: [&apos;男&apos;, &apos;女&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: Number,</div><div class=\"line\">            min: 1,</div><div class=\"line\">            max: 120</div><div class=\"line\">        &#125;,</div><div class=\"line\">        city: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hometown: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        phone: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        email: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        birthday: &#123;</div><div class=\"line\">            type: Date</div><div class=\"line\">        &#125;,</div><div class=\"line\">        address: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        createdate: &#123;</div><div class=\"line\">            type: Date,</div><div class=\"line\">            &apos;default&apos;: Date.now()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在core的根目录里添加一个models.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;)</div><div class=\"line\">mongoose.Promise = global.Promise</div><div class=\"line\">const propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let db = mongoose.createConnection(</div><div class=\"line\">    `mongodb://$&#123;propReader.get(&apos;dbServer.ip&apos;)&#125;/$&#123;propReader.get(&apos;dbServer.name&apos;)&#125;`,</div><div class=\"line\">    &#123; replset: &#123; poolSize: 10 &#125; &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// 成功链接数据库</div><div class=\"line\">db.once(&apos;open&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;mongodb 连接成功!&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 链接数据库失败</div><div class=\"line\">db.on(&apos;error&apos;, function (err) &#123;</div><div class=\"line\">    console.log(`mongodb 连接错误: $&#123;err&#125;`)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">const CREATE_MODEL = function (key, model) &#123;</div><div class=\"line\">    return db.model(key, model)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const SCHEMAS = [&apos;user&apos;]</div><div class=\"line\"></div><div class=\"line\">let schemaMapper = &#123;&#125;</div><div class=\"line\">SCHEMAS.forEach(function (key) &#123;</div><div class=\"line\">    schemaMapper[key] = () =&gt; CREATE_MODEL(key, require(`./schemas/$&#123;key&#125;`)(mongoose))</div><div class=\"line\">&#125;, this)</div><div class=\"line\"></div><div class=\"line\">module.exports = schemaMapper</div></pre></td></tr></table></figure></p>\n<p>好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">let UserModel = require(&apos;../../../core/models&apos;).user()  // 获取刚才的用户模型的数据库连接</div><div class=\"line\">let &#123;</div><div class=\"line\">    GraphQLSchema,</div><div class=\"line\">    GraphQLObjectType,</div><div class=\"line\">    GraphQLString,</div><div class=\"line\">    GraphQLList,</div><div class=\"line\">    GraphQLInt,</div><div class=\"line\">    GraphQLNonNull,</div><div class=\"line\">    GraphQLBoolean,</div><div class=\"line\">&#125; = require(&apos;graphql&apos;)</div><div class=\"line\"></div><div class=\"line\">// 创建用户模型对应的graphql类型</div><div class=\"line\">let UserType = new GraphQLObjectType(&#123;</div><div class=\"line\">    name: &apos;user&apos;,</div><div class=\"line\">    description: &apos;user model&apos;,</div><div class=\"line\">    fields: &#123;</div><div class=\"line\">        id: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o[&apos;_id&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.nickname</div><div class=\"line\">        &#125;,</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.username</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.age</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 创建一个用户的集合类型</div><div class=\"line\">let UserListType = new GraphQLList(UserType)</div><div class=\"line\"></div><div class=\"line\">// 创建graphql的Schema</div><div class=\"line\">let schema = new GraphQLSchema(&#123;</div><div class=\"line\">    query: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersQuery&apos;,</div><div class=\"line\">        description: &apos;查询用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            userList: &#123;</div><div class=\"line\">                type: UserListType,</div><div class=\"line\">                description: &apos;用户列表&apos;,</div><div class=\"line\">                resolve(root, param, session) &#123;</div><div class=\"line\">                    return UserModel.find()</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            user: &#123;</div><div class=\"line\">                type: UserType,</div><div class=\"line\">                description: &apos;指定用户信息&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    return UserModel.findOne(&#123;</div><div class=\"line\">                        _id: params.id</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    mutation: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersMutation&apos;,</div><div class=\"line\">        description: &apos;修改用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            updateUserProfile: &#123;</div><div class=\"line\">                type: GraphQLBoolean,</div><div class=\"line\">                description: &apos;修改指定用户的个人资料&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    terms: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    let tempModel = JSON.parse(params.terms)</div><div class=\"line\">                    return UserModel</div><div class=\"line\">                        .findOneAndUpdate(&#123;</div><div class=\"line\">                            _id: params.id</div><div class=\"line\">                        &#125;, tempModel)</div><div class=\"line\">                        .then((_d) =&gt; &#123; return !!_d &#125;)  </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 构造graphql的路由</div><div class=\"line\">let graphqlRoutes = require(&apos;express-graphql&apos;)(req =&gt; (&#123;</div><div class=\"line\">    schema: schema,</div><div class=\"line\">    context: req.session,</div><div class=\"line\">    graphiql: true</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">module.exports = graphqlRoutes</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们已经创建了一个简单的服务器,目录结构是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tree.jpg\"></p>\n<p>虽然很多细节并不完善,但是总要一步一步来.</p>\n<p>下面让我们在package.json里的scripts下添加一个debug指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;debug&quot;:&quot;nodemon server/server.js&quot;</div></pre></td></tr></table></figure></p>\n<p>保存后,在项目根目录打开控制台 输入<code>npm run debug</code> (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行</p>\n<p>接下来在浏览器访问<a href=\"http://localhost:8001\">http://localhost:8001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p> 也可以访问 <a href=\"http://localhost:8001/graphql\">http://localhost:8001/graphql</a> 查看graphql调试器 </p>\n<p>我们现在还没有用户数据,所以请求到的结果是空,下一章<a href=\"http://www.jianshu.com/p/ccd3f3cdc5b4\">我们将逐步完善服务器端功能,并且开始构建我们的web端之旅</a></p>"},{"title":"javascript全栈应用实践之路 (服务器搭建篇 二)","date":"2016-09-27T10:29:00.000Z","_content":"\n####  剧情概要\n\n上一集,我们一起完成了一个简单的服务器 -- 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.\n在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.\n\n#### 思考\n开始撸码之前,让我们先思考两个问题:\n- 身份验证的原理是什么\n- 身份验证应该在作用于什么场景\n\n可惜我并没有教科书式的答案,只有一些自己的理解:\n\n首先,我认为**身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性**,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.\n\n然后,其作用的场景必然是非匿名场景,譬如**对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候**,这样的场景就需要身份验证.\n\n好,带着这个独创的结论,我们就开始实现一个authentication吧!\n\n<!--more-->\n\n#### 先实现简单的路由和filter\n让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能\n```\nlet loginRoutes = require('./actions/login')\nlet registerRoutes = require('./actions/register')\n```\n然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证\n```\nlet sess = require('../filters/session')\nlet auth = require('../filters/authentication')\n```\n然后将它们添加到暴露的方法中\n```\nmodule.exports = function (app) {\n// 注意添加顺序要保持一致\n// ---begin---\n    app.use(sess)\n    app.use('/login', loginRoutes)\n    app.use('/register', registerRoutes)\n    app.use(auth)\n// ---end---\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n接下来,就是去实现这四个部分,先看server/filters/session.js的实现\n```\nmodule.exports = (req, res, next) => {\n    if (!req.session) {\n        return next(new Error('session missed.'))\n    }\n    next()\n}\n```\n超级简单,验证一下请求里是否有session对象,没有的话,就哭.\n然后,我们顺道把server/filters/authentication.js也实现一个简单的版本\n```\nmodule.exports = (req, res, next) => {\n    if (req.session.user) {\n        next()\n    } else {\n        res.redirect('/login')\n    }\n}\n```\nokay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.\n当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.\n接下来的工作就是实现刚才定义的两个路由,/login和/register.\nserver/routes/actions/login.js:\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'login'\n    })\n})\nmodule.exports = router\n```\n\nserver/routes/actions/register.js\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'register'\n    })\n})\nmodule.exports = router\n```\nok,现在我们启动服务器`npm run debug`\n然后访问 http://localhost:8001/index 会发现我们已经被redirect到了login页面\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.\n接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.\n\n#### 引入模板引擎,创建登录注册页\n首先,我们要在项目的根目录创建public和src目录\n- public 用来放置我们服务器提供的一些前端资源\n- src 是我们前端开发的源码目录\n然后创建服务器端的视图文件夹目录\n- server/views \n\n然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.\n接下来我们需要安装jade模板引擎,`npm i --save jade`,然后在server.js中添加引擎\n\n```\nlet path = require('path')\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'jade')\napp.use(express.static(__dirname + '/../public'))\n```\n\n好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成\n```\nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('login', {\n        title: '请登录',\n        error: msg\n    })\n})\n```\n这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的`app.set('view engine','jade')`所指定的`jade`)去渲染对应的页'login'.\n\n下面,我们要去完成'login.jade'页面,创建文件`/server/views/login.jade`,\n```\ndoctype html\nhtml\n  head\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n    title= title\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n```\n好的,目前为止,我们已经可以在http://localhost:8001/login地址访问到这个挫的不行的登录页了.\n\n为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建`server/views/_layout.jade`\n```\ndoctype html\nhtml\n  head\n    title= title\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n  block content\n```\n\n然后,将我们刚才的`login.jade`调整为\n```\nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n\n```\nokay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧\n\nregister.js 路由\n``` \nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('register', {\n        title: '来啊,注册啊',\n        error: msg\n    })\n})\n```\n\nregister.jade\n``` \nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 注册\n      .login-box-body\n        form(method='post',action='/register')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='用户名')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='confirmpwd',placeholder='确认密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 提交\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/login') 已有账号?\n\n```\n目前为止,我们访问 http://localhost:8001/login\n以及 http://localhost:8001/register 就可以看到两个挫的不行的页面了.\n\n由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.\n让我们把\n`link(rel='stylesheet',href='//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css')`\n加到`_layout.jade`页面的head中,接下来再去访问login页面,就发现帅多了!\n\n#### 完成登录注册功能\n\n好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.\n\n不过在这之前,按照惯例,我们要安装一些东西\n`npm i --save babel babel-core babel-plugin-transform-decorators-legacy`\n然后再创建一个文件`server/start.js`\n```\nrequire('babel-core/register')\nrequire('./server')\n```\n接下来到package.json中做些修改:\n```\n  \"scripts\": {\n    \"debug\": \"set NODE_ENV=DEV & nodemon server/start.js\"\n  },\n  \"babel\": {\n    \"plugins\": [\n      \"transform-decorators-legacy\"\n    ]\n  }\n```\nokay,这样我们nodejs的服务器环境就可以支持es7的`decorator`了.\n> 为什么要折腾这个?\n我们的服务器要支持PC端和移动端的访问,而且将来使用`react-native`去做移动端的时候,通信方式也是基于`fetch`这个api,即`http`通信方式.所以我们现在在做一些通用的`post action`时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like...\n\n好的,接下来,新建2个文件\nserver/dispatch/response.js\n```\nlet logger = require('../../framework/logger/Logger')\n\nconst IS_FROM_MOBILE = function(req) {\n    return !!req.headers['os']  // 当请求头中带有os这个值时,是我们从移动端发来的请求\n}\n\nclass ActionResult {\n    /**\n     * @param {boolean} isSuccess 是否成功\n     * @param {string|object|null} data 附加数据\n     */\n    constructor(isSuccess, data) {\n        this.success = isSuccess === undefined || isSuccess\n        this.data = data\n    }\n}\n\nmodule.exports = {\n    dispatch: () => {\n        return (target, actionName, descriptor) => {\n            let method = descriptor.value\n            if (typeof target !== 'object' || target.constructor.name === 'Object') {\n                throw new ReferenceError('Dispatcher必须作用于非匿名类的实例方法')\n            }\n            descriptor.value = (req, res, ...args) => {\n                try {\n                    let ret = method.call(target, req, res, args)\n                    if (!ret || !(ret instanceof ActionResult)) {\n                        throw new Error('Dispatcher所作用的action返回值必须为ActionResult的实例')\n                    }\n                    if (ret.graphql) {\n                        res.send('it\\'s a graphql query')\n                    } else {\n                        let result = `${target.constructor.name}.${actionName}.${ret.success?'success':'fail'}`\n                        if (IS_FROM_MOBILE(req)) {\n                            // 来自mobile的请求(暂不区分android/ios)\n                            res.send('it comes from mobile')\n                        } else {\n                            // 非mobile请求(当前视作web请求)\n                            switch (result) {\n                                case 'loginController._post.fail':\n                                    req.session.error = ret.data || ''\n                                    res.redirect('/login')\n                                    break\n                                case 'loginController._post.success':\n                                    res.redirect('/index')\n                                    break\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logger.error(`${target.constructor.name}.${actionName} occurred error: ${error}`)\n                }\n            }\n        }\n    },\n    ActionResult: ActionResult\n}\n```\n还有一个日志记录\nframework/logger/logger.js\n```\nclass DevLogger {\n    info(msg) {\n        console.log(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    warn(msg) {\n        console.warn(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    error(msg) {\n        console.error(`${new Date().toLocaleString()} - ${msg}`)\n    }\n}\n\nclass ProdLogger {\n    // todo\n}\n\nlet logger = process.env.NODE_ENV == 'DEV' ? new DevLogger() : new ProdLogger()\n\nmodule.exports = logger\n```\n\n好的,准备工作完成了,下面让我们把目光放回到`server/routes/actions`目录中.\n\n> 这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.\n\nserver/routes/actions/login.js修改如下\n```\nlet router = require('express').Router()\nlet bodyParser = require('body-parser')\nlet urlencodedParser = bodyParser.urlencoded({ extended: false })\nlet { dispatch, ActionResult } = require('../../dispatch/response')\nclass loginController {\n    _get(req, res) {\n        let msg = req.session.error\n        req.session.error = ''\n        res.render('login', {\n            title: '请登录',\n            error: msg\n        })\n    }\n\n    @dispatch()\n    _post(req, res) {\n        return new ActionResult(true, '哎哟我曹')\n    }\n}\n\nlet _controller = new loginController()\n\nrouter.get('/', _controller._get)\nrouter.post('/', urlencodedParser, _controller._post)\n\nmodule.exports = router\n```\n(未完待续...)","source":"_posts/jsFullStackSeries/03.md","raw":"---\ntitle: javascript全栈应用实践之路 (服务器搭建篇 二)\ndate: 2016-09-27 18:29:00\ntags: javascript 全栈\n---\n\n####  剧情概要\n\n上一集,我们一起完成了一个简单的服务器 -- 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.\n在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.\n\n#### 思考\n开始撸码之前,让我们先思考两个问题:\n- 身份验证的原理是什么\n- 身份验证应该在作用于什么场景\n\n可惜我并没有教科书式的答案,只有一些自己的理解:\n\n首先,我认为**身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性**,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.\n\n然后,其作用的场景必然是非匿名场景,譬如**对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候**,这样的场景就需要身份验证.\n\n好,带着这个独创的结论,我们就开始实现一个authentication吧!\n\n<!--more-->\n\n#### 先实现简单的路由和filter\n让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能\n```\nlet loginRoutes = require('./actions/login')\nlet registerRoutes = require('./actions/register')\n```\n然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证\n```\nlet sess = require('../filters/session')\nlet auth = require('../filters/authentication')\n```\n然后将它们添加到暴露的方法中\n```\nmodule.exports = function (app) {\n// 注意添加顺序要保持一致\n// ---begin---\n    app.use(sess)\n    app.use('/login', loginRoutes)\n    app.use('/register', registerRoutes)\n    app.use(auth)\n// ---end---\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n接下来,就是去实现这四个部分,先看server/filters/session.js的实现\n```\nmodule.exports = (req, res, next) => {\n    if (!req.session) {\n        return next(new Error('session missed.'))\n    }\n    next()\n}\n```\n超级简单,验证一下请求里是否有session对象,没有的话,就哭.\n然后,我们顺道把server/filters/authentication.js也实现一个简单的版本\n```\nmodule.exports = (req, res, next) => {\n    if (req.session.user) {\n        next()\n    } else {\n        res.redirect('/login')\n    }\n}\n```\nokay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.\n当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.\n接下来的工作就是实现刚才定义的两个路由,/login和/register.\nserver/routes/actions/login.js:\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'login'\n    })\n})\nmodule.exports = router\n```\n\nserver/routes/actions/register.js\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'register'\n    })\n})\nmodule.exports = router\n```\nok,现在我们启动服务器`npm run debug`\n然后访问 http://localhost:8001/index 会发现我们已经被redirect到了login页面\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.\n接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.\n\n#### 引入模板引擎,创建登录注册页\n首先,我们要在项目的根目录创建public和src目录\n- public 用来放置我们服务器提供的一些前端资源\n- src 是我们前端开发的源码目录\n然后创建服务器端的视图文件夹目录\n- server/views \n\n然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.\n接下来我们需要安装jade模板引擎,`npm i --save jade`,然后在server.js中添加引擎\n\n```\nlet path = require('path')\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'jade')\napp.use(express.static(__dirname + '/../public'))\n```\n\n好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成\n```\nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('login', {\n        title: '请登录',\n        error: msg\n    })\n})\n```\n这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的`app.set('view engine','jade')`所指定的`jade`)去渲染对应的页'login'.\n\n下面,我们要去完成'login.jade'页面,创建文件`/server/views/login.jade`,\n```\ndoctype html\nhtml\n  head\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n    title= title\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n```\n好的,目前为止,我们已经可以在http://localhost:8001/login地址访问到这个挫的不行的登录页了.\n\n为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建`server/views/_layout.jade`\n```\ndoctype html\nhtml\n  head\n    title= title\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n  block content\n```\n\n然后,将我们刚才的`login.jade`调整为\n```\nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n\n```\nokay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧\n\nregister.js 路由\n``` \nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('register', {\n        title: '来啊,注册啊',\n        error: msg\n    })\n})\n```\n\nregister.jade\n``` \nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 注册\n      .login-box-body\n        form(method='post',action='/register')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='用户名')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='confirmpwd',placeholder='确认密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 提交\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/login') 已有账号?\n\n```\n目前为止,我们访问 http://localhost:8001/login\n以及 http://localhost:8001/register 就可以看到两个挫的不行的页面了.\n\n由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.\n让我们把\n`link(rel='stylesheet',href='//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css')`\n加到`_layout.jade`页面的head中,接下来再去访问login页面,就发现帅多了!\n\n#### 完成登录注册功能\n\n好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.\n\n不过在这之前,按照惯例,我们要安装一些东西\n`npm i --save babel babel-core babel-plugin-transform-decorators-legacy`\n然后再创建一个文件`server/start.js`\n```\nrequire('babel-core/register')\nrequire('./server')\n```\n接下来到package.json中做些修改:\n```\n  \"scripts\": {\n    \"debug\": \"set NODE_ENV=DEV & nodemon server/start.js\"\n  },\n  \"babel\": {\n    \"plugins\": [\n      \"transform-decorators-legacy\"\n    ]\n  }\n```\nokay,这样我们nodejs的服务器环境就可以支持es7的`decorator`了.\n> 为什么要折腾这个?\n我们的服务器要支持PC端和移动端的访问,而且将来使用`react-native`去做移动端的时候,通信方式也是基于`fetch`这个api,即`http`通信方式.所以我们现在在做一些通用的`post action`时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like...\n\n好的,接下来,新建2个文件\nserver/dispatch/response.js\n```\nlet logger = require('../../framework/logger/Logger')\n\nconst IS_FROM_MOBILE = function(req) {\n    return !!req.headers['os']  // 当请求头中带有os这个值时,是我们从移动端发来的请求\n}\n\nclass ActionResult {\n    /**\n     * @param {boolean} isSuccess 是否成功\n     * @param {string|object|null} data 附加数据\n     */\n    constructor(isSuccess, data) {\n        this.success = isSuccess === undefined || isSuccess\n        this.data = data\n    }\n}\n\nmodule.exports = {\n    dispatch: () => {\n        return (target, actionName, descriptor) => {\n            let method = descriptor.value\n            if (typeof target !== 'object' || target.constructor.name === 'Object') {\n                throw new ReferenceError('Dispatcher必须作用于非匿名类的实例方法')\n            }\n            descriptor.value = (req, res, ...args) => {\n                try {\n                    let ret = method.call(target, req, res, args)\n                    if (!ret || !(ret instanceof ActionResult)) {\n                        throw new Error('Dispatcher所作用的action返回值必须为ActionResult的实例')\n                    }\n                    if (ret.graphql) {\n                        res.send('it\\'s a graphql query')\n                    } else {\n                        let result = `${target.constructor.name}.${actionName}.${ret.success?'success':'fail'}`\n                        if (IS_FROM_MOBILE(req)) {\n                            // 来自mobile的请求(暂不区分android/ios)\n                            res.send('it comes from mobile')\n                        } else {\n                            // 非mobile请求(当前视作web请求)\n                            switch (result) {\n                                case 'loginController._post.fail':\n                                    req.session.error = ret.data || ''\n                                    res.redirect('/login')\n                                    break\n                                case 'loginController._post.success':\n                                    res.redirect('/index')\n                                    break\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logger.error(`${target.constructor.name}.${actionName} occurred error: ${error}`)\n                }\n            }\n        }\n    },\n    ActionResult: ActionResult\n}\n```\n还有一个日志记录\nframework/logger/logger.js\n```\nclass DevLogger {\n    info(msg) {\n        console.log(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    warn(msg) {\n        console.warn(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    error(msg) {\n        console.error(`${new Date().toLocaleString()} - ${msg}`)\n    }\n}\n\nclass ProdLogger {\n    // todo\n}\n\nlet logger = process.env.NODE_ENV == 'DEV' ? new DevLogger() : new ProdLogger()\n\nmodule.exports = logger\n```\n\n好的,准备工作完成了,下面让我们把目光放回到`server/routes/actions`目录中.\n\n> 这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.\n\nserver/routes/actions/login.js修改如下\n```\nlet router = require('express').Router()\nlet bodyParser = require('body-parser')\nlet urlencodedParser = bodyParser.urlencoded({ extended: false })\nlet { dispatch, ActionResult } = require('../../dispatch/response')\nclass loginController {\n    _get(req, res) {\n        let msg = req.session.error\n        req.session.error = ''\n        res.render('login', {\n            title: '请登录',\n            error: msg\n        })\n    }\n\n    @dispatch()\n    _post(req, res) {\n        return new ActionResult(true, '哎哟我曹')\n    }\n}\n\nlet _controller = new loginController()\n\nrouter.get('/', _controller._get)\nrouter.post('/', urlencodedParser, _controller._post)\n\nmodule.exports = router\n```\n(未完待续...)","slug":"jsFullStackSeries/03","published":1,"updated":"2016-09-30T11:55:22.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citqv02fa000i1cpo6xxjctf3","content":"<h4 id=\"剧情概要\"><a href=\"#剧情概要\" class=\"headerlink\" title=\"剧情概要\"></a>剧情概要</h4><p>上一集,我们一起完成了一个简单的服务器 – 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.<br>在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.</p>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>开始撸码之前,让我们先思考两个问题:</p>\n<ul>\n<li>身份验证的原理是什么</li>\n<li>身份验证应该在作用于什么场景</li>\n</ul>\n<p>可惜我并没有教科书式的答案,只有一些自己的理解:</p>\n<p>首先,我认为<strong>身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性</strong>,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.</p>\n<p>然后,其作用的场景必然是非匿名场景,譬如<strong>对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候</strong>,这样的场景就需要身份验证.</p>\n<p>好,带着这个独创的结论,我们就开始实现一个authentication吧!</p>\n<a id=\"more\"></a>\n<h4 id=\"先实现简单的路由和filter\"><a href=\"#先实现简单的路由和filter\" class=\"headerlink\" title=\"先实现简单的路由和filter\"></a>先实现简单的路由和filter</h4><p>让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let loginRoutes = require(&apos;./actions/login&apos;)</div><div class=\"line\">let registerRoutes = require(&apos;./actions/register&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let sess = require(&apos;../filters/session&apos;)</div><div class=\"line\">let auth = require(&apos;../filters/authentication&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后将它们添加到暴露的方法中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">// 注意添加顺序要保持一致</div><div class=\"line\">// ---begin---</div><div class=\"line\">    app.use(sess)</div><div class=\"line\">    app.use(&apos;/login&apos;, loginRoutes)</div><div class=\"line\">    app.use(&apos;/register&apos;, registerRoutes)</div><div class=\"line\">    app.use(auth)</div><div class=\"line\">// ---end---</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来,就是去实现这四个部分,先看server/filters/session.js的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (!req.session) &#123;</div><div class=\"line\">        return next(new Error(&apos;session missed.&apos;))</div><div class=\"line\">    &#125;</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>超级简单,验证一下请求里是否有session对象,没有的话,就哭.<br>然后,我们顺道把server/filters/authentication.js也实现一个简单的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (req.session.user) &#123;</div><div class=\"line\">        next()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.redirect(&apos;/login&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.<br>当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.<br>接下来的工作就是实现刚才定义的两个路由,/login和/register.<br>server/routes/actions/login.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;login&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>server/routes/actions/register.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;register&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>ok,现在我们启动服务器<code>npm run debug</code><br>然后访问 <a href=\"http://localhost:8001/index\" target=\"_blank\" rel=\"external\">http://localhost:8001/index</a> 会发现我们已经被redirect到了login页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.<br>接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.</p>\n<h4 id=\"引入模板引擎-创建登录注册页\"><a href=\"#引入模板引擎-创建登录注册页\" class=\"headerlink\" title=\"引入模板引擎,创建登录注册页\"></a>引入模板引擎,创建登录注册页</h4><p>首先,我们要在项目的根目录创建public和src目录</p>\n<ul>\n<li>public 用来放置我们服务器提供的一些前端资源</li>\n<li>src 是我们前端开发的源码目录<br>然后创建服务器端的视图文件夹目录</li>\n<li>server/views </li>\n</ul>\n<p>然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.<br>接下来我们需要安装jade模板引擎,<code>npm i --save jade</code>,然后在server.js中添加引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;))</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;)</div><div class=\"line\">app.use(express.static(__dirname + &apos;/../public&apos;))</div></pre></td></tr></table></figure>\n<p>好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;login&apos;, &#123;</div><div class=\"line\">        title: &apos;请登录&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的<code>app.set(&#39;view engine&#39;,&#39;jade&#39;)</code>所指定的<code>jade</code>)去渲染对应的页’login’.</p>\n<p>下面,我们要去完成’login.jade’页面,创建文件<code>/server/views/login.jade</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">    title= title</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>好的,目前为止,我们已经可以在<a href=\"http://localhost:8001/login地址访问到这个挫的不行的登录页了\" target=\"_blank\" rel=\"external\">http://localhost:8001/login地址访问到这个挫的不行的登录页了</a>.</p>\n<p>为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建<code>server/views/_layout.jade</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    title= title</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">  block content</div></pre></td></tr></table></figure></p>\n<p>然后,将我们刚才的<code>login.jade</code>调整为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧</p>\n<p>register.js 路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;register&apos;, &#123;</div><div class=\"line\">        title: &apos;来啊,注册啊&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>register.jade<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 注册</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/register&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;用户名&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;confirmpwd&apos;,placeholder=&apos;确认密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 提交</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/login&apos;) 已有账号?</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们访问 <a href=\"http://localhost:8001/login\" target=\"_blank\" rel=\"external\">http://localhost:8001/login</a><br>以及 <a href=\"http://localhost:8001/register\" target=\"_blank\" rel=\"external\">http://localhost:8001/register</a> 就可以看到两个挫的不行的页面了.</p>\n<p>由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.<br>让我们把<br><code>link(rel=&#39;stylesheet&#39;,href=&#39;//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&#39;)</code><br>加到<code>_layout.jade</code>页面的head中,接下来再去访问login页面,就发现帅多了!</p>\n<h4 id=\"完成登录注册功能\"><a href=\"#完成登录注册功能\" class=\"headerlink\" title=\"完成登录注册功能\"></a>完成登录注册功能</h4><p>好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.</p>\n<p>不过在这之前,按照惯例,我们要安装一些东西<br><code>npm i --save babel babel-core babel-plugin-transform-decorators-legacy</code><br>然后再创建一个文件<code>server/start.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-core/register&apos;)</div><div class=\"line\">require(&apos;./server&apos;)</div></pre></td></tr></table></figure></p>\n<p>接下来到package.json中做些修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;debug&quot;: &quot;set NODE_ENV=DEV &amp; nodemon server/start.js&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">&quot;babel&quot;: &#123;</div><div class=\"line\">  &quot;plugins&quot;: [</div><div class=\"line\">    &quot;transform-decorators-legacy&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们nodejs的服务器环境就可以支持es7的<code>decorator</code>了.</p>\n<blockquote>\n<p>为什么要折腾这个?<br>我们的服务器要支持PC端和移动端的访问,而且将来使用<code>react-native</code>去做移动端的时候,通信方式也是基于<code>fetch</code>这个api,即<code>http</code>通信方式.所以我们现在在做一些通用的<code>post action</code>时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like…</p>\n</blockquote>\n<p>好的,接下来,新建2个文件<br>server/dispatch/response.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">let logger = require(&apos;../../framework/logger/Logger&apos;)</div><div class=\"line\"></div><div class=\"line\">const IS_FROM_MOBILE = function(req) &#123;</div><div class=\"line\">    return !!req.headers[&apos;os&apos;]  // 当请求头中带有os这个值时,是我们从移动端发来的请求</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ActionResult &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param &#123;boolean&#125; isSuccess 是否成功</div><div class=\"line\">     * @param &#123;string|object|null&#125; data 附加数据</div><div class=\"line\">     */</div><div class=\"line\">    constructor(isSuccess, data) &#123;</div><div class=\"line\">        this.success = isSuccess === undefined || isSuccess</div><div class=\"line\">        this.data = data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    dispatch: () =&gt; &#123;</div><div class=\"line\">        return (target, actionName, descriptor) =&gt; &#123;</div><div class=\"line\">            let method = descriptor.value</div><div class=\"line\">            if (typeof target !== &apos;object&apos; || target.constructor.name === &apos;Object&apos;) &#123;</div><div class=\"line\">                throw new ReferenceError(&apos;Dispatcher必须作用于非匿名类的实例方法&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">            descriptor.value = (req, res, ...args) =&gt; &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    let ret = method.call(target, req, res, args)</div><div class=\"line\">                    if (!ret || !(ret instanceof ActionResult)) &#123;</div><div class=\"line\">                        throw new Error(&apos;Dispatcher所作用的action返回值必须为ActionResult的实例&apos;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (ret.graphql) &#123;</div><div class=\"line\">                        res.send(&apos;it\\&apos;s a graphql query&apos;)</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        let result = `$&#123;target.constructor.name&#125;.$&#123;actionName&#125;.$&#123;ret.success?&apos;success&apos;:&apos;fail&apos;&#125;`</div><div class=\"line\">                        if (IS_FROM_MOBILE(req)) &#123;</div><div class=\"line\">                            // 来自mobile的请求(暂不区分android/ios)</div><div class=\"line\">                            res.send(&apos;it comes from mobile&apos;)</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            // 非mobile请求(当前视作web请求)</div><div class=\"line\">                            switch (result) &#123;</div><div class=\"line\">                                case &apos;loginController._post.fail&apos;:</div><div class=\"line\">                                    req.session.error = ret.data || &apos;&apos;</div><div class=\"line\">                                    res.redirect(&apos;/login&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                                case &apos;loginController._post.success&apos;:</div><div class=\"line\">                                    res.redirect(&apos;/index&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; catch (error) &#123;</div><div class=\"line\">                    logger.error(`$&#123;target.constructor.name&#125;.$&#123;actionName&#125; occurred error: $&#123;error&#125;`)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ActionResult: ActionResult</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个日志记录<br>framework/logger/logger.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class DevLogger &#123;</div><div class=\"line\">    info(msg) &#123;</div><div class=\"line\">        console.log(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    warn(msg) &#123;</div><div class=\"line\">        console.warn(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error(msg) &#123;</div><div class=\"line\">        console.error(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ProdLogger &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let logger = process.env.NODE_ENV == &apos;DEV&apos; ? new DevLogger() : new ProdLogger()</div><div class=\"line\"></div><div class=\"line\">module.exports = logger</div></pre></td></tr></table></figure></p>\n<p>好的,准备工作完成了,下面让我们把目光放回到<code>server/routes/actions</code>目录中.</p>\n<blockquote>\n<p>这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.</p>\n</blockquote>\n<p>server/routes/actions/login.js修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</div><div class=\"line\">let &#123; dispatch, ActionResult &#125; = require(&apos;../../dispatch/response&apos;)</div><div class=\"line\">class loginController &#123;</div><div class=\"line\">    _get(req, res) &#123;</div><div class=\"line\">        let msg = req.session.error</div><div class=\"line\">        req.session.error = &apos;&apos;</div><div class=\"line\">        res.render(&apos;login&apos;, &#123;</div><div class=\"line\">            title: &apos;请登录&apos;,</div><div class=\"line\">            error: msg</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @dispatch()</div><div class=\"line\">    _post(req, res) &#123;</div><div class=\"line\">        return new ActionResult(true, &apos;哎哟我曹&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let _controller = new loginController()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, _controller._get)</div><div class=\"line\">router.post(&apos;/&apos;, urlencodedParser, _controller._post)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>(未完待续…)</p>\n","excerpt":"<h4 id=\"剧情概要\"><a href=\"#剧情概要\" class=\"headerlink\" title=\"剧情概要\"></a>剧情概要</h4><p>上一集,我们一起完成了一个简单的服务器 – 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.<br>在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.</p>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>开始撸码之前,让我们先思考两个问题:</p>\n<ul>\n<li>身份验证的原理是什么</li>\n<li>身份验证应该在作用于什么场景</li>\n</ul>\n<p>可惜我并没有教科书式的答案,只有一些自己的理解:</p>\n<p>首先,我认为<strong>身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性</strong>,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.</p>\n<p>然后,其作用的场景必然是非匿名场景,譬如<strong>对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候</strong>,这样的场景就需要身份验证.</p>\n<p>好,带着这个独创的结论,我们就开始实现一个authentication吧!</p>","more":"<h4 id=\"先实现简单的路由和filter\"><a href=\"#先实现简单的路由和filter\" class=\"headerlink\" title=\"先实现简单的路由和filter\"></a>先实现简单的路由和filter</h4><p>让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let loginRoutes = require(&apos;./actions/login&apos;)</div><div class=\"line\">let registerRoutes = require(&apos;./actions/register&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let sess = require(&apos;../filters/session&apos;)</div><div class=\"line\">let auth = require(&apos;../filters/authentication&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后将它们添加到暴露的方法中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">// 注意添加顺序要保持一致</div><div class=\"line\">// ---begin---</div><div class=\"line\">    app.use(sess)</div><div class=\"line\">    app.use(&apos;/login&apos;, loginRoutes)</div><div class=\"line\">    app.use(&apos;/register&apos;, registerRoutes)</div><div class=\"line\">    app.use(auth)</div><div class=\"line\">// ---end---</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来,就是去实现这四个部分,先看server/filters/session.js的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (!req.session) &#123;</div><div class=\"line\">        return next(new Error(&apos;session missed.&apos;))</div><div class=\"line\">    &#125;</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>超级简单,验证一下请求里是否有session对象,没有的话,就哭.<br>然后,我们顺道把server/filters/authentication.js也实现一个简单的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (req.session.user) &#123;</div><div class=\"line\">        next()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.redirect(&apos;/login&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.<br>当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.<br>接下来的工作就是实现刚才定义的两个路由,/login和/register.<br>server/routes/actions/login.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;login&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>server/routes/actions/register.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;register&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>ok,现在我们启动服务器<code>npm run debug</code><br>然后访问 <a href=\"http://localhost:8001/index\">http://localhost:8001/index</a> 会发现我们已经被redirect到了login页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.<br>接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.</p>\n<h4 id=\"引入模板引擎-创建登录注册页\"><a href=\"#引入模板引擎-创建登录注册页\" class=\"headerlink\" title=\"引入模板引擎,创建登录注册页\"></a>引入模板引擎,创建登录注册页</h4><p>首先,我们要在项目的根目录创建public和src目录</p>\n<ul>\n<li>public 用来放置我们服务器提供的一些前端资源</li>\n<li>src 是我们前端开发的源码目录<br>然后创建服务器端的视图文件夹目录</li>\n<li>server/views </li>\n</ul>\n<p>然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.<br>接下来我们需要安装jade模板引擎,<code>npm i --save jade</code>,然后在server.js中添加引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;))</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;)</div><div class=\"line\">app.use(express.static(__dirname + &apos;/../public&apos;))</div></pre></td></tr></table></figure>\n<p>好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;login&apos;, &#123;</div><div class=\"line\">        title: &apos;请登录&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的<code>app.set(&#39;view engine&#39;,&#39;jade&#39;)</code>所指定的<code>jade</code>)去渲染对应的页’login’.</p>\n<p>下面,我们要去完成’login.jade’页面,创建文件<code>/server/views/login.jade</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">    title= title</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>好的,目前为止,我们已经可以在<a href=\"http://localhost:8001/login地址访问到这个挫的不行的登录页了\">http://localhost:8001/login地址访问到这个挫的不行的登录页了</a>.</p>\n<p>为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建<code>server/views/_layout.jade</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    title= title</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">  block content</div></pre></td></tr></table></figure></p>\n<p>然后,将我们刚才的<code>login.jade</code>调整为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧</p>\n<p>register.js 路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;register&apos;, &#123;</div><div class=\"line\">        title: &apos;来啊,注册啊&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>register.jade<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 注册</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/register&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;用户名&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;confirmpwd&apos;,placeholder=&apos;确认密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 提交</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/login&apos;) 已有账号?</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们访问 <a href=\"http://localhost:8001/login\">http://localhost:8001/login</a><br>以及 <a href=\"http://localhost:8001/register\">http://localhost:8001/register</a> 就可以看到两个挫的不行的页面了.</p>\n<p>由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.<br>让我们把<br><code>link(rel=&#39;stylesheet&#39;,href=&#39;//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&#39;)</code><br>加到<code>_layout.jade</code>页面的head中,接下来再去访问login页面,就发现帅多了!</p>\n<h4 id=\"完成登录注册功能\"><a href=\"#完成登录注册功能\" class=\"headerlink\" title=\"完成登录注册功能\"></a>完成登录注册功能</h4><p>好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.</p>\n<p>不过在这之前,按照惯例,我们要安装一些东西<br><code>npm i --save babel babel-core babel-plugin-transform-decorators-legacy</code><br>然后再创建一个文件<code>server/start.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-core/register&apos;)</div><div class=\"line\">require(&apos;./server&apos;)</div></pre></td></tr></table></figure></p>\n<p>接下来到package.json中做些修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;debug&quot;: &quot;set NODE_ENV=DEV &amp; nodemon server/start.js&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">&quot;babel&quot;: &#123;</div><div class=\"line\">  &quot;plugins&quot;: [</div><div class=\"line\">    &quot;transform-decorators-legacy&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们nodejs的服务器环境就可以支持es7的<code>decorator</code>了.</p>\n<blockquote>\n<p>为什么要折腾这个?<br>我们的服务器要支持PC端和移动端的访问,而且将来使用<code>react-native</code>去做移动端的时候,通信方式也是基于<code>fetch</code>这个api,即<code>http</code>通信方式.所以我们现在在做一些通用的<code>post action</code>时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like…</p>\n</blockquote>\n<p>好的,接下来,新建2个文件<br>server/dispatch/response.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">let logger = require(&apos;../../framework/logger/Logger&apos;)</div><div class=\"line\"></div><div class=\"line\">const IS_FROM_MOBILE = function(req) &#123;</div><div class=\"line\">    return !!req.headers[&apos;os&apos;]  // 当请求头中带有os这个值时,是我们从移动端发来的请求</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ActionResult &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param &#123;boolean&#125; isSuccess 是否成功</div><div class=\"line\">     * @param &#123;string|object|null&#125; data 附加数据</div><div class=\"line\">     */</div><div class=\"line\">    constructor(isSuccess, data) &#123;</div><div class=\"line\">        this.success = isSuccess === undefined || isSuccess</div><div class=\"line\">        this.data = data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    dispatch: () =&gt; &#123;</div><div class=\"line\">        return (target, actionName, descriptor) =&gt; &#123;</div><div class=\"line\">            let method = descriptor.value</div><div class=\"line\">            if (typeof target !== &apos;object&apos; || target.constructor.name === &apos;Object&apos;) &#123;</div><div class=\"line\">                throw new ReferenceError(&apos;Dispatcher必须作用于非匿名类的实例方法&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">            descriptor.value = (req, res, ...args) =&gt; &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    let ret = method.call(target, req, res, args)</div><div class=\"line\">                    if (!ret || !(ret instanceof ActionResult)) &#123;</div><div class=\"line\">                        throw new Error(&apos;Dispatcher所作用的action返回值必须为ActionResult的实例&apos;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (ret.graphql) &#123;</div><div class=\"line\">                        res.send(&apos;it\\&apos;s a graphql query&apos;)</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        let result = `$&#123;target.constructor.name&#125;.$&#123;actionName&#125;.$&#123;ret.success?&apos;success&apos;:&apos;fail&apos;&#125;`</div><div class=\"line\">                        if (IS_FROM_MOBILE(req)) &#123;</div><div class=\"line\">                            // 来自mobile的请求(暂不区分android/ios)</div><div class=\"line\">                            res.send(&apos;it comes from mobile&apos;)</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            // 非mobile请求(当前视作web请求)</div><div class=\"line\">                            switch (result) &#123;</div><div class=\"line\">                                case &apos;loginController._post.fail&apos;:</div><div class=\"line\">                                    req.session.error = ret.data || &apos;&apos;</div><div class=\"line\">                                    res.redirect(&apos;/login&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                                case &apos;loginController._post.success&apos;:</div><div class=\"line\">                                    res.redirect(&apos;/index&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; catch (error) &#123;</div><div class=\"line\">                    logger.error(`$&#123;target.constructor.name&#125;.$&#123;actionName&#125; occurred error: $&#123;error&#125;`)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ActionResult: ActionResult</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个日志记录<br>framework/logger/logger.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class DevLogger &#123;</div><div class=\"line\">    info(msg) &#123;</div><div class=\"line\">        console.log(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    warn(msg) &#123;</div><div class=\"line\">        console.warn(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error(msg) &#123;</div><div class=\"line\">        console.error(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ProdLogger &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let logger = process.env.NODE_ENV == &apos;DEV&apos; ? new DevLogger() : new ProdLogger()</div><div class=\"line\"></div><div class=\"line\">module.exports = logger</div></pre></td></tr></table></figure></p>\n<p>好的,准备工作完成了,下面让我们把目光放回到<code>server/routes/actions</code>目录中.</p>\n<blockquote>\n<p>这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.</p>\n</blockquote>\n<p>server/routes/actions/login.js修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</div><div class=\"line\">let &#123; dispatch, ActionResult &#125; = require(&apos;../../dispatch/response&apos;)</div><div class=\"line\">class loginController &#123;</div><div class=\"line\">    _get(req, res) &#123;</div><div class=\"line\">        let msg = req.session.error</div><div class=\"line\">        req.session.error = &apos;&apos;</div><div class=\"line\">        res.render(&apos;login&apos;, &#123;</div><div class=\"line\">            title: &apos;请登录&apos;,</div><div class=\"line\">            error: msg</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @dispatch()</div><div class=\"line\">    _post(req, res) &#123;</div><div class=\"line\">        return new ActionResult(true, &apos;哎哟我曹&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let _controller = new loginController()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, _controller._get)</div><div class=\"line\">router.post(&apos;/&apos;, urlencodedParser, _controller._post)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>(未完待续…)</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"citqv02eb00001cpohag7v9q4","tag_id":"citqv02eh00021cpom3izbcxc","_id":"citqv02eo00071cpo5c3f1ewk"},{"post_id":"citqv02ef00011cpoe06muy6l","tag_id":"citqv02eo00061cpovp0vtomp","_id":"citqv02eq00091cpo6wobcdqq"},{"post_id":"citqv02ek00031cpo6zlshqbi","tag_id":"citqv02eh00021cpom3izbcxc","_id":"citqv02er000b1cpofr8mmofp"},{"post_id":"citqv02el00041cpo64s2qj08","tag_id":"citqv02eq000a1cpoyyymxkqb","_id":"citqv02er000d1cponxsaflnj"},{"post_id":"citqv02em00051cpogldidd2o","tag_id":"citqv02er000c1cpo6oa0s14v","_id":"citqv02er000e1cpo366muh85"},{"post_id":"citqv02f5000f1cpo82rummfs","tag_id":"citqv02f9000h1cpo7dhamu48","_id":"citqv02fb000k1cpog8fabepa"},{"post_id":"citqv02f7000g1cpo2hxpflj0","tag_id":"citqv02f9000h1cpo7dhamu48","_id":"citqv02fc000m1cpopxvjxuef"},{"post_id":"citqv02fa000i1cpo6xxjctf3","tag_id":"citqv02f9000h1cpo7dhamu48","_id":"citqv02fc000n1cpozus8el1l"}],"Tag":[{"name":"javascript","_id":"citqv02eh00021cpom3izbcxc"},{"name":"工具","_id":"citqv02eo00061cpovp0vtomp"},{"name":"技术 社区","_id":"citqv02eq000a1cpoyyymxkqb"},{"name":"踩坑","_id":"citqv02er000c1cpo6oa0s14v"},{"name":"javascript 全栈","_id":"citqv02f9000h1cpo7dhamu48"}]}}