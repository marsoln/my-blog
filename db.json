{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/alpha-dust/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1474963406618},{"_id":"themes/alpha-dust/LICENSE","hash":"9603ca6555bd5f0710038003b8a503bd29ca67a1","modified":1474963406621},{"_id":"themes/alpha-dust/README.md","hash":"402518c350275303ede195a62e9e05bfa236b190","modified":1474963406625},{"_id":"themes/alpha-dust/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1474963406634},{"_id":"themes/alpha-dust/languages/en.yml","hash":"f0e62ce15272b2c59c9ae7f7615a286c69bf7113","modified":1474963406656},{"_id":"themes/alpha-dust/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1474963406661},{"_id":"themes/alpha-dust/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1474963406670},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1474963406673},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1474963406676},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1474963406680},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1474963406690},{"_id":"themes/alpha-dust/_config.yml","hash":"a86f7b469a7148c23f4da48821e47c0661bb24b9","modified":1475030195192},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1474963406694},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"30620dd5e4f24e9d624c235dd16396c5e130deef","modified":1474963406789},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"0dcf6f1b66722ddadb7479f4edf20281d30a7879","modified":1474963406792},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"9d1ba5fb467ab4269cbc925b3f2122a29b821b8d","modified":1474963406796},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"953256db94b3ed9ce2870d4b9203fe3a1e5b37bb","modified":1474963406799},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"4030d46464fd653c0e72a7615c19e7b2d73aa21d","modified":1474963406802},{"_id":"themes/alpha-dust/template/archive.html","hash":"6152dc2e093c1431cbe2fa6bc9cb54751c2a7f86","modified":1474963406885},{"_id":"themes/alpha-dust/template/index.html","hash":"674b2011f068af9bf464ac77aafccf6867fcd7c0","modified":1474963407015},{"_id":"themes/alpha-dust/template/post.html","hash":"daed2747ec15affef2fe1d5cc05432361a2ed6f9","modified":1474963407021},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1474963406665},{"_id":"themes/alpha-dust/languages/default.yml","hash":"34b245026a8456938de82455bdfb21ea137cd721","modified":1475029396666},{"_id":"source/_posts/jsFullStackSeries/01.md","hash":"e55ff72c3e6cc1c50137601dedf00fa81d4ebe34","modified":1474973384146},{"_id":"source/_posts/jsFullStackSeries/02.md","hash":"d5aca6cfabd06ab0a5d89b2a1178d6cc9ced9b90","modified":1474973384155},{"_id":"source/_posts/jsFullStackSeries/03.md","hash":"54a92e4fc79c0af29e156de0d7758fb6fe659afa","modified":1474973384165},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"62eb791897882e96be03772b1d4598c516c3604f","modified":1475030778187},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"82e5966388eee827b80b918d4ae04c55b8e4049b","modified":1474963406714},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"902501f05052cc60ac95c0914ea3b105ca208440","modified":1474963406719},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"b0bb9c59f517302348aafcb2b832513d53d59055","modified":1474963406722},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"b07b8f7f43811e1b6f5382f6eb4cd778a70bd3cc","modified":1474963406726},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"f85cb280ae965fdd1d92af8bc0ece6c4d826a449","modified":1474963406745},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"8c20579849498be304e47d0f10d42149971eb352","modified":1474963406749},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"63c93ed2dc9c5d9eefeaa8130e9728848731fa64","modified":1474963406752},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1474963406755},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"4fa635135f97eaa5f324cf83cb04b083ffdd979f","modified":1474963406763},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"760cdaf07f808c9e8637f58e412aea43c4021ec2","modified":1474963406775},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"58982acc8dc2b83c6c2cdf64a2c4156e947254d0","modified":1474963406785},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"17454ba3eef92075c4848bb43fd626b53760334b","modified":1474963406867},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1474963406874},{"_id":"themes/alpha-dust/source/js/main.js","hash":"e644dd5c0742f209072c48499c1beba20bc1e496","modified":1474963406879},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1474963406901},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1474963406904},{"_id":"themes/alpha-dust/template/css/style.css","hash":"9c3710b32a4466c3ea5b6232a1af8fccc5877216","modified":1474963406907},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"a3d739266fbf9aff73443cf745e4a4d5c284cffc","modified":1474963406910},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1474963406969},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1474963406959},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1474963406976},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1474963406982},{"_id":"themes/alpha-dust/template/js/main.js","hash":"ed46e32f0bf6f4502a6558f9ad03843031dc318d","modified":1474963407018},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"5c70df9ddd67174798cc2eaf9f763d11810bec39","modified":1475029692052},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"1ebb53097673005d72eeb70eb6c1ad2467db26a0","modified":1475029662598},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1474963406932},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1474963406919},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1474963406955},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1474963406952},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1474963407011},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"00300febf434b78ad93087e83481d2bf9d2c54a5","modified":1474963406825},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"6c0788e0616a366234157abd18cb6a11b4dc8bfc","modified":1474963406829},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"e51d15046b9e10d4342b67bb83fd3a0c42f5d60e","modified":1474963406820},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"a741adad7f208787c5d863a443da9a3438a01331","modified":1474963406832},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"d74c2d8968b909c4e2cdab2235b5cebf6eef91c8","modified":1474963406836},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"7419c10bf98d059fa0263427c68e009cc0d4c4fa","modified":1474963406842},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"7dfcf43dd05063115f7ebf9e63219a102b35a3ba","modified":1474963406847},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"bc8376e97266f047457117a965321efdd58e68a3","modified":1474963406855},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"d992986c18d5cf41a8b83bd22e29d43f41bb85e0","modified":1474963406851},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"f1dbc90648d67e03ba3b311c967977aa50888b38","modified":1474963406862},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1474963406947},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1474963406940},{"_id":"public/2016/09/27/jsFullStackSeries/01/index.html","hash":"22ad59e5443a8a7e574c02e3ed7815ae10d81045","modified":1475031121839},{"_id":"public/archives/index.html","hash":"a40ab5caee70652d733356207627007227fbee76","modified":1475031121840},{"_id":"public/archives/2016/index.html","hash":"4caca233c80c03ab8ff1abd9220ed8435ac0a6ac","modified":1475031121840},{"_id":"public/archives/2016/09/index.html","hash":"bfb47b590b7dfeab7fcf8ec34e424b612316e83d","modified":1475031121840},{"_id":"public/tags/javascript-全栈-简述/index.html","hash":"1915c30857659a60b65e31571b2b1d31b425fb92","modified":1475031087859},{"_id":"public/tags/javascript-全栈-服务器搭建/index.html","hash":"506873155246c10ce600ff6d5d35ee376a73a030","modified":1475031087859},{"_id":"public/2016/09/27/jsFullStackSeries/03/index.html","hash":"bbb2a0d659626eff9f1968d82a6a2885c0bae60b","modified":1475031121840},{"_id":"public/2016/09/27/jsFullStackSeries/02/index.html","hash":"be61a630478b631311150fffbaa5e28010dd5f5f","modified":1475031121841},{"_id":"public/index.html","hash":"0f795c8e4149d5881aa3a5fab3445da487d7e581","modified":1475030262149},{"_id":"public/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475029722702},{"_id":"public/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1475029724924},{"_id":"public/css/style.css","hash":"dd15369cb376d1142f8e6174a91d34fbd1a2017b","modified":1475029724925}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"javascript全栈应用实践之路(简述)","date":"2016-09-27T10:24:01.000Z","_content":"\n#### 前言\n\n前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.\n\n所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.\n\n一来,可以分享给更多关注这一块的朋友,去作为入门参考.  \n二来,也可以作为自己两年多的前端工作经验的阶段性总结.  \n再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.  \n最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.\n\n> 食用本系列文章前请注意:\n1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下[阮一峰老师的入门博客](http://es6.ruanyifeng.com)  \n2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明  \n3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出  \n4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用\n\n![天真笑容.jpg](http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 简介\n\n既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.\n选型可能部分比较保守,譬如选择了express而不是koa等.\n下面,先大致介绍一下将要涉及的部分类库.\n\n###### nodejs 服务器端\n\n- express 基础框架\n- connect-redis & express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)\n- graphql & express-graphql 数据服务(相对传统的restful API更灵活,开发高效)\n- jade 服务器端渲染\n- socket.io 架设套接字通信服务,经典的应用场景:聊天室\n- mongoose mongodb的ODM\n\n###### PC端\n\n- bootstrap & AdminLTE 样式框架\n- angularjs@1.x web前端MVVM解决方案\n\n###### Android移动端\n\n- react-native 我又不会写原生,既然是js全栈,讲道理嘛\n- socket.io.client 套接字通信的客户端\n\n###### 工程化/开发工具\n\n- nodemon 服务器守护进程工具\n- eslint 编码质量工具\n- node-sass css预处理\n- babel 世界正义的卫道士(画风突变)\n- gulp 任务管理\n- webpack web资源打包工具\n\n\n[下一集:服务器搭建](http://www.jianshu.com/p/8616aa298cc5)","source":"_posts/jsFullStackSeries/01.md","raw":"---\ntitle: javascript全栈应用实践之路(简述)\ndate: 2016-09-27 18:24:01\ntags: javascript 全栈 简述\n---\n\n#### 前言\n\n前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.\n\n所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.\n\n一来,可以分享给更多关注这一块的朋友,去作为入门参考.  \n二来,也可以作为自己两年多的前端工作经验的阶段性总结.  \n再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.  \n最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.\n\n> 食用本系列文章前请注意:\n1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下[阮一峰老师的入门博客](http://es6.ruanyifeng.com)  \n2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明  \n3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出  \n4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用\n\n![天真笑容.jpg](http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 简介\n\n既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.\n选型可能部分比较保守,譬如选择了express而不是koa等.\n下面,先大致介绍一下将要涉及的部分类库.\n\n###### nodejs 服务器端\n\n- express 基础框架\n- connect-redis & express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)\n- graphql & express-graphql 数据服务(相对传统的restful API更灵活,开发高效)\n- jade 服务器端渲染\n- socket.io 架设套接字通信服务,经典的应用场景:聊天室\n- mongoose mongodb的ODM\n\n###### PC端\n\n- bootstrap & AdminLTE 样式框架\n- angularjs@1.x web前端MVVM解决方案\n\n###### Android移动端\n\n- react-native 我又不会写原生,既然是js全栈,讲道理嘛\n- socket.io.client 套接字通信的客户端\n\n###### 工程化/开发工具\n\n- nodemon 服务器守护进程工具\n- eslint 编码质量工具\n- node-sass css预处理\n- babel 世界正义的卫道士(画风突变)\n- gulp 任务管理\n- webpack web资源打包工具\n\n\n[下一集:服务器搭建](http://www.jianshu.com/p/8616aa298cc5)","slug":"jsFullStackSeries/01","published":1,"updated":"2016-09-27T10:49:44.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citmam1hf0000awvo8zqlg6qm","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.</p>\n<p>所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.</p>\n<p>一来,可以分享给更多关注这一块的朋友,去作为入门参考.<br>二来,也可以作为自己两年多的前端工作经验的阶段性总结.<br>再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.<br>最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.</p>\n<blockquote>\n<p>食用本系列文章前请注意:<br>1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下<a href=\"http://es6.ruanyifeng.com\" target=\"_blank\" rel=\"external\">阮一峰老师的入门博客</a><br>2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明<br>3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出<br>4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天真笑容.jpg\"></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.<br>选型可能部分比较保守,譬如选择了express而不是koa等.<br>下面,先大致介绍一下将要涉及的部分类库.</p>\n<h6 id=\"nodejs-服务器端\"><a href=\"#nodejs-服务器端\" class=\"headerlink\" title=\"nodejs 服务器端\"></a>nodejs 服务器端</h6><ul>\n<li>express 基础框架</li>\n<li>connect-redis &amp; express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)</li>\n<li>graphql &amp; express-graphql 数据服务(相对传统的restful API更灵活,开发高效)</li>\n<li>jade 服务器端渲染</li>\n<li>socket.io 架设套接字通信服务,经典的应用场景:聊天室</li>\n<li>mongoose mongodb的ODM</li>\n</ul>\n<h6 id=\"PC端\"><a href=\"#PC端\" class=\"headerlink\" title=\"PC端\"></a>PC端</h6><ul>\n<li>bootstrap &amp; AdminLTE 样式框架</li>\n<li>angularjs@1.x web前端MVVM解决方案</li>\n</ul>\n<h6 id=\"Android移动端\"><a href=\"#Android移动端\" class=\"headerlink\" title=\"Android移动端\"></a>Android移动端</h6><ul>\n<li>react-native 我又不会写原生,既然是js全栈,讲道理嘛</li>\n<li>socket.io.client 套接字通信的客户端</li>\n</ul>\n<h6 id=\"工程化-开发工具\"><a href=\"#工程化-开发工具\" class=\"headerlink\" title=\"工程化/开发工具\"></a>工程化/开发工具</h6><ul>\n<li>nodemon 服务器守护进程工具</li>\n<li>eslint 编码质量工具</li>\n<li>node-sass css预处理</li>\n<li>babel 世界正义的卫道士(画风突变)</li>\n<li>gulp 任务管理</li>\n<li>webpack web资源打包工具</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/8616aa298cc5\" target=\"_blank\" rel=\"external\">下一集:服务器搭建</a></p>\n","excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前一段时间内,我周围的从业IT的老同事/同学/朋友们都或多或少的来找我探讨过一些前端(或者说前端社区)的现象和问题.</p>\n<p>所以正巧凑着最近工作不是很忙,就打算搞了个JavaScript全栈的demo.</p>\n<p>一来,可以分享给更多关注这一块的朋友,去作为入门参考.<br>二来,也可以作为自己两年多的前端工作经验的阶段性总结.<br>再者,也算是回报社区,毕竟看了这么多大神的帖子也没donate过多少钱,总觉得自己欠社区的.<br>最后,起到一个对未来的敦促作用,万一有朝一日怠惰了,回头看看,说不定还能重燃青春.</p>\n<blockquote>\n<p>食用本系列文章前请注意:<br>1.由于本文大量涉及ES6的基本语法和特性,如果读者对其不甚是了解,建议先读一下<a href=\"http://es6.ruanyifeng.com\">阮一峰老师的入门博客</a><br>2.作为一个全栈入门参考的系列文章,是假设读者们有一定前端基础的. 如果读者在食用时感觉头晕目眩,请留言给我,我会尽量对内容做些许补充说明<br>3.由于本人能力有限,文中出现过激或者错误的观点,烦请读者们悉数指出<br>4.文中并没有什么晦涩难懂或者炫目耀眼的黑魔法,所以注释不会出现得太频繁,请放心食用</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-3fb45a7ef23cb680.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天真笑容.jpg\"></p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>既然是说全栈,肯定包括了server和client/browser,使用的都是一些耳熟能详的类库/框架.<br>选型可能部分比较保守,譬如选择了express而不是koa等.<br>下面,先大致介绍一下将要涉及的部分类库.</p>\n<h6 id=\"nodejs-服务器端\"><a href=\"#nodejs-服务器端\" class=\"headerlink\" title=\"nodejs 服务器端\"></a>nodejs 服务器端</h6><ul>\n<li>express 基础框架</li>\n<li>connect-redis &amp; express-session 会话组件(会话信息会有持久化 因为开发的时候服务器经常重启 不希望所有的客户端还要重新登录)</li>\n<li>graphql &amp; express-graphql 数据服务(相对传统的restful API更灵活,开发高效)</li>\n<li>jade 服务器端渲染</li>\n<li>socket.io 架设套接字通信服务,经典的应用场景:聊天室</li>\n<li>mongoose mongodb的ODM</li>\n</ul>\n<h6 id=\"PC端\"><a href=\"#PC端\" class=\"headerlink\" title=\"PC端\"></a>PC端</h6><ul>\n<li>bootstrap &amp; AdminLTE 样式框架</li>\n<li>angularjs@1.x web前端MVVM解决方案</li>\n</ul>\n<h6 id=\"Android移动端\"><a href=\"#Android移动端\" class=\"headerlink\" title=\"Android移动端\"></a>Android移动端</h6><ul>\n<li>react-native 我又不会写原生,既然是js全栈,讲道理嘛</li>\n<li>socket.io.client 套接字通信的客户端</li>\n</ul>\n<h6 id=\"工程化-开发工具\"><a href=\"#工程化-开发工具\" class=\"headerlink\" title=\"工程化/开发工具\"></a>工程化/开发工具</h6><ul>\n<li>nodemon 服务器守护进程工具</li>\n<li>eslint 编码质量工具</li>\n<li>node-sass css预处理</li>\n<li>babel 世界正义的卫道士(画风突变)</li>\n<li>gulp 任务管理</li>\n<li>webpack web资源打包工具</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/8616aa298cc5\">下一集:服务器搭建</a></p>\n"},{"title":"javascript全栈应用实践之路 (服务器搭建篇 一)","date":"2016-09-27T10:26:00.000Z","_content":"\n#### 软件环境\n\n首先,需要安装一些必要的软件 \n\n- [nodejs(建议最新的6+) ](https://nodejs.org/zh-cn/)\n- [mongodb](https://www.mongodb.com/download-center#community)\n- [redis(windows)](https://github.com/ServiceStack/redis-windows)\n\n请按照官方教程下载,然后无脑下一步下一步至全部安装完成.\n当然**mongodb在注册成系统服务**以及**windows系统下redis服务启动**的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述...\n\n...了吧?\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向**文件** dbpath指向**目录** 都是绝对路径)\n> `mongod --install --serviceName '这个服务的名称' --serviceDisplayName '这个服务显示的名称' --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n接下来,我们要先创建自己的服务器端.\n\n#### 来吧,Server!\n\n 创建一个空的文件夹 MyServer\n`cd myserver & npm init` \n一路回车之后,再安装几个依赖\n`npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader`\n\n**然后你可以先去睡几个小时,装完之后让你女朋友叫醒你**\n\n哈哈哈,我开玩笑的\n... \n..\n.\n程序员**怎么可能**有女朋友!!! (╯‵□′)╯︵┻━┻\n\n装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:`mkdir server framework core`\n- framework 业务无关的公共的组件 譬如加密等\n- core 业务相关的公共组件  譬如数据模型等\n- server 服务器文件 譬如路由 各种及filter等\n\n接下来,我们在进入server目录创建server.js:`cd server & touch server.js` (cmd下的指令是`cd server & cd .>server.js` 下文将不再赘述)\n\nOK,现在我们在编辑器中打开server.js\n```\nlet propReader = require('properties-reader')('server.properties')\nlet express = require('express')\nlet app = express()\nlet server = require('http').createServer(app)\nlet session = require('../framework/redis/session')\nlet bodyParser = require('body-parser')\nlet initRouters = require('./routes/Initialize')\nconst PORT = propReader.get('server.port') || 80 // 设置应用占用的端口\n\n// 添加bodyParser和session插件\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(session)\n// 初始化路由\ninitRouters(app)  \n\nserver.listen(PORT, () => {\n  console.log(`服务器启动在端口:${PORT}`)\n})\n```\n\n好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:\n`let session = require('../framework/redis/session')`\n`let initRouters = require('./routes/Initialize')`\n接下来,我们去实现这两个模块.\n\n进入到framework目录,创建redis目录,进入之后创建session.js\n```\nlet session = require('express-session')\nlet RedisStore = require('connect-redis')(session)\nlet client = require('./base')\n\nmodule.exports = session({\n  name: 's',\n  store: new RedisStore({\n    client: client,\n    prefix: 'RS'  \n  }),\n  secret: 'keyboard cat',  \n  resave: true,\n  saveUninitialized: false\n})\n```\n接着,在本目录创建 base.js\n```\nlet redis = require('redis')\nlet propReader = require('properties-reader')('server.properties')\nlet client = redis.createClient(propReader.get('redisServer.port'), propReader.get('redisServer.ip'), {})\n\nclient\n  .on('ready', ()=> {\n    console.log(`redis 连接成功`)\n  })\n  .on('reconnecting', ()=> {\n    console.log(`redis 重连中...`)\n  })\n  .on('error', (err)=> {\n    console.error(`redis 连接出错:${err}`)\n  })\n\nmodule.exports = client\n```\n恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties\n```\n# server 服务器配置\nserver.port=8001\n# dbServer 数据库服务器配置\ndbServer.ip=localhost\ndbServer.port=27010\ndbServer.name=test\n\n# redisServer redis服务器配置\nredisServer.ip=localhost\nredisServer.port=6379\n```\n\n好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法\n```\nlet indexRoutes = require('./actions/index')\nlet graphqlRoutes = require('./graphql/index')\n\nmodule.exports = function (app) {\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.\n其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:\n```\nlet router = require('express').Router()\n\nrouter.get(['/', '/index'], (req, res) => {\n\tres.send({\n\t\ttitle: '来啊,互相伤害啊!',\n\t})\n})\n\nmodule.exports = router\n```\n接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js\n```\nmodule.exports = function (mongoose) {\n    return mongoose.Schema({\n        username: {\n            type: String,\n            required: true\n        },\n        salt: {\n            type: String,\n            required: true\n        },\n        hash: {\n            type: String,\n            required: true\n        },\n        nickname: {\n            type: String\n        },\n        avatar: {\n            type: String,\n            'default': '/images/avatar_default.jpg'\n        },\n        gender: {\n            type: String,\n            'enum': ['男', '女']\n        },\n        age: {\n            type: Number,\n            min: 1,\n            max: 120\n        },\n        city: {\n            type: String\n        },\n        hometown: {\n            type: String\n        },\n        phone: {\n            type: String\n        },\n        email: {\n            type: String\n        },\n        birthday: {\n            type: Date\n        },\n        address: {\n            type: String\n        },\n        createdate: {\n            type: Date,\n            'default': Date.now()\n        }\n    })\n}\n```\n然后我们在core的根目录里添加一个models.js\n```\nconst mongoose = require('mongoose')\nmongoose.Promise = global.Promise\nconst propReader = require('properties-reader')('server.properties')\nlet db = mongoose.createConnection(\n    `mongodb://${propReader.get('dbServer.ip')}/${propReader.get('dbServer.name')}`,\n    { replset: { poolSize: 10 } }\n)\n\n// 成功链接数据库\ndb.once('open', function () {\n    console.log('mongodb 连接成功!')\n})\n\n// 链接数据库失败\ndb.on('error', function (err) {\n    console.log(`mongodb 连接错误: ${err}`)\n})\n\nconst CREATE_MODEL = function (key, model) {\n    return db.model(key, model)\n}\n\nconst SCHEMAS = ['user']\n\nlet schemaMapper = {}\nSCHEMAS.forEach(function (key) {\n    schemaMapper[key] = () => CREATE_MODEL(key, require(`./schemas/${key}`)(mongoose))\n}, this)\n\nmodule.exports = schemaMapper\n```\n好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:\n```\nlet UserModel = require('../../../core/models').user()  // 获取刚才的用户模型的数据库连接\nlet {\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLNonNull,\n    GraphQLBoolean,\n} = require('graphql')\n\n// 创建用户模型对应的graphql类型\nlet UserType = new GraphQLObjectType({\n    name: 'user',\n    description: 'user model',\n    fields: {\n        id: {\n            type: GraphQLString,\n            resolve: o => o['_id']\n        },\n        nickname: {\n            type: GraphQLString,\n            resolve: o => o.nickname\n        },\n        username: {\n            type: GraphQLString,\n            resolve: o => o.username\n        },\n        age: {\n            type: GraphQLString,\n            resolve: o => o.age\n        }\n    }\n})\n\n// 创建一个用户的集合类型\nlet UserListType = new GraphQLList(UserType)\n\n// 创建graphql的Schema\nlet schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n        name: 'UsersQuery',\n        description: '查询用户信息',\n        fields: {\n            userList: {\n                type: UserListType,\n                description: '用户列表',\n                resolve(root, param, session) {\n                    return UserModel.find()\n                }\n            },\n            user: {\n                type: UserType,\n                description: '指定用户信息',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                },\n                resolve(root, params, session) {\n                    return UserModel.findOne({\n                        _id: params.id\n                    })\n                }\n            }\n        }\n    }),\n    mutation: new GraphQLObjectType({\n        name: 'UsersMutation',\n        description: '修改用户信息',\n        fields: {\n            updateUserProfile: {\n                type: GraphQLBoolean,\n                description: '修改指定用户的个人资料',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                    terms: {\n                        type: GraphQLString,\n                        require: true\n                    }\n                },\n                resolve(root, params, session) {\n                    let tempModel = JSON.parse(params.terms)\n                    return UserModel\n                        .findOneAndUpdate({\n                            _id: params.id\n                        }, tempModel)\n                        .then((_d) => { return !!_d })  \n                }\n            }\n        }\n    })\n})\n\n// 构造graphql的路由\nlet graphqlRoutes = require('express-graphql')(req => ({\n    schema: schema,\n    context: req.session,\n    graphiql: true\n}))\n\nmodule.exports = graphqlRoutes\n```\n目前为止,我们已经创建了一个简单的服务器,目录结构是这样的\n\n\n![tree.jpg](http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n虽然很多细节并不完善,但是总要一步一步来.\n\n下面让我们在package.json里的scripts下添加一个debug指令\n```\n  \"debug\":\"nodemon server/server.js\"\n```\n保存后,在项目根目录打开控制台 输入`npm run debug` (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行\n\n\n接下来在浏览器访问http://localhost:8001\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 也可以访问 http://localhost:8001/graphql 查看graphql调试器 \n\n我们现在还没有用户数据,所以请求到的结果是空,下一章[我们将逐步完善服务器端功能,并且开始构建我们的web端之旅](http://www.jianshu.com/p/ccd3f3cdc5b4)","source":"_posts/jsFullStackSeries/02.md","raw":"---\ntitle: javascript全栈应用实践之路 (服务器搭建篇 一)\ndate: 2016-09-27 18:26:00\ntags: javascript 全栈 服务器搭建\n---\n\n#### 软件环境\n\n首先,需要安装一些必要的软件 \n\n- [nodejs(建议最新的6+) ](https://nodejs.org/zh-cn/)\n- [mongodb](https://www.mongodb.com/download-center#community)\n- [redis(windows)](https://github.com/ServiceStack/redis-windows)\n\n请按照官方教程下载,然后无脑下一步下一步至全部安装完成.\n当然**mongodb在注册成系统服务**以及**windows系统下redis服务启动**的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述...\n\n...了吧?\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向**文件** dbpath指向**目录** 都是绝对路径)\n> `mongod --install --serviceName '这个服务的名称' --serviceDisplayName '这个服务显示的名称' --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n接下来,我们要先创建自己的服务器端.\n\n#### 来吧,Server!\n\n 创建一个空的文件夹 MyServer\n`cd myserver & npm init` \n一路回车之后,再安装几个依赖\n`npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader`\n\n**然后你可以先去睡几个小时,装完之后让你女朋友叫醒你**\n\n哈哈哈,我开玩笑的\n... \n..\n.\n程序员**怎么可能**有女朋友!!! (╯‵□′)╯︵┻━┻\n\n装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:`mkdir server framework core`\n- framework 业务无关的公共的组件 譬如加密等\n- core 业务相关的公共组件  譬如数据模型等\n- server 服务器文件 譬如路由 各种及filter等\n\n接下来,我们在进入server目录创建server.js:`cd server & touch server.js` (cmd下的指令是`cd server & cd .>server.js` 下文将不再赘述)\n\nOK,现在我们在编辑器中打开server.js\n```\nlet propReader = require('properties-reader')('server.properties')\nlet express = require('express')\nlet app = express()\nlet server = require('http').createServer(app)\nlet session = require('../framework/redis/session')\nlet bodyParser = require('body-parser')\nlet initRouters = require('./routes/Initialize')\nconst PORT = propReader.get('server.port') || 80 // 设置应用占用的端口\n\n// 添加bodyParser和session插件\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(session)\n// 初始化路由\ninitRouters(app)  \n\nserver.listen(PORT, () => {\n  console.log(`服务器启动在端口:${PORT}`)\n})\n```\n\n好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:\n`let session = require('../framework/redis/session')`\n`let initRouters = require('./routes/Initialize')`\n接下来,我们去实现这两个模块.\n\n进入到framework目录,创建redis目录,进入之后创建session.js\n```\nlet session = require('express-session')\nlet RedisStore = require('connect-redis')(session)\nlet client = require('./base')\n\nmodule.exports = session({\n  name: 's',\n  store: new RedisStore({\n    client: client,\n    prefix: 'RS'  \n  }),\n  secret: 'keyboard cat',  \n  resave: true,\n  saveUninitialized: false\n})\n```\n接着,在本目录创建 base.js\n```\nlet redis = require('redis')\nlet propReader = require('properties-reader')('server.properties')\nlet client = redis.createClient(propReader.get('redisServer.port'), propReader.get('redisServer.ip'), {})\n\nclient\n  .on('ready', ()=> {\n    console.log(`redis 连接成功`)\n  })\n  .on('reconnecting', ()=> {\n    console.log(`redis 重连中...`)\n  })\n  .on('error', (err)=> {\n    console.error(`redis 连接出错:${err}`)\n  })\n\nmodule.exports = client\n```\n恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties\n```\n# server 服务器配置\nserver.port=8001\n# dbServer 数据库服务器配置\ndbServer.ip=localhost\ndbServer.port=27010\ndbServer.name=test\n\n# redisServer redis服务器配置\nredisServer.ip=localhost\nredisServer.port=6379\n```\n\n好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法\n```\nlet indexRoutes = require('./actions/index')\nlet graphqlRoutes = require('./graphql/index')\n\nmodule.exports = function (app) {\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.\n其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:\n```\nlet router = require('express').Router()\n\nrouter.get(['/', '/index'], (req, res) => {\n\tres.send({\n\t\ttitle: '来啊,互相伤害啊!',\n\t})\n})\n\nmodule.exports = router\n```\n接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js\n```\nmodule.exports = function (mongoose) {\n    return mongoose.Schema({\n        username: {\n            type: String,\n            required: true\n        },\n        salt: {\n            type: String,\n            required: true\n        },\n        hash: {\n            type: String,\n            required: true\n        },\n        nickname: {\n            type: String\n        },\n        avatar: {\n            type: String,\n            'default': '/images/avatar_default.jpg'\n        },\n        gender: {\n            type: String,\n            'enum': ['男', '女']\n        },\n        age: {\n            type: Number,\n            min: 1,\n            max: 120\n        },\n        city: {\n            type: String\n        },\n        hometown: {\n            type: String\n        },\n        phone: {\n            type: String\n        },\n        email: {\n            type: String\n        },\n        birthday: {\n            type: Date\n        },\n        address: {\n            type: String\n        },\n        createdate: {\n            type: Date,\n            'default': Date.now()\n        }\n    })\n}\n```\n然后我们在core的根目录里添加一个models.js\n```\nconst mongoose = require('mongoose')\nmongoose.Promise = global.Promise\nconst propReader = require('properties-reader')('server.properties')\nlet db = mongoose.createConnection(\n    `mongodb://${propReader.get('dbServer.ip')}/${propReader.get('dbServer.name')}`,\n    { replset: { poolSize: 10 } }\n)\n\n// 成功链接数据库\ndb.once('open', function () {\n    console.log('mongodb 连接成功!')\n})\n\n// 链接数据库失败\ndb.on('error', function (err) {\n    console.log(`mongodb 连接错误: ${err}`)\n})\n\nconst CREATE_MODEL = function (key, model) {\n    return db.model(key, model)\n}\n\nconst SCHEMAS = ['user']\n\nlet schemaMapper = {}\nSCHEMAS.forEach(function (key) {\n    schemaMapper[key] = () => CREATE_MODEL(key, require(`./schemas/${key}`)(mongoose))\n}, this)\n\nmodule.exports = schemaMapper\n```\n好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:\n```\nlet UserModel = require('../../../core/models').user()  // 获取刚才的用户模型的数据库连接\nlet {\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLNonNull,\n    GraphQLBoolean,\n} = require('graphql')\n\n// 创建用户模型对应的graphql类型\nlet UserType = new GraphQLObjectType({\n    name: 'user',\n    description: 'user model',\n    fields: {\n        id: {\n            type: GraphQLString,\n            resolve: o => o['_id']\n        },\n        nickname: {\n            type: GraphQLString,\n            resolve: o => o.nickname\n        },\n        username: {\n            type: GraphQLString,\n            resolve: o => o.username\n        },\n        age: {\n            type: GraphQLString,\n            resolve: o => o.age\n        }\n    }\n})\n\n// 创建一个用户的集合类型\nlet UserListType = new GraphQLList(UserType)\n\n// 创建graphql的Schema\nlet schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n        name: 'UsersQuery',\n        description: '查询用户信息',\n        fields: {\n            userList: {\n                type: UserListType,\n                description: '用户列表',\n                resolve(root, param, session) {\n                    return UserModel.find()\n                }\n            },\n            user: {\n                type: UserType,\n                description: '指定用户信息',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                },\n                resolve(root, params, session) {\n                    return UserModel.findOne({\n                        _id: params.id\n                    })\n                }\n            }\n        }\n    }),\n    mutation: new GraphQLObjectType({\n        name: 'UsersMutation',\n        description: '修改用户信息',\n        fields: {\n            updateUserProfile: {\n                type: GraphQLBoolean,\n                description: '修改指定用户的个人资料',\n                args: {\n                    id: {\n                        type: GraphQLString,\n                        require: true,\n                    },\n                    terms: {\n                        type: GraphQLString,\n                        require: true\n                    }\n                },\n                resolve(root, params, session) {\n                    let tempModel = JSON.parse(params.terms)\n                    return UserModel\n                        .findOneAndUpdate({\n                            _id: params.id\n                        }, tempModel)\n                        .then((_d) => { return !!_d })  \n                }\n            }\n        }\n    })\n})\n\n// 构造graphql的路由\nlet graphqlRoutes = require('express-graphql')(req => ({\n    schema: schema,\n    context: req.session,\n    graphiql: true\n}))\n\nmodule.exports = graphqlRoutes\n```\n目前为止,我们已经创建了一个简单的服务器,目录结构是这样的\n\n\n![tree.jpg](http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n虽然很多细节并不完善,但是总要一步一步来.\n\n下面让我们在package.json里的scripts下添加一个debug指令\n```\n  \"debug\":\"nodemon server/server.js\"\n```\n保存后,在项目根目录打开控制台 输入`npm run debug` (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行\n\n\n接下来在浏览器访问http://localhost:8001\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 也可以访问 http://localhost:8001/graphql 查看graphql调试器 \n\n我们现在还没有用户数据,所以请求到的结果是空,下一章[我们将逐步完善服务器端功能,并且开始构建我们的web端之旅](http://www.jianshu.com/p/ccd3f3cdc5b4)","slug":"jsFullStackSeries/02","published":1,"updated":"2016-09-27T10:49:44.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citmam1hk0001awvow4d3i9ef","content":"<h4 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h4><p>首先,需要安装一些必要的软件 </p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">nodejs(建议最新的6+) </a></li>\n<li><a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"external\">mongodb</a></li>\n<li><a href=\"https://github.com/ServiceStack/redis-windows\">redis(windows)</a></li>\n</ul>\n<p>请按照官方教程下载,然后无脑下一步下一步至全部安装完成.<br>当然<strong>mongodb在注册成系统服务</strong>以及<strong>windows系统下redis服务启动</strong>的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述…</p>\n<p>…了吧?</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向<strong>文件</strong> dbpath指向<strong>目录</strong> 都是绝对路径)<br><code>mongod --install --serviceName &#39;这个服务的名称&#39; --serviceDisplayName &#39;这个服务显示的名称&#39; --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>接下来,我们要先创建自己的服务器端.</p>\n<h4 id=\"来吧-Server\"><a href=\"#来吧-Server\" class=\"headerlink\" title=\"来吧,Server!\"></a>来吧,Server!</h4><p> 创建一个空的文件夹 MyServer<br><code>cd myserver &amp; npm init</code><br>一路回车之后,再安装几个依赖<br><code>npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader</code></p>\n<p><strong>然后你可以先去睡几个小时,装完之后让你女朋友叫醒你</strong></p>\n<p>哈哈哈,我开玩笑的<br>…<br>..<br>.<br>程序员<strong>怎么可能</strong>有女朋友!!! (╯‵□′)╯︵┻━┻</p>\n<p>装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:<code>mkdir server framework core</code></p>\n<ul>\n<li>framework 业务无关的公共的组件 譬如加密等</li>\n<li>core 业务相关的公共组件  譬如数据模型等</li>\n<li>server 服务器文件 譬如路由 各种及filter等</li>\n</ul>\n<p>接下来,我们在进入server目录创建server.js:<code>cd server &amp; touch server.js</code> (cmd下的指令是<code>cd server &amp; cd .&gt;server.js</code> 下文将不再赘述)</p>\n<p>OK,现在我们在编辑器中打开server.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let express = require(&apos;express&apos;)</div><div class=\"line\">let app = express()</div><div class=\"line\">let server = require(&apos;http&apos;).createServer(app)</div><div class=\"line\">let session = require(&apos;../framework/redis/session&apos;)</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let initRouters = require(&apos;./routes/Initialize&apos;)</div><div class=\"line\">const PORT = propReader.get(&apos;server.port&apos;) || 80 // 设置应用占用的端口</div><div class=\"line\"></div><div class=\"line\">// 添加bodyParser和session插件</div><div class=\"line\">app.use(bodyParser.json())</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(session)</div><div class=\"line\">// 初始化路由</div><div class=\"line\">initRouters(app)  </div><div class=\"line\"></div><div class=\"line\">server.listen(PORT, () =&gt; &#123;</div><div class=\"line\">  console.log(`服务器启动在端口:$&#123;PORT&#125;`)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:<br><code>let session = require(&#39;../framework/redis/session&#39;)</code><br><code>let initRouters = require(&#39;./routes/Initialize&#39;)</code><br>接下来,我们去实现这两个模块.</p>\n<p>进入到framework目录,创建redis目录,进入之后创建session.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">let session = require(&apos;express-session&apos;)</div><div class=\"line\">let RedisStore = require(&apos;connect-redis&apos;)(session)</div><div class=\"line\">let client = require(&apos;./base&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = session(&#123;</div><div class=\"line\">  name: &apos;s&apos;,</div><div class=\"line\">  store: new RedisStore(&#123;</div><div class=\"line\">    client: client,</div><div class=\"line\">    prefix: &apos;RS&apos;  </div><div class=\"line\">  &#125;),</div><div class=\"line\">  secret: &apos;keyboard cat&apos;,  </div><div class=\"line\">  resave: true,</div><div class=\"line\">  saveUninitialized: false</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>接着,在本目录创建 base.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let redis = require(&apos;redis&apos;)</div><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let client = redis.createClient(propReader.get(&apos;redisServer.port&apos;), propReader.get(&apos;redisServer.ip&apos;), &#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">client</div><div class=\"line\">  .on(&apos;ready&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 连接成功`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;reconnecting&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 重连中...`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;error&apos;, (err)=&gt; &#123;</div><div class=\"line\">    console.error(`redis 连接出错:$&#123;err&#125;`)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = client</div></pre></td></tr></table></figure></p>\n<p>恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server 服务器配置</div><div class=\"line\">server.port=8001</div><div class=\"line\"># dbServer 数据库服务器配置</div><div class=\"line\">dbServer.ip=localhost</div><div class=\"line\">dbServer.port=27010</div><div class=\"line\">dbServer.name=test</div><div class=\"line\"></div><div class=\"line\"># redisServer redis服务器配置</div><div class=\"line\">redisServer.ip=localhost</div><div class=\"line\">redisServer.port=6379</div></pre></td></tr></table></figure></p>\n<p>好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let indexRoutes = require(&apos;./actions/index&apos;)</div><div class=\"line\">let graphqlRoutes = require(&apos;./graphql/index&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.<br>其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\"></div><div class=\"line\">router.get([&apos;/&apos;, &apos;/index&apos;], (req, res) =&gt; &#123;</div><div class=\"line\">\tres.send(&#123;</div><div class=\"line\">\t\ttitle: &apos;来啊,互相伤害啊!&apos;,</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (mongoose) &#123;</div><div class=\"line\">    return mongoose.Schema(&#123;</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        salt: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hash: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        avatar: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;default&apos;: &apos;/images/avatar_default.jpg&apos;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        gender: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;enum&apos;: [&apos;男&apos;, &apos;女&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: Number,</div><div class=\"line\">            min: 1,</div><div class=\"line\">            max: 120</div><div class=\"line\">        &#125;,</div><div class=\"line\">        city: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hometown: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        phone: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        email: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        birthday: &#123;</div><div class=\"line\">            type: Date</div><div class=\"line\">        &#125;,</div><div class=\"line\">        address: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        createdate: &#123;</div><div class=\"line\">            type: Date,</div><div class=\"line\">            &apos;default&apos;: Date.now()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在core的根目录里添加一个models.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;)</div><div class=\"line\">mongoose.Promise = global.Promise</div><div class=\"line\">const propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let db = mongoose.createConnection(</div><div class=\"line\">    `mongodb://$&#123;propReader.get(&apos;dbServer.ip&apos;)&#125;/$&#123;propReader.get(&apos;dbServer.name&apos;)&#125;`,</div><div class=\"line\">    &#123; replset: &#123; poolSize: 10 &#125; &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// 成功链接数据库</div><div class=\"line\">db.once(&apos;open&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;mongodb 连接成功!&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 链接数据库失败</div><div class=\"line\">db.on(&apos;error&apos;, function (err) &#123;</div><div class=\"line\">    console.log(`mongodb 连接错误: $&#123;err&#125;`)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">const CREATE_MODEL = function (key, model) &#123;</div><div class=\"line\">    return db.model(key, model)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const SCHEMAS = [&apos;user&apos;]</div><div class=\"line\"></div><div class=\"line\">let schemaMapper = &#123;&#125;</div><div class=\"line\">SCHEMAS.forEach(function (key) &#123;</div><div class=\"line\">    schemaMapper[key] = () =&gt; CREATE_MODEL(key, require(`./schemas/$&#123;key&#125;`)(mongoose))</div><div class=\"line\">&#125;, this)</div><div class=\"line\"></div><div class=\"line\">module.exports = schemaMapper</div></pre></td></tr></table></figure></p>\n<p>好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">let UserModel = require(&apos;../../../core/models&apos;).user()  // 获取刚才的用户模型的数据库连接</div><div class=\"line\">let &#123;</div><div class=\"line\">    GraphQLSchema,</div><div class=\"line\">    GraphQLObjectType,</div><div class=\"line\">    GraphQLString,</div><div class=\"line\">    GraphQLList,</div><div class=\"line\">    GraphQLInt,</div><div class=\"line\">    GraphQLNonNull,</div><div class=\"line\">    GraphQLBoolean,</div><div class=\"line\">&#125; = require(&apos;graphql&apos;)</div><div class=\"line\"></div><div class=\"line\">// 创建用户模型对应的graphql类型</div><div class=\"line\">let UserType = new GraphQLObjectType(&#123;</div><div class=\"line\">    name: &apos;user&apos;,</div><div class=\"line\">    description: &apos;user model&apos;,</div><div class=\"line\">    fields: &#123;</div><div class=\"line\">        id: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o[&apos;_id&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.nickname</div><div class=\"line\">        &#125;,</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.username</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.age</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 创建一个用户的集合类型</div><div class=\"line\">let UserListType = new GraphQLList(UserType)</div><div class=\"line\"></div><div class=\"line\">// 创建graphql的Schema</div><div class=\"line\">let schema = new GraphQLSchema(&#123;</div><div class=\"line\">    query: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersQuery&apos;,</div><div class=\"line\">        description: &apos;查询用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            userList: &#123;</div><div class=\"line\">                type: UserListType,</div><div class=\"line\">                description: &apos;用户列表&apos;,</div><div class=\"line\">                resolve(root, param, session) &#123;</div><div class=\"line\">                    return UserModel.find()</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            user: &#123;</div><div class=\"line\">                type: UserType,</div><div class=\"line\">                description: &apos;指定用户信息&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    return UserModel.findOne(&#123;</div><div class=\"line\">                        _id: params.id</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    mutation: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersMutation&apos;,</div><div class=\"line\">        description: &apos;修改用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            updateUserProfile: &#123;</div><div class=\"line\">                type: GraphQLBoolean,</div><div class=\"line\">                description: &apos;修改指定用户的个人资料&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    terms: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    let tempModel = JSON.parse(params.terms)</div><div class=\"line\">                    return UserModel</div><div class=\"line\">                        .findOneAndUpdate(&#123;</div><div class=\"line\">                            _id: params.id</div><div class=\"line\">                        &#125;, tempModel)</div><div class=\"line\">                        .then((_d) =&gt; &#123; return !!_d &#125;)  </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 构造graphql的路由</div><div class=\"line\">let graphqlRoutes = require(&apos;express-graphql&apos;)(req =&gt; (&#123;</div><div class=\"line\">    schema: schema,</div><div class=\"line\">    context: req.session,</div><div class=\"line\">    graphiql: true</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">module.exports = graphqlRoutes</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们已经创建了一个简单的服务器,目录结构是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tree.jpg\"></p>\n<p>虽然很多细节并不完善,但是总要一步一步来.</p>\n<p>下面让我们在package.json里的scripts下添加一个debug指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;debug&quot;:&quot;nodemon server/server.js&quot;</div></pre></td></tr></table></figure></p>\n<p>保存后,在项目根目录打开控制台 输入<code>npm run debug</code> (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行</p>\n<p>接下来在浏览器访问<a href=\"http://localhost:8001\" target=\"_blank\" rel=\"external\">http://localhost:8001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p> 也可以访问 <a href=\"http://localhost:8001/graphql\" target=\"_blank\" rel=\"external\">http://localhost:8001/graphql</a> 查看graphql调试器 </p>\n<p>我们现在还没有用户数据,所以请求到的结果是空,下一章<a href=\"http://www.jianshu.com/p/ccd3f3cdc5b4\" target=\"_blank\" rel=\"external\">我们将逐步完善服务器端功能,并且开始构建我们的web端之旅</a></p>\n","excerpt":"","more":"<h4 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h4><p>首先,需要安装一些必要的软件 </p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\">nodejs(建议最新的6+) </a></li>\n<li><a href=\"https://www.mongodb.com/download-center#community\">mongodb</a></li>\n<li><a href=\"https://github.com/ServiceStack/redis-windows\">redis(windows)</a></li>\n</ul>\n<p>请按照官方教程下载,然后无脑下一步下一步至全部安装完成.<br>当然<strong>mongodb在注册成系统服务</strong>以及<strong>windows系统下redis服务启动</strong>的时候可能会遇到各种小问题,但是网上有很多的教程和解决方案,我就不再赘述…</p>\n<p>…了吧?</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向<strong>文件</strong> dbpath指向<strong>目录</strong> 都是绝对路径)<br><code>mongod --install --serviceName &#39;这个服务的名称&#39; --serviceDisplayName &#39;这个服务显示的名称&#39; --logpath D:/dbfiles/logs/day-one.log --dbpath D:/dbfiles/databases/ --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>接下来,我们要先创建自己的服务器端.</p>\n<h4 id=\"来吧-Server\"><a href=\"#来吧-Server\" class=\"headerlink\" title=\"来吧,Server!\"></a>来吧,Server!</h4><p> 创建一个空的文件夹 MyServer<br><code>cd myserver &amp; npm init</code><br>一路回车之后,再安装几个依赖<br><code>npm i --save express express-session express-graphql graphql redis connect-redis mongoose nodemon body-parser properties-reader</code></p>\n<p><strong>然后你可以先去睡几个小时,装完之后让你女朋友叫醒你</strong></p>\n<p>哈哈哈,我开玩笑的<br>…<br>..<br>.<br>程序员<strong>怎么可能</strong>有女朋友!!! (╯‵□′)╯︵┻━┻</p>\n<p>装完之后,我们就可以规划一个比较合理的目录了,这次我们只打算做服务器端的部分,所以我们创建三个目录:<code>mkdir server framework core</code></p>\n<ul>\n<li>framework 业务无关的公共的组件 譬如加密等</li>\n<li>core 业务相关的公共组件  譬如数据模型等</li>\n<li>server 服务器文件 譬如路由 各种及filter等</li>\n</ul>\n<p>接下来,我们在进入server目录创建server.js:<code>cd server &amp; touch server.js</code> (cmd下的指令是<code>cd server &amp; cd .&gt;server.js</code> 下文将不再赘述)</p>\n<p>OK,现在我们在编辑器中打开server.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let express = require(&apos;express&apos;)</div><div class=\"line\">let app = express()</div><div class=\"line\">let server = require(&apos;http&apos;).createServer(app)</div><div class=\"line\">let session = require(&apos;../framework/redis/session&apos;)</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let initRouters = require(&apos;./routes/Initialize&apos;)</div><div class=\"line\">const PORT = propReader.get(&apos;server.port&apos;) || 80 // 设置应用占用的端口</div><div class=\"line\"></div><div class=\"line\">// 添加bodyParser和session插件</div><div class=\"line\">app.use(bodyParser.json())</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(session)</div><div class=\"line\">// 初始化路由</div><div class=\"line\">initRouters(app)  </div><div class=\"line\"></div><div class=\"line\">server.listen(PORT, () =&gt; &#123;</div><div class=\"line\">  console.log(`服务器启动在端口:$&#123;PORT&#125;`)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>好的,上面我们注册了一个httpServer,其中引用了两个自定义的module:<br><code>let session = require(&#39;../framework/redis/session&#39;)</code><br><code>let initRouters = require(&#39;./routes/Initialize&#39;)</code><br>接下来,我们去实现这两个模块.</p>\n<p>进入到framework目录,创建redis目录,进入之后创建session.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">let session = require(&apos;express-session&apos;)</div><div class=\"line\">let RedisStore = require(&apos;connect-redis&apos;)(session)</div><div class=\"line\">let client = require(&apos;./base&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = session(&#123;</div><div class=\"line\">  name: &apos;s&apos;,</div><div class=\"line\">  store: new RedisStore(&#123;</div><div class=\"line\">    client: client,</div><div class=\"line\">    prefix: &apos;RS&apos;  </div><div class=\"line\">  &#125;),</div><div class=\"line\">  secret: &apos;keyboard cat&apos;,  </div><div class=\"line\">  resave: true,</div><div class=\"line\">  saveUninitialized: false</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>接着,在本目录创建 base.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let redis = require(&apos;redis&apos;)</div><div class=\"line\">let propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let client = redis.createClient(propReader.get(&apos;redisServer.port&apos;), propReader.get(&apos;redisServer.ip&apos;), &#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">client</div><div class=\"line\">  .on(&apos;ready&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 连接成功`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;reconnecting&apos;, ()=&gt; &#123;</div><div class=\"line\">    console.log(`redis 重连中...`)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .on(&apos;error&apos;, (err)=&gt; &#123;</div><div class=\"line\">    console.error(`redis 连接出错:$&#123;err&#125;`)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = client</div></pre></td></tr></table></figure></p>\n<p>恩,这里我们把配置写到了一个配置文件里,接下来让我们回到根目录,创建配置文件server.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server 服务器配置</div><div class=\"line\">server.port=8001</div><div class=\"line\"># dbServer 数据库服务器配置</div><div class=\"line\">dbServer.ip=localhost</div><div class=\"line\">dbServer.port=27010</div><div class=\"line\">dbServer.name=test</div><div class=\"line\"></div><div class=\"line\"># redisServer redis服务器配置</div><div class=\"line\">redisServer.ip=localhost</div><div class=\"line\">redisServer.port=6379</div></pre></td></tr></table></figure></p>\n<p>好的,接下来我们要再回到server目录,创建routes文件夹,在下面创建一个叫做Initialize.js的文件,在这里我们要返回一个初始化路由的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let indexRoutes = require(&apos;./actions/index&apos;)</div><div class=\"line\">let graphqlRoutes = require(&apos;./graphql/index&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Initialize里注册两个路由,一个是/index,另外一个是/graphql.<br>其中的index我们先将其创建在server/routes/actions目录中,命名为index.js,简单实现一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\"></div><div class=\"line\">router.get([&apos;/&apos;, &apos;/index&apos;], (req, res) =&gt; &#123;</div><div class=\"line\">\tres.send(&#123;</div><div class=\"line\">\t\ttitle: &apos;来啊,互相伤害啊!&apos;,</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>接下来需要实现graphql/index.js,但是在这之前,我们要先构建一个用户模型,也就是一个Schema.我们进入core目录创建schemas文件夹,在下面创建user.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (mongoose) &#123;</div><div class=\"line\">    return mongoose.Schema(&#123;</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        salt: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hash: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            required: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        avatar: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;default&apos;: &apos;/images/avatar_default.jpg&apos;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        gender: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            &apos;enum&apos;: [&apos;男&apos;, &apos;女&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: Number,</div><div class=\"line\">            min: 1,</div><div class=\"line\">            max: 120</div><div class=\"line\">        &#125;,</div><div class=\"line\">        city: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        hometown: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        phone: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        email: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        birthday: &#123;</div><div class=\"line\">            type: Date</div><div class=\"line\">        &#125;,</div><div class=\"line\">        address: &#123;</div><div class=\"line\">            type: String</div><div class=\"line\">        &#125;,</div><div class=\"line\">        createdate: &#123;</div><div class=\"line\">            type: Date,</div><div class=\"line\">            &apos;default&apos;: Date.now()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在core的根目录里添加一个models.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;)</div><div class=\"line\">mongoose.Promise = global.Promise</div><div class=\"line\">const propReader = require(&apos;properties-reader&apos;)(&apos;server.properties&apos;)</div><div class=\"line\">let db = mongoose.createConnection(</div><div class=\"line\">    `mongodb://$&#123;propReader.get(&apos;dbServer.ip&apos;)&#125;/$&#123;propReader.get(&apos;dbServer.name&apos;)&#125;`,</div><div class=\"line\">    &#123; replset: &#123; poolSize: 10 &#125; &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// 成功链接数据库</div><div class=\"line\">db.once(&apos;open&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;mongodb 连接成功!&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 链接数据库失败</div><div class=\"line\">db.on(&apos;error&apos;, function (err) &#123;</div><div class=\"line\">    console.log(`mongodb 连接错误: $&#123;err&#125;`)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">const CREATE_MODEL = function (key, model) &#123;</div><div class=\"line\">    return db.model(key, model)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const SCHEMAS = [&apos;user&apos;]</div><div class=\"line\"></div><div class=\"line\">let schemaMapper = &#123;&#125;</div><div class=\"line\">SCHEMAS.forEach(function (key) &#123;</div><div class=\"line\">    schemaMapper[key] = () =&gt; CREATE_MODEL(key, require(`./schemas/$&#123;key&#125;`)(mongoose))</div><div class=\"line\">&#125;, this)</div><div class=\"line\"></div><div class=\"line\">module.exports = schemaMapper</div></pre></td></tr></table></figure></p>\n<p>好的,下面我们就可以回到刚才的server/routes/里创建graphql目录,然后在里面创建index.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">let UserModel = require(&apos;../../../core/models&apos;).user()  // 获取刚才的用户模型的数据库连接</div><div class=\"line\">let &#123;</div><div class=\"line\">    GraphQLSchema,</div><div class=\"line\">    GraphQLObjectType,</div><div class=\"line\">    GraphQLString,</div><div class=\"line\">    GraphQLList,</div><div class=\"line\">    GraphQLInt,</div><div class=\"line\">    GraphQLNonNull,</div><div class=\"line\">    GraphQLBoolean,</div><div class=\"line\">&#125; = require(&apos;graphql&apos;)</div><div class=\"line\"></div><div class=\"line\">// 创建用户模型对应的graphql类型</div><div class=\"line\">let UserType = new GraphQLObjectType(&#123;</div><div class=\"line\">    name: &apos;user&apos;,</div><div class=\"line\">    description: &apos;user model&apos;,</div><div class=\"line\">    fields: &#123;</div><div class=\"line\">        id: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o[&apos;_id&apos;]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        nickname: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.nickname</div><div class=\"line\">        &#125;,</div><div class=\"line\">        username: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.username</div><div class=\"line\">        &#125;,</div><div class=\"line\">        age: &#123;</div><div class=\"line\">            type: GraphQLString,</div><div class=\"line\">            resolve: o =&gt; o.age</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 创建一个用户的集合类型</div><div class=\"line\">let UserListType = new GraphQLList(UserType)</div><div class=\"line\"></div><div class=\"line\">// 创建graphql的Schema</div><div class=\"line\">let schema = new GraphQLSchema(&#123;</div><div class=\"line\">    query: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersQuery&apos;,</div><div class=\"line\">        description: &apos;查询用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            userList: &#123;</div><div class=\"line\">                type: UserListType,</div><div class=\"line\">                description: &apos;用户列表&apos;,</div><div class=\"line\">                resolve(root, param, session) &#123;</div><div class=\"line\">                    return UserModel.find()</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            user: &#123;</div><div class=\"line\">                type: UserType,</div><div class=\"line\">                description: &apos;指定用户信息&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    return UserModel.findOne(&#123;</div><div class=\"line\">                        _id: params.id</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    mutation: new GraphQLObjectType(&#123;</div><div class=\"line\">        name: &apos;UsersMutation&apos;,</div><div class=\"line\">        description: &apos;修改用户信息&apos;,</div><div class=\"line\">        fields: &#123;</div><div class=\"line\">            updateUserProfile: &#123;</div><div class=\"line\">                type: GraphQLBoolean,</div><div class=\"line\">                description: &apos;修改指定用户的个人资料&apos;,</div><div class=\"line\">                args: &#123;</div><div class=\"line\">                    id: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true,</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    terms: &#123;</div><div class=\"line\">                        type: GraphQLString,</div><div class=\"line\">                        require: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                resolve(root, params, session) &#123;</div><div class=\"line\">                    let tempModel = JSON.parse(params.terms)</div><div class=\"line\">                    return UserModel</div><div class=\"line\">                        .findOneAndUpdate(&#123;</div><div class=\"line\">                            _id: params.id</div><div class=\"line\">                        &#125;, tempModel)</div><div class=\"line\">                        .then((_d) =&gt; &#123; return !!_d &#125;)  </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 构造graphql的路由</div><div class=\"line\">let graphqlRoutes = require(&apos;express-graphql&apos;)(req =&gt; (&#123;</div><div class=\"line\">    schema: schema,</div><div class=\"line\">    context: req.session,</div><div class=\"line\">    graphiql: true</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">module.exports = graphqlRoutes</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们已经创建了一个简单的服务器,目录结构是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-afe64974745a40d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tree.jpg\"></p>\n<p>虽然很多细节并不完善,但是总要一步一步来.</p>\n<p>下面让我们在package.json里的scripts下添加一个debug指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;debug&quot;:&quot;nodemon server/server.js&quot;</div></pre></td></tr></table></figure></p>\n<p>保存后,在项目根目录打开控制台 输入<code>npm run debug</code> (确保你的mongodb和redis服务都已经开启)就会看到控制台的输出 服务器已经运行</p>\n<p>接下来在浏览器访问<a href=\"http://localhost:8001\">http://localhost:8001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-5180874a327e2db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p> 也可以访问 <a href=\"http://localhost:8001/graphql\">http://localhost:8001/graphql</a> 查看graphql调试器 </p>\n<p>我们现在还没有用户数据,所以请求到的结果是空,下一章<a href=\"http://www.jianshu.com/p/ccd3f3cdc5b4\">我们将逐步完善服务器端功能,并且开始构建我们的web端之旅</a></p>\n"},{"title":"javascript全栈应用实践之路 (服务器搭建篇 二)","date":"2016-09-27T10:29:00.000Z","_content":"\n####  剧情概要\n\n上一集,我们一起完成了一个简单的服务器 -- 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.\n在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.\n\n#### 思考\n开始撸码之前,让我们先思考两个问题:\n- 身份验证的原理是什么\n- 身份验证应该在作用于什么场景\n\n可惜我并没有教科书式的答案,只有一些自己的理解:\n\n首先,我认为**身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性**,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.\n\n然后,其作用的场景必然是非匿名场景,譬如**对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候**,这样的场景就需要身份验证.\n\n好,带着这个独创的结论,我们就开始实现一个authentication吧!\n\n#### 先实现简单的路由和filter\n让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能\n```\nlet loginRoutes = require('./actions/login')\nlet registerRoutes = require('./actions/register')\n```\n然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证\n```\nlet sess = require('../filters/session')\nlet auth = require('../filters/authentication')\n```\n然后将它们添加到暴露的方法中\n```\nmodule.exports = function (app) {\n// 注意添加顺序要保持一致\n// ---begin---\n    app.use(sess)\n    app.use('/login', loginRoutes)\n    app.use('/register', registerRoutes)\n    app.use(auth)\n// ---end---\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n接下来,就是去实现这四个部分,先看server/filters/session.js的实现\n```\nmodule.exports = (req, res, next) => {\n    if (!req.session) {\n        return next(new Error('session missed.'))\n    }\n    next()\n}\n```\n超级简单,验证一下请求里是否有session对象,没有的话,就哭.\n然后,我们顺道把server/filters/authentication.js也实现一个简单的版本\n```\nmodule.exports = (req, res, next) => {\n    if (req.session.user) {\n        next()\n    } else {\n        res.redirect('/login')\n    }\n}\n```\nokay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.\n当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.\n接下来的工作就是实现刚才定义的两个路由,/login和/register.\nserver/routes/actions/login.js:\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'login'\n    })\n})\nmodule.exports = router\n```\n\nserver/routes/actions/register.js\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'register'\n    })\n})\nmodule.exports = router\n```\nok,现在我们启动服务器`npm run debug`\n然后访问 http://localhost:8001/index 会发现我们已经被redirect到了login页面\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.\n接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.\n\n#### 引入模板引擎,创建登录注册页\n首先,我们要在项目的根目录创建public和src目录\n- public 用来放置我们服务器提供的一些前端资源\n- src 是我们前端开发的源码目录\n然后创建服务器端的视图文件夹目录\n- server/views \n\n然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.\n接下来我们需要安装jade模板引擎,`npm i --save jade`,然后在server.js中添加引擎\n\n```\nlet path = require('path')\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'jade')\napp.use(express.static(__dirname + '/../public'))\n```\n\n好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成\n```\nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('login', {\n        title: '请登录',\n        error: msg\n    })\n})\n```\n这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的`app.set('view engine','jade')`所指定的`jade`)去渲染对应的页'login'.\n\n下面,我们要去完成'login.jade'页面,创建文件`/server/views/login.jade`,\n```\ndoctype html\nhtml\n  head\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n    title= title\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n```\n好的,目前为止,我们已经可以在http://localhost:8001/login地址访问到这个挫的不行的登录页了.\n\n为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建`server/views/_layout.jade`\n```\ndoctype html\nhtml\n  head\n    title= title\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n  block content\n```\n\n然后,将我们刚才的`login.jade`调整为\n```\nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n\n```\nokay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧\n\nregister.js 路由\n``` \nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('register', {\n        title: '来啊,注册啊',\n        error: msg\n    })\n})\n```\n\nregister.jade\n``` \nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 注册\n      .login-box-body\n        form(method='post',action='/register')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='用户名')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='confirmpwd',placeholder='确认密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 提交\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/login') 已有账号?\n\n```\n目前为止,我们访问 http://localhost:8001/login\n以及 http://localhost:8001/register 就可以看到两个挫的不行的页面了.\n\n由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.\n让我们把\n`link(rel='stylesheet',href='//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css')`\n加到`_layout.jade`页面的head中,接下来再去访问login页面,就发现帅多了!\n\n#### 完成登录注册功能\n\n好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.\n\n不过在这之前,按照惯例,我们要安装一些东西\n`npm i --save babel babel-core babel-plugin-transform-decorators-legacy`\n然后再创建一个文件`server/start.js`\n```\nrequire('babel-core/register')\nrequire('./server')\n```\n接下来到package.json中做些修改:\n```\n  \"scripts\": {\n    \"debug\": \"set NODE_ENV=DEV & nodemon server/start.js\"\n  },\n  \"babel\": {\n    \"plugins\": [\n      \"transform-decorators-legacy\"\n    ]\n  }\n```\nokay,这样我们nodejs的服务器环境就可以支持es7的`decorator`了.\n> 为什么要折腾这个?\n我们的服务器要支持PC端和移动端的访问,而且将来使用`react-native`去做移动端的时候,通信方式也是基于`fetch`这个api,即`http`通信方式.所以我们现在在做一些通用的`post action`时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like...\n\n好的,接下来,新建2个文件\nserver/dispatch/response.js\n```\nlet logger = require('../../framework/logger/Logger')\n\nconst IS_FROM_MOBILE = function(req) {\n    return !!req.headers['os']  // 当请求头中带有os这个值时,是我们从移动端发来的请求\n}\n\nclass ActionResult {\n    /**\n     * @param {boolean} isSuccess 是否成功\n     * @param {string|object|null} data 附加数据\n     */\n    constructor(isSuccess, data) {\n        this.success = isSuccess === undefined || isSuccess\n        this.data = data\n    }\n}\n\nmodule.exports = {\n    dispatch: () => {\n        return (target, actionName, descriptor) => {\n            let method = descriptor.value\n            if (typeof target !== 'object' || target.constructor.name === 'Object') {\n                throw new ReferenceError('Dispatcher必须作用于非匿名类的实例方法')\n            }\n            descriptor.value = (req, res, ...args) => {\n                try {\n                    let ret = method.call(target, req, res, args)\n                    if (!ret || !(ret instanceof ActionResult)) {\n                        throw new Error('Dispatcher所作用的action返回值必须为ActionResult的实例')\n                    }\n                    if (ret.graphql) {\n                        res.send('it\\'s a graphql query')\n                    } else {\n                        let result = `${target.constructor.name}.${actionName}.${ret.success?'success':'fail'}`\n                        if (IS_FROM_MOBILE(req)) {\n                            // 来自mobile的请求(暂不区分android/ios)\n                            res.send('it comes from mobile')\n                        } else {\n                            // 非mobile请求(当前视作web请求)\n                            switch (result) {\n                                case 'loginController._post.fail':\n                                    req.session.error = ret.data || ''\n                                    res.redirect('/login')\n                                    break\n                                case 'loginController._post.success':\n                                    res.redirect('/index')\n                                    break\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logger.error(`${target.constructor.name}.${actionName} occurred error: ${error}`)\n                }\n            }\n        }\n    },\n    ActionResult: ActionResult\n}\n```\n还有一个日志记录\nframework/logger/logger.js\n```\nclass DevLogger {\n    info(msg) {\n        console.log(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    warn(msg) {\n        console.warn(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    error(msg) {\n        console.error(`${new Date().toLocaleString()} - ${msg}`)\n    }\n}\n\nclass ProdLogger {\n    // todo\n}\n\nlet logger = process.env.NODE_ENV == 'DEV' ? new DevLogger() : new ProdLogger()\n\nmodule.exports = logger\n```\n\n好的,准备工作完成了,下面让我们把目光放回到`server/routes/actions`目录中.\n\n> 这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.\n\nserver/routes/actions/login.js修改如下\n```\nlet router = require('express').Router()\nlet bodyParser = require('body-parser')\nlet urlencodedParser = bodyParser.urlencoded({ extended: false })\nlet { dispatch, ActionResult } = require('../../dispatch/response')\nclass loginController {\n    _get(req, res) {\n        let msg = req.session.error\n        req.session.error = ''\n        res.render('login', {\n            title: '请登录',\n            error: msg\n        })\n    }\n\n    @dispatch()\n    _post(req, res) {\n        return new ActionResult(true, '哎哟我曹')\n    }\n}\n\nlet _controller = new loginController()\n\nrouter.get('/', _controller._get)\nrouter.post('/', urlencodedParser, _controller._post)\n\nmodule.exports = router\n```\n(未完待续...)","source":"_posts/jsFullStackSeries/03.md","raw":"---\ntitle: javascript全栈应用实践之路 (服务器搭建篇 二)\ndate: 2016-09-27 18:29:00\ntags: javascript 全栈 服务器搭建\n---\n\n####  剧情概要\n\n上一集,我们一起完成了一个简单的服务器 -- 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.\n在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.\n\n#### 思考\n开始撸码之前,让我们先思考两个问题:\n- 身份验证的原理是什么\n- 身份验证应该在作用于什么场景\n\n可惜我并没有教科书式的答案,只有一些自己的理解:\n\n首先,我认为**身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性**,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.\n\n然后,其作用的场景必然是非匿名场景,譬如**对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候**,这样的场景就需要身份验证.\n\n好,带着这个独创的结论,我们就开始实现一个authentication吧!\n\n#### 先实现简单的路由和filter\n让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能\n```\nlet loginRoutes = require('./actions/login')\nlet registerRoutes = require('./actions/register')\n```\n然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证\n```\nlet sess = require('../filters/session')\nlet auth = require('../filters/authentication')\n```\n然后将它们添加到暴露的方法中\n```\nmodule.exports = function (app) {\n// 注意添加顺序要保持一致\n// ---begin---\n    app.use(sess)\n    app.use('/login', loginRoutes)\n    app.use('/register', registerRoutes)\n    app.use(auth)\n// ---end---\n    app.use('/', indexRoutes)\n    app.use('/graphql', graphqlRoutes)\n}\n```\n接下来,就是去实现这四个部分,先看server/filters/session.js的实现\n```\nmodule.exports = (req, res, next) => {\n    if (!req.session) {\n        return next(new Error('session missed.'))\n    }\n    next()\n}\n```\n超级简单,验证一下请求里是否有session对象,没有的话,就哭.\n然后,我们顺道把server/filters/authentication.js也实现一个简单的版本\n```\nmodule.exports = (req, res, next) => {\n    if (req.session.user) {\n        next()\n    } else {\n        res.redirect('/login')\n    }\n}\n```\nokay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.\n当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.\n接下来的工作就是实现刚才定义的两个路由,/login和/register.\nserver/routes/actions/login.js:\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'login'\n    })\n})\nmodule.exports = router\n```\n\nserver/routes/actions/register.js\n```\nlet router = require('express').Router()\nrouter.get('/', (req, res) => {\n    res.send({\n        title: 'register'\n    })\n})\nmodule.exports = router\n```\nok,现在我们启动服务器`npm run debug`\n然后访问 http://localhost:8001/index 会发现我们已经被redirect到了login页面\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.\n接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.\n\n#### 引入模板引擎,创建登录注册页\n首先,我们要在项目的根目录创建public和src目录\n- public 用来放置我们服务器提供的一些前端资源\n- src 是我们前端开发的源码目录\n然后创建服务器端的视图文件夹目录\n- server/views \n\n然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.\n接下来我们需要安装jade模板引擎,`npm i --save jade`,然后在server.js中添加引擎\n\n```\nlet path = require('path')\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'jade')\napp.use(express.static(__dirname + '/../public'))\n```\n\n好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成\n```\nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('login', {\n        title: '请登录',\n        error: msg\n    })\n})\n```\n这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的`app.set('view engine','jade')`所指定的`jade`)去渲染对应的页'login'.\n\n下面,我们要去完成'login.jade'页面,创建文件`/server/views/login.jade`,\n```\ndoctype html\nhtml\n  head\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n    title= title\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n```\n好的,目前为止,我们已经可以在http://localhost:8001/login地址访问到这个挫的不行的登录页了.\n\n为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建`server/views/_layout.jade`\n```\ndoctype html\nhtml\n  head\n    title= title\n    meta(charset=\"utf-8\")\n    meta(content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\",name=\"viewport\")\n  block content\n```\n\n然后,将我们刚才的`login.jade`调整为\n```\nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 登录\n      .login-box-body\n        form(method='post',action='/login')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='Username')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='Password')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 登录\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/register') 还没注册?\n\n```\nokay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧\n\nregister.js 路由\n``` \nrouter.get('/', (req, res) => {\n    let msg = req.session.error\n    req.session.error = ''\n    res.render('register', {\n        title: '来啊,注册啊',\n        error: msg\n    })\n})\n```\n\nregister.jade\n``` \nextends _layout\nblock content\n  body.hold-transition.login-page\n    .container\n      .login-logo\n        a\n          span.text-danger.animated.bounceInDown\n            strong 注册\n      .login-box-body\n        form(method='post',action='/register')\n          p.text-red #{error}\n          .form-group.has-feedback\n            input.form-control(type='text',name='username',placeholder='用户名')\n            span.glyphicon.glyphicon-user.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='password',placeholder='密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .form-group.has-feedback\n            input.form-control(type='password',name='confirmpwd',placeholder='确认密码')\n            span.glyphicon.glyphicon-lock.form-control-feedback\n          .row\n            .col-xs-6\n              button.btn.btn-success.btn-block 提交\n            .col-xs-6\n              a.btn.btn-info.btn-block.btn-register(href='/login') 已有账号?\n\n```\n目前为止,我们访问 http://localhost:8001/login\n以及 http://localhost:8001/register 就可以看到两个挫的不行的页面了.\n\n由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.\n让我们把\n`link(rel='stylesheet',href='//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css')`\n加到`_layout.jade`页面的head中,接下来再去访问login页面,就发现帅多了!\n\n#### 完成登录注册功能\n\n好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.\n\n不过在这之前,按照惯例,我们要安装一些东西\n`npm i --save babel babel-core babel-plugin-transform-decorators-legacy`\n然后再创建一个文件`server/start.js`\n```\nrequire('babel-core/register')\nrequire('./server')\n```\n接下来到package.json中做些修改:\n```\n  \"scripts\": {\n    \"debug\": \"set NODE_ENV=DEV & nodemon server/start.js\"\n  },\n  \"babel\": {\n    \"plugins\": [\n      \"transform-decorators-legacy\"\n    ]\n  }\n```\nokay,这样我们nodejs的服务器环境就可以支持es7的`decorator`了.\n> 为什么要折腾这个?\n我们的服务器要支持PC端和移动端的访问,而且将来使用`react-native`去做移动端的时候,通信方式也是基于`fetch`这个api,即`http`通信方式.所以我们现在在做一些通用的`post action`时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like...\n\n好的,接下来,新建2个文件\nserver/dispatch/response.js\n```\nlet logger = require('../../framework/logger/Logger')\n\nconst IS_FROM_MOBILE = function(req) {\n    return !!req.headers['os']  // 当请求头中带有os这个值时,是我们从移动端发来的请求\n}\n\nclass ActionResult {\n    /**\n     * @param {boolean} isSuccess 是否成功\n     * @param {string|object|null} data 附加数据\n     */\n    constructor(isSuccess, data) {\n        this.success = isSuccess === undefined || isSuccess\n        this.data = data\n    }\n}\n\nmodule.exports = {\n    dispatch: () => {\n        return (target, actionName, descriptor) => {\n            let method = descriptor.value\n            if (typeof target !== 'object' || target.constructor.name === 'Object') {\n                throw new ReferenceError('Dispatcher必须作用于非匿名类的实例方法')\n            }\n            descriptor.value = (req, res, ...args) => {\n                try {\n                    let ret = method.call(target, req, res, args)\n                    if (!ret || !(ret instanceof ActionResult)) {\n                        throw new Error('Dispatcher所作用的action返回值必须为ActionResult的实例')\n                    }\n                    if (ret.graphql) {\n                        res.send('it\\'s a graphql query')\n                    } else {\n                        let result = `${target.constructor.name}.${actionName}.${ret.success?'success':'fail'}`\n                        if (IS_FROM_MOBILE(req)) {\n                            // 来自mobile的请求(暂不区分android/ios)\n                            res.send('it comes from mobile')\n                        } else {\n                            // 非mobile请求(当前视作web请求)\n                            switch (result) {\n                                case 'loginController._post.fail':\n                                    req.session.error = ret.data || ''\n                                    res.redirect('/login')\n                                    break\n                                case 'loginController._post.success':\n                                    res.redirect('/index')\n                                    break\n                            }\n                        }\n                    }\n                } catch (error) {\n                    logger.error(`${target.constructor.name}.${actionName} occurred error: ${error}`)\n                }\n            }\n        }\n    },\n    ActionResult: ActionResult\n}\n```\n还有一个日志记录\nframework/logger/logger.js\n```\nclass DevLogger {\n    info(msg) {\n        console.log(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    warn(msg) {\n        console.warn(`${new Date().toLocaleString()} - ${msg}`)\n    }\n\n    error(msg) {\n        console.error(`${new Date().toLocaleString()} - ${msg}`)\n    }\n}\n\nclass ProdLogger {\n    // todo\n}\n\nlet logger = process.env.NODE_ENV == 'DEV' ? new DevLogger() : new ProdLogger()\n\nmodule.exports = logger\n```\n\n好的,准备工作完成了,下面让我们把目光放回到`server/routes/actions`目录中.\n\n> 这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.\n\nserver/routes/actions/login.js修改如下\n```\nlet router = require('express').Router()\nlet bodyParser = require('body-parser')\nlet urlencodedParser = bodyParser.urlencoded({ extended: false })\nlet { dispatch, ActionResult } = require('../../dispatch/response')\nclass loginController {\n    _get(req, res) {\n        let msg = req.session.error\n        req.session.error = ''\n        res.render('login', {\n            title: '请登录',\n            error: msg\n        })\n    }\n\n    @dispatch()\n    _post(req, res) {\n        return new ActionResult(true, '哎哟我曹')\n    }\n}\n\nlet _controller = new loginController()\n\nrouter.get('/', _controller._get)\nrouter.post('/', urlencodedParser, _controller._post)\n\nmodule.exports = router\n```\n(未完待续...)","slug":"jsFullStackSeries/03","published":1,"updated":"2016-09-27T10:49:44.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citmam1i20006awvo77ybzd18","content":"<h4 id=\"剧情概要\"><a href=\"#剧情概要\" class=\"headerlink\" title=\"剧情概要\"></a>剧情概要</h4><p>上一集,我们一起完成了一个简单的服务器 – 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.<br>在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.</p>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>开始撸码之前,让我们先思考两个问题:</p>\n<ul>\n<li>身份验证的原理是什么</li>\n<li>身份验证应该在作用于什么场景</li>\n</ul>\n<p>可惜我并没有教科书式的答案,只有一些自己的理解:</p>\n<p>首先,我认为<strong>身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性</strong>,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.</p>\n<p>然后,其作用的场景必然是非匿名场景,譬如<strong>对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候</strong>,这样的场景就需要身份验证.</p>\n<p>好,带着这个独创的结论,我们就开始实现一个authentication吧!</p>\n<h4 id=\"先实现简单的路由和filter\"><a href=\"#先实现简单的路由和filter\" class=\"headerlink\" title=\"先实现简单的路由和filter\"></a>先实现简单的路由和filter</h4><p>让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let loginRoutes = require(&apos;./actions/login&apos;)</div><div class=\"line\">let registerRoutes = require(&apos;./actions/register&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let sess = require(&apos;../filters/session&apos;)</div><div class=\"line\">let auth = require(&apos;../filters/authentication&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后将它们添加到暴露的方法中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">// 注意添加顺序要保持一致</div><div class=\"line\">// ---begin---</div><div class=\"line\">    app.use(sess)</div><div class=\"line\">    app.use(&apos;/login&apos;, loginRoutes)</div><div class=\"line\">    app.use(&apos;/register&apos;, registerRoutes)</div><div class=\"line\">    app.use(auth)</div><div class=\"line\">// ---end---</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来,就是去实现这四个部分,先看server/filters/session.js的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (!req.session) &#123;</div><div class=\"line\">        return next(new Error(&apos;session missed.&apos;))</div><div class=\"line\">    &#125;</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>超级简单,验证一下请求里是否有session对象,没有的话,就哭.<br>然后,我们顺道把server/filters/authentication.js也实现一个简单的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (req.session.user) &#123;</div><div class=\"line\">        next()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.redirect(&apos;/login&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.<br>当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.<br>接下来的工作就是实现刚才定义的两个路由,/login和/register.<br>server/routes/actions/login.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;login&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>server/routes/actions/register.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;register&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>ok,现在我们启动服务器<code>npm run debug</code><br>然后访问 <a href=\"http://localhost:8001/index\" target=\"_blank\" rel=\"external\">http://localhost:8001/index</a> 会发现我们已经被redirect到了login页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.<br>接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.</p>\n<h4 id=\"引入模板引擎-创建登录注册页\"><a href=\"#引入模板引擎-创建登录注册页\" class=\"headerlink\" title=\"引入模板引擎,创建登录注册页\"></a>引入模板引擎,创建登录注册页</h4><p>首先,我们要在项目的根目录创建public和src目录</p>\n<ul>\n<li>public 用来放置我们服务器提供的一些前端资源</li>\n<li>src 是我们前端开发的源码目录<br>然后创建服务器端的视图文件夹目录</li>\n<li>server/views </li>\n</ul>\n<p>然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.<br>接下来我们需要安装jade模板引擎,<code>npm i --save jade</code>,然后在server.js中添加引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;))</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;)</div><div class=\"line\">app.use(express.static(__dirname + &apos;/../public&apos;))</div></pre></td></tr></table></figure>\n<p>好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;login&apos;, &#123;</div><div class=\"line\">        title: &apos;请登录&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的<code>app.set(&#39;view engine&#39;,&#39;jade&#39;)</code>所指定的<code>jade</code>)去渲染对应的页’login’.</p>\n<p>下面,我们要去完成’login.jade’页面,创建文件<code>/server/views/login.jade</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">    title= title</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>好的,目前为止,我们已经可以在<a href=\"http://localhost:8001/login地址访问到这个挫的不行的登录页了\" target=\"_blank\" rel=\"external\">http://localhost:8001/login地址访问到这个挫的不行的登录页了</a>.</p>\n<p>为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建<code>server/views/_layout.jade</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    title= title</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">  block content</div></pre></td></tr></table></figure></p>\n<p>然后,将我们刚才的<code>login.jade</code>调整为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧</p>\n<p>register.js 路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;register&apos;, &#123;</div><div class=\"line\">        title: &apos;来啊,注册啊&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>register.jade<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 注册</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/register&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;用户名&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;confirmpwd&apos;,placeholder=&apos;确认密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 提交</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/login&apos;) 已有账号?</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们访问 <a href=\"http://localhost:8001/login\" target=\"_blank\" rel=\"external\">http://localhost:8001/login</a><br>以及 <a href=\"http://localhost:8001/register\" target=\"_blank\" rel=\"external\">http://localhost:8001/register</a> 就可以看到两个挫的不行的页面了.</p>\n<p>由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.<br>让我们把<br><code>link(rel=&#39;stylesheet&#39;,href=&#39;//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&#39;)</code><br>加到<code>_layout.jade</code>页面的head中,接下来再去访问login页面,就发现帅多了!</p>\n<h4 id=\"完成登录注册功能\"><a href=\"#完成登录注册功能\" class=\"headerlink\" title=\"完成登录注册功能\"></a>完成登录注册功能</h4><p>好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.</p>\n<p>不过在这之前,按照惯例,我们要安装一些东西<br><code>npm i --save babel babel-core babel-plugin-transform-decorators-legacy</code><br>然后再创建一个文件<code>server/start.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-core/register&apos;)</div><div class=\"line\">require(&apos;./server&apos;)</div></pre></td></tr></table></figure></p>\n<p>接下来到package.json中做些修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;debug&quot;: &quot;set NODE_ENV=DEV &amp; nodemon server/start.js&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">&quot;babel&quot;: &#123;</div><div class=\"line\">  &quot;plugins&quot;: [</div><div class=\"line\">    &quot;transform-decorators-legacy&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们nodejs的服务器环境就可以支持es7的<code>decorator</code>了.</p>\n<blockquote>\n<p>为什么要折腾这个?<br>我们的服务器要支持PC端和移动端的访问,而且将来使用<code>react-native</code>去做移动端的时候,通信方式也是基于<code>fetch</code>这个api,即<code>http</code>通信方式.所以我们现在在做一些通用的<code>post action</code>时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like…</p>\n</blockquote>\n<p>好的,接下来,新建2个文件<br>server/dispatch/response.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">let logger = require(&apos;../../framework/logger/Logger&apos;)</div><div class=\"line\"></div><div class=\"line\">const IS_FROM_MOBILE = function(req) &#123;</div><div class=\"line\">    return !!req.headers[&apos;os&apos;]  // 当请求头中带有os这个值时,是我们从移动端发来的请求</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ActionResult &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param &#123;boolean&#125; isSuccess 是否成功</div><div class=\"line\">     * @param &#123;string|object|null&#125; data 附加数据</div><div class=\"line\">     */</div><div class=\"line\">    constructor(isSuccess, data) &#123;</div><div class=\"line\">        this.success = isSuccess === undefined || isSuccess</div><div class=\"line\">        this.data = data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    dispatch: () =&gt; &#123;</div><div class=\"line\">        return (target, actionName, descriptor) =&gt; &#123;</div><div class=\"line\">            let method = descriptor.value</div><div class=\"line\">            if (typeof target !== &apos;object&apos; || target.constructor.name === &apos;Object&apos;) &#123;</div><div class=\"line\">                throw new ReferenceError(&apos;Dispatcher必须作用于非匿名类的实例方法&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">            descriptor.value = (req, res, ...args) =&gt; &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    let ret = method.call(target, req, res, args)</div><div class=\"line\">                    if (!ret || !(ret instanceof ActionResult)) &#123;</div><div class=\"line\">                        throw new Error(&apos;Dispatcher所作用的action返回值必须为ActionResult的实例&apos;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (ret.graphql) &#123;</div><div class=\"line\">                        res.send(&apos;it\\&apos;s a graphql query&apos;)</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        let result = `$&#123;target.constructor.name&#125;.$&#123;actionName&#125;.$&#123;ret.success?&apos;success&apos;:&apos;fail&apos;&#125;`</div><div class=\"line\">                        if (IS_FROM_MOBILE(req)) &#123;</div><div class=\"line\">                            // 来自mobile的请求(暂不区分android/ios)</div><div class=\"line\">                            res.send(&apos;it comes from mobile&apos;)</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            // 非mobile请求(当前视作web请求)</div><div class=\"line\">                            switch (result) &#123;</div><div class=\"line\">                                case &apos;loginController._post.fail&apos;:</div><div class=\"line\">                                    req.session.error = ret.data || &apos;&apos;</div><div class=\"line\">                                    res.redirect(&apos;/login&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                                case &apos;loginController._post.success&apos;:</div><div class=\"line\">                                    res.redirect(&apos;/index&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; catch (error) &#123;</div><div class=\"line\">                    logger.error(`$&#123;target.constructor.name&#125;.$&#123;actionName&#125; occurred error: $&#123;error&#125;`)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ActionResult: ActionResult</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个日志记录<br>framework/logger/logger.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class DevLogger &#123;</div><div class=\"line\">    info(msg) &#123;</div><div class=\"line\">        console.log(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    warn(msg) &#123;</div><div class=\"line\">        console.warn(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error(msg) &#123;</div><div class=\"line\">        console.error(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ProdLogger &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let logger = process.env.NODE_ENV == &apos;DEV&apos; ? new DevLogger() : new ProdLogger()</div><div class=\"line\"></div><div class=\"line\">module.exports = logger</div></pre></td></tr></table></figure></p>\n<p>好的,准备工作完成了,下面让我们把目光放回到<code>server/routes/actions</code>目录中.</p>\n<blockquote>\n<p>这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.</p>\n</blockquote>\n<p>server/routes/actions/login.js修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</div><div class=\"line\">let &#123; dispatch, ActionResult &#125; = require(&apos;../../dispatch/response&apos;)</div><div class=\"line\">class loginController &#123;</div><div class=\"line\">    _get(req, res) &#123;</div><div class=\"line\">        let msg = req.session.error</div><div class=\"line\">        req.session.error = &apos;&apos;</div><div class=\"line\">        res.render(&apos;login&apos;, &#123;</div><div class=\"line\">            title: &apos;请登录&apos;,</div><div class=\"line\">            error: msg</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @dispatch()</div><div class=\"line\">    _post(req, res) &#123;</div><div class=\"line\">        return new ActionResult(true, &apos;哎哟我曹&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let _controller = new loginController()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, _controller._get)</div><div class=\"line\">router.post(&apos;/&apos;, urlencodedParser, _controller._post)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>(未完待续…)</p>\n","excerpt":"","more":"<h4 id=\"剧情概要\"><a href=\"#剧情概要\" class=\"headerlink\" title=\"剧情概要\"></a>剧情概要</h4><p>上一集,我们一起完成了一个简单的服务器 – 提供了/index 根目录的路由,/graphql 数据服务路由并且创建了一个用户模型.<br>在这一集,我们将要完成注册登录和身份验证的基本功能,并且完成对应web端的部分.</p>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>开始撸码之前,让我们先思考两个问题:</p>\n<ul>\n<li>身份验证的原理是什么</li>\n<li>身份验证应该在作用于什么场景</li>\n</ul>\n<p>可惜我并没有教科书式的答案,只有一些自己的理解:</p>\n<p>首先,我认为<strong>身份验证的机制应该是在用户通过一些行为确定身份之后,携带一个自己身份的标识信息,并且可以被服务器端所认可,其必须具有唯一性</strong>,说白了就是,你登录之后,服务器为你生成一个唯一标识,你只要每次请求的时候都带着就可以了.</p>\n<p>然后,其作用的场景必然是非匿名场景,譬如<strong>对于大多数数据进行Create/Update/Delete之类的操作(甚至某些敏感数据的Read操作)需要明确你的身份的时候</strong>,这样的场景就需要身份验证.</p>\n<p>好,带着这个独创的结论,我们就开始实现一个authentication吧!</p>\n<h4 id=\"先实现简单的路由和filter\"><a href=\"#先实现简单的路由和filter\" class=\"headerlink\" title=\"先实现简单的路由和filter\"></a>先实现简单的路由和filter</h4><p>让我们找到并打开server/routes/Initialize.js,做一些小小的改动,添加两个路由,对应的就是我们未来的登录和注册功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let loginRoutes = require(&apos;./actions/login&apos;)</div><div class=\"line\">let registerRoutes = require(&apos;./actions/register&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后,再加上两个filter,sess是我们校验session的一个过滤器,auth顾名思义,就是身份验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let sess = require(&apos;../filters/session&apos;)</div><div class=\"line\">let auth = require(&apos;../filters/authentication&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后将它们添加到暴露的方法中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function (app) &#123;</div><div class=\"line\">// 注意添加顺序要保持一致</div><div class=\"line\">// ---begin---</div><div class=\"line\">    app.use(sess)</div><div class=\"line\">    app.use(&apos;/login&apos;, loginRoutes)</div><div class=\"line\">    app.use(&apos;/register&apos;, registerRoutes)</div><div class=\"line\">    app.use(auth)</div><div class=\"line\">// ---end---</div><div class=\"line\">    app.use(&apos;/&apos;, indexRoutes)</div><div class=\"line\">    app.use(&apos;/graphql&apos;, graphqlRoutes)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来,就是去实现这四个部分,先看server/filters/session.js的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (!req.session) &#123;</div><div class=\"line\">        return next(new Error(&apos;session missed.&apos;))</div><div class=\"line\">    &#125;</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>超级简单,验证一下请求里是否有session对象,没有的话,就哭.<br>然后,我们顺道把server/filters/authentication.js也实现一个简单的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = (req, res, next) =&gt; &#123;</div><div class=\"line\">    if (req.session.user) &#123;</div><div class=\"line\">        next()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.redirect(&apos;/login&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,现在我们会校验一下请求中的session对象里有没有user,没有的话,就跳转到login.<br>当然这只是先做一个简单的功能,暂且不考虑针对ajax请求所返回的数据形式.<br>接下来的工作就是实现刚才定义的两个路由,/login和/register.<br>server/routes/actions/login.js:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;login&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>server/routes/actions/register.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        title: &apos;register&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>ok,现在我们启动服务器<code>npm run debug</code><br>然后访问 <a href=\"http://localhost:8001/index\">http://localhost:8001/index</a> 会发现我们已经被redirect到了login页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/140939-c4dff4c56a0207b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>好的,现在我们的服务器按照预想的对发送到/index的请求验证了用户身份信息,发现当前会话中没有user信息,所以给我们重定向到/login.<br>接下来,我们要实现web前端的部分,来完成一个用户的登录注册功能.</p>\n<h4 id=\"引入模板引擎-创建登录注册页\"><a href=\"#引入模板引擎-创建登录注册页\" class=\"headerlink\" title=\"引入模板引擎,创建登录注册页\"></a>引入模板引擎,创建登录注册页</h4><p>首先,我们要在项目的根目录创建public和src目录</p>\n<ul>\n<li>public 用来放置我们服务器提供的一些前端资源</li>\n<li>src 是我们前端开发的源码目录<br>然后创建服务器端的视图文件夹目录</li>\n<li>server/views </li>\n</ul>\n<p>然后,我们进入到src目录,创建名为scripts的子目录,接着在其下创建一个entry.js,该文件作为我们前端打包时的入口文件.<br>接下来我们需要安装jade模板引擎,<code>npm i --save jade</code>,然后在server.js中添加引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;))</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;)</div><div class=\"line\">app.use(express.static(__dirname + &apos;/../public&apos;))</div></pre></td></tr></table></figure>\n<p>好的,接下来我们先完成login页面的渲染,在这之前我们要给login的路由做些小的调整,打开server/routes/actions/login.js,将原本的route.get替换成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;login&apos;, &#123;</div><div class=\"line\">        title: &apos;请登录&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这样我们的服务器会在接收到/login的get请求时,去调用app指定的模板渲染引擎(也就是上文的<code>app.set(&#39;view engine&#39;,&#39;jade&#39;)</code>所指定的<code>jade</code>)去渲染对应的页’login’.</p>\n<p>下面,我们要去完成’login.jade’页面,创建文件<code>/server/views/login.jade</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">    title= title</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>好的,目前为止,我们已经可以在<a href=\"http://localhost:8001/login地址访问到这个挫的不行的登录页了\">http://localhost:8001/login地址访问到这个挫的不行的登录页了</a>.</p>\n<p>为了保证模板的通用性,我们可以把页面正文之外的部分抽出来,作为一个layout,那么我们需要做一些修改.首先创建<code>server/views/_layout.jade</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">doctype html</div><div class=\"line\">html</div><div class=\"line\">  head</div><div class=\"line\">    title= title</div><div class=\"line\">    meta(charset=&quot;utf-8&quot;)</div><div class=\"line\">    meta(content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0&quot;,name=&quot;viewport&quot;)</div><div class=\"line\">  block content</div></pre></td></tr></table></figure></p>\n<p>然后,将我们刚才的<code>login.jade</code>调整为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 登录</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/login&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;Username&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;Password&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 登录</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/register&apos;) 还没注册?</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们就可以在接下来专注到body部分的实现了,顺势把注册也完成吧</p>\n<p>register.js 路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let msg = req.session.error</div><div class=\"line\">    req.session.error = &apos;&apos;</div><div class=\"line\">    res.render(&apos;register&apos;, &#123;</div><div class=\"line\">        title: &apos;来啊,注册啊&apos;,</div><div class=\"line\">        error: msg</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>register.jade<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends _layout</div><div class=\"line\">block content</div><div class=\"line\">  body.hold-transition.login-page</div><div class=\"line\">    .container</div><div class=\"line\">      .login-logo</div><div class=\"line\">        a</div><div class=\"line\">          span.text-danger.animated.bounceInDown</div><div class=\"line\">            strong 注册</div><div class=\"line\">      .login-box-body</div><div class=\"line\">        form(method=&apos;post&apos;,action=&apos;/register&apos;)</div><div class=\"line\">          p.text-red #&#123;error&#125;</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;text&apos;,name=&apos;username&apos;,placeholder=&apos;用户名&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-user.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;password&apos;,placeholder=&apos;密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .form-group.has-feedback</div><div class=\"line\">            input.form-control(type=&apos;password&apos;,name=&apos;confirmpwd&apos;,placeholder=&apos;确认密码&apos;)</div><div class=\"line\">            span.glyphicon.glyphicon-lock.form-control-feedback</div><div class=\"line\">          .row</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              button.btn.btn-success.btn-block 提交</div><div class=\"line\">            .col-xs-6</div><div class=\"line\">              a.btn.btn-info.btn-block.btn-register(href=&apos;/login&apos;) 已有账号?</div></pre></td></tr></table></figure></p>\n<p>目前为止,我们访问 <a href=\"http://localhost:8001/login\">http://localhost:8001/login</a><br>以及 <a href=\"http://localhost:8001/register\">http://localhost:8001/register</a> 就可以看到两个挫的不行的页面了.</p>\n<p>由于我们身处在这个看脸的社会,所以我希望它们在实现功能之前,能更美观一些.<br>让我们把<br><code>link(rel=&#39;stylesheet&#39;,href=&#39;//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&#39;)</code><br>加到<code>_layout.jade</code>页面的head中,接下来再去访问login页面,就发现帅多了!</p>\n<h4 id=\"完成登录注册功能\"><a href=\"#完成登录注册功能\" class=\"headerlink\" title=\"完成登录注册功能\"></a>完成登录注册功能</h4><p>好的,上面我们完成了登录注册两个页面的基本视图,接下来就是实现真正意义上的功能.</p>\n<p>不过在这之前,按照惯例,我们要安装一些东西<br><code>npm i --save babel babel-core babel-plugin-transform-decorators-legacy</code><br>然后再创建一个文件<code>server/start.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-core/register&apos;)</div><div class=\"line\">require(&apos;./server&apos;)</div></pre></td></tr></table></figure></p>\n<p>接下来到package.json中做些修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;debug&quot;: &quot;set NODE_ENV=DEV &amp; nodemon server/start.js&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">&quot;babel&quot;: &#123;</div><div class=\"line\">  &quot;plugins&quot;: [</div><div class=\"line\">    &quot;transform-decorators-legacy&quot;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>okay,这样我们nodejs的服务器环境就可以支持es7的<code>decorator</code>了.</p>\n<blockquote>\n<p>为什么要折腾这个?<br>我们的服务器要支持PC端和移动端的访问,而且将来使用<code>react-native</code>去做移动端的时候,通信方式也是基于<code>fetch</code>这个api,即<code>http</code>通信方式.所以我们现在在做一些通用的<code>post action</code>时,就要要考虑如何能够实现多端支持.而一个我这智商能够想到的,较为优雅的,却在观众老爷们看来可能很蹩脚的解决方案就是面向切面的设计,或者说是拦截器/修饰符/decorator/AOP,你想怎么叫都行,whatever u like…</p>\n</blockquote>\n<p>好的,接下来,新建2个文件<br>server/dispatch/response.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">let logger = require(&apos;../../framework/logger/Logger&apos;)</div><div class=\"line\"></div><div class=\"line\">const IS_FROM_MOBILE = function(req) &#123;</div><div class=\"line\">    return !!req.headers[&apos;os&apos;]  // 当请求头中带有os这个值时,是我们从移动端发来的请求</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ActionResult &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param &#123;boolean&#125; isSuccess 是否成功</div><div class=\"line\">     * @param &#123;string|object|null&#125; data 附加数据</div><div class=\"line\">     */</div><div class=\"line\">    constructor(isSuccess, data) &#123;</div><div class=\"line\">        this.success = isSuccess === undefined || isSuccess</div><div class=\"line\">        this.data = data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    dispatch: () =&gt; &#123;</div><div class=\"line\">        return (target, actionName, descriptor) =&gt; &#123;</div><div class=\"line\">            let method = descriptor.value</div><div class=\"line\">            if (typeof target !== &apos;object&apos; || target.constructor.name === &apos;Object&apos;) &#123;</div><div class=\"line\">                throw new ReferenceError(&apos;Dispatcher必须作用于非匿名类的实例方法&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">            descriptor.value = (req, res, ...args) =&gt; &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    let ret = method.call(target, req, res, args)</div><div class=\"line\">                    if (!ret || !(ret instanceof ActionResult)) &#123;</div><div class=\"line\">                        throw new Error(&apos;Dispatcher所作用的action返回值必须为ActionResult的实例&apos;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (ret.graphql) &#123;</div><div class=\"line\">                        res.send(&apos;it\\&apos;s a graphql query&apos;)</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        let result = `$&#123;target.constructor.name&#125;.$&#123;actionName&#125;.$&#123;ret.success?&apos;success&apos;:&apos;fail&apos;&#125;`</div><div class=\"line\">                        if (IS_FROM_MOBILE(req)) &#123;</div><div class=\"line\">                            // 来自mobile的请求(暂不区分android/ios)</div><div class=\"line\">                            res.send(&apos;it comes from mobile&apos;)</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            // 非mobile请求(当前视作web请求)</div><div class=\"line\">                            switch (result) &#123;</div><div class=\"line\">                                case &apos;loginController._post.fail&apos;:</div><div class=\"line\">                                    req.session.error = ret.data || &apos;&apos;</div><div class=\"line\">                                    res.redirect(&apos;/login&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                                case &apos;loginController._post.success&apos;:</div><div class=\"line\">                                    res.redirect(&apos;/index&apos;)</div><div class=\"line\">                                    break</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; catch (error) &#123;</div><div class=\"line\">                    logger.error(`$&#123;target.constructor.name&#125;.$&#123;actionName&#125; occurred error: $&#123;error&#125;`)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ActionResult: ActionResult</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一个日志记录<br>framework/logger/logger.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class DevLogger &#123;</div><div class=\"line\">    info(msg) &#123;</div><div class=\"line\">        console.log(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    warn(msg) &#123;</div><div class=\"line\">        console.warn(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error(msg) &#123;</div><div class=\"line\">        console.error(`$&#123;new Date().toLocaleString()&#125; - $&#123;msg&#125;`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class ProdLogger &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let logger = process.env.NODE_ENV == &apos;DEV&apos; ? new DevLogger() : new ProdLogger()</div><div class=\"line\"></div><div class=\"line\">module.exports = logger</div></pre></td></tr></table></figure></p>\n<p>好的,准备工作完成了,下面让我们把目光放回到<code>server/routes/actions</code>目录中.</p>\n<blockquote>\n<p>这里说是路由,不如说是路由映射及controller的实现,如果读者觉得头晕目眩恶心反胃,不妨把routes/actions和routes/graphql里的controller部分抽离到server目录下.</p>\n</blockquote>\n<p>server/routes/actions/login.js修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">let router = require(&apos;express&apos;).Router()</div><div class=\"line\">let bodyParser = require(&apos;body-parser&apos;)</div><div class=\"line\">let urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</div><div class=\"line\">let &#123; dispatch, ActionResult &#125; = require(&apos;../../dispatch/response&apos;)</div><div class=\"line\">class loginController &#123;</div><div class=\"line\">    _get(req, res) &#123;</div><div class=\"line\">        let msg = req.session.error</div><div class=\"line\">        req.session.error = &apos;&apos;</div><div class=\"line\">        res.render(&apos;login&apos;, &#123;</div><div class=\"line\">            title: &apos;请登录&apos;,</div><div class=\"line\">            error: msg</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @dispatch()</div><div class=\"line\">    _post(req, res) &#123;</div><div class=\"line\">        return new ActionResult(true, &apos;哎哟我曹&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let _controller = new loginController()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, _controller._get)</div><div class=\"line\">router.post(&apos;/&apos;, urlencodedParser, _controller._post)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure></p>\n<p>(未完待续…)</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"citmam1hf0000awvo8zqlg6qm","tag_id":"citmam1hn0002awvotsb5d8uw","_id":"citmam1hr0004awvo6e8dmx38"},{"post_id":"citmam1hk0001awvow4d3i9ef","tag_id":"citmam1hr0003awvomffo3x26","_id":"citmam1hs0005awvof6lfz2n5"},{"post_id":"citmam1i20006awvo77ybzd18","tag_id":"citmam1hr0003awvomffo3x26","_id":"citmam1i30007awvofc0g71tm"}],"Tag":[{"name":"javascript 全栈 简述","_id":"citmam1hn0002awvotsb5d8uw"},{"name":"javascript 全栈 服务器搭建","_id":"citmam1hr0003awvomffo3x26"}]}}