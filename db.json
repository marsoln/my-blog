{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/alpha-dust/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1504519603000},{"_id":"themes/alpha-dust/LICENSE","hash":"20fb6ab02264ce4860e25cd70b50fa86c08f1cf8","modified":1504519603000},{"_id":"themes/alpha-dust/README.md","hash":"ab3d1d91ddca6223455022152e89fd4d0b41c851","modified":1504519603000},{"_id":"themes/alpha-dust/_config.yml","hash":"98f0443704aa3182e83f474c1d83d892d4517bbe","modified":1504519603000},{"_id":"source/_posts/Chat Server.md","hash":"eaccd107a606005cdad515e45496661ecc74edca","modified":1504519603000},{"_id":"source/_posts/Gitbook定制.md","hash":"f1c012c809ab2cfbf1e8693848aa856750dbf63a","modified":1529468277727},{"_id":"source/_posts/interviewQuestions.md","hash":"52090703d03146595360e6c0a97b0c929b49c755","modified":1494569714952},{"_id":"source/_posts/奇技淫巧.md","hash":"1847c265938fc2b4965be774e7b006b6d176be31","modified":1529468208258},{"_id":"source/_posts/好玩的社区.md","hash":"cca1f1c4af24cd42bacf7aef7489b978128c0ec1","modified":1529467613408},{"_id":"source/_posts/工具使用.md","hash":"c4c8ac6b040c5c39155fb8ca9510a46501f988a6","modified":1529467652239},{"_id":"source/_posts/踩过的坑.md","hash":"5cfb7a727e7a31a0c4a594cc5168122ccf4da817","modified":1529468059407},{"_id":"themes/alpha-dust/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1504519603000},{"_id":"themes/alpha-dust/languages/default.yml","hash":"c21e6c0599fa090fdec818b01696d4be224bc325","modified":1504519603000},{"_id":"themes/alpha-dust/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1504519603000},{"_id":"themes/alpha-dust/languages/en.yml","hash":"bc4b0f68c3579f8d9c217b96ae9d2da1991c92f7","modified":1504519603000},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1504519603000},{"_id":"themes/alpha-dust/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1504519603000},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1504519603000},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1504519603000},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1504519603000},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1504519603000},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"c21e6c0599fa090fdec818b01696d4be224bc325","modified":1504519603000},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"535ea1205c3dd8782aa8dec64c5bb67a5e118be9","modified":1504519603000},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"a3f94e4a627a83735b82d93694980e988a32d65e","modified":1504519603000},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"2655449a77b370284e6af41aa72c7d72660008fa","modified":1504519603000},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"1f22cea6bb74aa654f6d6ad54b2acbc27f532939","modified":1504519603000},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"5c6c8d3c249c64c4879276d12159a50d5b65b775","modified":1504519603000},{"_id":"source/_draft/GraphQL/GraphQL.md","hash":"35344886310d5f092117095be6828a71649ada3b","modified":1504519603000},{"_id":"source/_draft/GraphQL/响应.md","hash":"821e7e6246188f7c0b9bd38ccd6a66665ab95fe6","modified":1504519603000},{"_id":"source/_draft/GraphQL/执行.md","hash":"053a897b7559af48a8787b0b58c14da3674e5841","modified":1504519603000},{"_id":"source/_draft/GraphQL/附录A 符号约定.md","hash":"2910d83f15710d03dc0920fd31a564270ee70c8f","modified":1504519603000},{"_id":"source/_draft/GraphQL/类型系统.md","hash":"c6aedf602915c4cbfccf0f878a2857ae06268f3a","modified":1504519603000},{"_id":"source/_draft/GraphQL/自省性.md","hash":"cd417ee746b0f44f3bc258f8a0961b9eb8ecb25d","modified":1504519603000},{"_id":"source/_draft/GraphQL/语言.md","hash":"e1ee1b195bb5fe11191ef9528b5f28338b663da1","modified":1504519603000},{"_id":"source/_draft/GraphQL/附录B 语法总结.md","hash":"c190f7643016acd4d8776fc7f82becaf523ff2bd","modified":1504519603000},{"_id":"source/_draft/GraphQL/预览.md","hash":"76d75e52dfab7c3c4b7dd27ccd90544bba76bc94","modified":1504519603000},{"_id":"source/_draft/GraphQL/验证.md","hash":"e7e851b5021575205ba287745a2c158a67bbbe76","modified":1504519603000},{"_id":"source/_posts/jsFullStackSeries/01.md","hash":"66be6c08d0efe294a3863a806773203c52414a76","modified":1504519603000},{"_id":"source/_posts/jsFullStackSeries/03.md","hash":"594f9c9b92cd015d19d935da1ddbda726721485c","modified":1504519603000},{"_id":"source/_posts/jsFullStackSeries/02.md","hash":"1538a8bdf9d608153f7c5cbd64c91dcb6c35cdeb","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"15d1d1376aabe398cce7d18ff4af41635970dd29","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"460768ed91c4bf71199f01685d7af385354ffd28","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"44d9a3825be086e89b278aca94b884022588d9b9","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"112c2f47802a8d3dcfcf31622fce6d92b7c1516f","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"423529d88d45e0a928f6cfadcf9aef27ccb63c13","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"1831ae75b1deb1729e858b2cd83e32fff3a33f6f","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"1723a9bebcafc39007f58f2fbce597a2836f8276","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"569addbbc7d548fca4986e09631489f8515280ff","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"c66618b35d831d6511e4e7e1c9dda9ade6f818e4","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"c189a234d36c6b5c51f814007d5d779bf42f0191","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"452e31aa3016cdf9febfe5c2597a335417873f08","modified":1504519603000},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"b9ec572a16d79cba2341211d7623cd04d2b6e521","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"81677e048b26229f0a734873e1e7b72589627f98","modified":1504519603000},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522270},{"_id":"themes/alpha-dust/source/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1504519603000},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1504519603000},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1504519603000},{"_id":"themes/alpha-dust/template/css/style.css","hash":"50bf62012aa42d76e71ef6c6d359e0c6b02f1f41","modified":1504519603000},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"792ff84e3a2b75cbdc216c8b37089eff0c4ec6bc","modified":1504519603000},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522329},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1475236522329},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1475236522330},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1475236522331},{"_id":"themes/alpha-dust/template/js/main.js","hash":"656d203e231f4533d97654816ff285fcbdfd0956","modified":1504519603000},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1475236522289},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1475236522304},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1475236522325},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1475236522328},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1475236522335},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"77f7b4341cb8d12191035150de6bb04635eb2a89","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"0a086dfb77bc55b27378f97e442e3a696f69048f","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"f01047771a92520cf318930331517f4c9e70c04a","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"b53147cf94bc2d557b885bf2e910d35aad6213f4","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"2e1e2ab562719127c7e216a49f8d7c02f9a0c2c4","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"2368cc9bd2404bce950b55fb2d9be3e7f1e1039c","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"746c0bc7b37096b5f0f0a451c4783a054b22c309","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"d770457f91068e7ed7609eed78d95a61f52bec70","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"789108805cf6d536b8a979a722b5b26a7e27fb28","modified":1504519603000},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"b60fbbd78ca88d2174db1426cf941b6c998dd823","modified":1504519603000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1475236522321},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1504519603000},{"_id":"public/2017/05/12/interviewQuestions/index.html","hash":"ac3a817631f7b2fbb6c6fe4b1eb21ffa733cfbf9","modified":1521098390331},{"_id":"public/2016/10/01/好玩的社区/index.html","hash":"f79caae5cbd49422ff27c9e9c656a7c5c8e76478","modified":1529468330112},{"_id":"public/2016/09/28/踩过的坑/index.html","hash":"5ab494b25da09c429df8ea9a3a96977ed95d268f","modified":1529468330115},{"_id":"public/2016/09/28/奇技淫巧/index.html","hash":"b4d1069321537e1f33541ccd8e6ba51f5ba8a6ea","modified":1529468330113},{"_id":"public/2016/09/27/jsFullStackSeries/01/index.html","hash":"67f14e0a3bd622606ca4b7f2a918506f5300f2d2","modified":1521098390331},{"_id":"public/archives/index.html","hash":"3ef2e24fdce1e83adc8fb93b555cfd53a0f3d251","modified":1529468330114},{"_id":"public/archives/2016/index.html","hash":"5befb3c604eaa44a5b30ee3b2e9cb4779afdc7a7","modified":1529468330114},{"_id":"public/archives/2016/09/index.html","hash":"239858ac0aac48269215bbd01f1738ad13f96099","modified":1529468330114},{"_id":"public/archives/2016/01/index.html","hash":"b5d2660d5b47db831215ba4c229607ad8b435c91","modified":1529468330114},{"_id":"public/archives/2016/10/index.html","hash":"0a98c410128f49d98bf8ade7894cc4c88b1eab62","modified":1529468330114},{"_id":"public/archives/2017/05/index.html","hash":"6fbd58582461e960572d0e218d0f725cf8a0991c","modified":1529468330115},{"_id":"public/archives/2017/index.html","hash":"e66f661f88c91a9906a4da6f0df171ba805a4bcb","modified":1529468330114},{"_id":"public/archives/2017/03/index.html","hash":"ddc262eba89a9985831abfbd062cbab74c7b6870","modified":1529468330115},{"_id":"public/tags/Gitbook-定制/index.html","hash":"44bb3c19a40b9e7c34fef4a4b08e2a65f02180e1","modified":1529468330113},{"_id":"public/tags/javascript/index.html","hash":"c5e792fa4484529970e302a5d76e3671c709abf7","modified":1529468330113},{"_id":"public/tags/技术-社区/index.html","hash":"2d2c4f475dae9f34c85c0712f351a6dcf582bc2e","modified":1529468330113},{"_id":"public/tags/踩坑/index.html","hash":"cd6c7822c348242289a1daeba4bc180538c356be","modified":1529468330113},{"_id":"public/tags/工具/index.html","hash":"09647190e27f19ca6471c4484e73e006a485b471","modified":1529468330113},{"_id":"public/tags/javascript-全栈/index.html","hash":"1f485edc604ab60edc3fbfd3f90aac2930043f22","modified":1521098390333},{"_id":"public/2017/03/02/Gitbook定制/index.html","hash":"78ac0c2a343c1f540ab9772e8486420075664e6d","modified":1529468330115},{"_id":"public/2016/09/28/工具使用/index.html","hash":"0f6f07a7d3c2b166c73b26ad6bbba1cb8431208c","modified":1529468330115},{"_id":"public/2016/09/27/jsFullStackSeries/03/index.html","hash":"4ff2fc9f3615c977e70d130a8b4ac96c552f6c30","modified":1521098390334},{"_id":"public/2016/09/27/jsFullStackSeries/02/index.html","hash":"7b39a2b8c1d7f374f64b71e61268be6d4af3c13c","modified":1521098390334},{"_id":"public/2016/01/21/Chat Server/index.html","hash":"1a69ec8f0cafe4eb57dfaf7c57030744f9411ab2","modified":1529468330115},{"_id":"public/index.html","hash":"77f269d033cb9c65736ec6394d247399365ba25c","modified":1529468431604},{"_id":"public/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1521098390336},{"_id":"public/css/style.css","hash":"2f2d6db9ebec90f6e39d2d720c18a9726c09387a","modified":1521098390548},{"_id":"public/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1521098390548},{"_id":"source/_posts/常用指令.md","hash":"a85fef9507e612d3e043767d2714dc0fe3662597","modified":1529468423263},{"_id":"public/page/2/index.html","hash":"63b27c8a55608c66c62665d38afe39d1aa68b692","modified":1521098390332},{"_id":"public/archives/page/2/index.html","hash":"45ebdd76945f7f33bed82d569ec069ce3d2e9902","modified":1521098390331},{"_id":"public/2018/03/09/常用指令/index.html","hash":"7fc82129543bf61bd83e810cf032263267320834","modified":1520577454192},{"_id":"public/archives/2018/index.html","hash":"db2712d5feeccedaae5799d843c81ae48678d6b5","modified":1529468330115},{"_id":"public/archives/2018/03/index.html","hash":"c07d5ee2a52d62ebb7728ca048e999dee736199a","modified":1529468330115},{"_id":"public/2018/03/15/常用指令/index.html","hash":"4e197ab0c93b891e61353ce64a67733c9d7c55d4","modified":1529468431603},{"_id":"public/tags/shell-指令/index.html","hash":"02014b8d282997cdd44a1877947f60c997d16f1b","modified":1529468330113},{"_id":"source/_posts/面试题.md","hash":"52090703d03146595360e6c0a97b0c929b49c755","modified":1529468291227},{"_id":"source/_draft/jsFullStackSeries/01.md","hash":"66be6c08d0efe294a3863a806773203c52414a76","modified":1504519603000},{"_id":"source/_draft/jsFullStackSeries/02.md","hash":"7480b60b4fc8164175956230aa13a91e196869c4","modified":1529468302942},{"_id":"source/_draft/jsFullStackSeries/03.md","hash":"594f9c9b92cd015d19d935da1ddbda726721485c","modified":1504519603000},{"_id":"public/2017/05/12/面试题/index.html","hash":"abdc6be9aed1b12eefae85d9d88a304c5db63b61","modified":1529468330117}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Gitbook定制","date":"2017-03-02T08:42:21.000Z","_content":"\n# Gitbook website 主题定制化\n\n## Gitbook的文档组织结构的定制\n\n在文档源文件根目录里的 `SUMMARY.md` 作为目录结构的载体,生成左侧的book_summary块,模板会遍历Summary中定义的parts,对于每个part里的articles通过一个递归方法去生成菜单.想要针对菜单不同层级做定制式的处理,可以从此处入手修改.\n\n> 如果只是需要做css定制而不希望改变DOM结构的话,可以借助菜单节点的 `data-level` 属性去实现.\n\n\n以default-theme为例\n```html\n    {% for part in summary.parts %}\n        {% if part.title %}\n        <li class=\"header\">{{ part.title }}</li>\n        {% elif not loop.first %}\n        <li class=\"divider\"></li>\n        {% endif %}\n        {{ articles(part.articles, file, config) }}\n    {% endfor %}\n\n    {% macro articles(_articles) %}\n        {% for article in _articles %}\n            <li class=\"chapter {% if article.path == file.path and not article.anchor %}active{% endif %}\" data-level=\"{{ article.level }}\" {% if article.path %}data-path=\"{{ article.path|resolveFile }}\"{% endif %}>\n                {% if article.path and getPageByPath(article.path) %}\n                    <a href=\"{{ article.path|resolveFile }}{{ article.anchor }}\">\n                {% elif article.url %}\n                    <a target=\"_blank\" href=\"{{ article.url }}\">\n                {% else %}\n                    <span>\n                {% endif %}\n                        {% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %}\n                            <b>{{ article.level }}.</b>\n                        {% endif %}\n                        {{ article.title }}\n                {% if article.path  or article.url %}\n                    </a>\n                {% else %}\n                    </span>\n                {% endif %}\n\n                {% if article.articles.length > 0 %}\n                <ul class=\"articles\">\n                    {{ articles(article.articles, file, config) }}\n                </ul>\n                {% endif %}\n            </li>\n        {% endfor %}\n    {% endmacro %}\n```\n\n## 自定义样式\n\nGitbook默认的Theme提供了style自定义的功能.\n\n其配置定义如下\n```javascript\n\"gitbook\": {\n    \"properties\": {\n      \"styles\": {\n        \"type\": \"object\",\n        \"title\": \"Custom Stylesheets\",\n        \"properties\": {\n          \"website\": {\n            \"title\": \"Stylesheet for website output\",\n            \"default\": \"styles/website.css\"\n          },\n          \"pdf\": {\n            \"title\": \"Stylesheet for PDF output\",\n            \"default\": \"styles/pdf.css\"\n          },\n          \"epub\": {\n            \"title\": \"Stylesheet for ePub output\",\n            \"default\": \"styles/epub.css\"\n          },\n          \"mobi\": {\n            \"title\": \"Stylesheet for Mobi output\",\n            \"default\": \"styles/mobi.css\"\n          },\n          \"ebook\": {\n            \"title\": \"Stylesheet for ebook outputs (PDF, ePub, Mobi)\",\n            \"default\": \"styles/ebook.css\"\n          },\n          \"print\": {\n            \"title\": \"Stylesheet to replace default ebook css\",\n            \"default\": \"styles/print.css\"\n          }\n        }\n      },\n      \"showLevel\": {\n        \"type\": \"boolean\",\n        \"title\": \"Show level indicator in TOC\",\n        \"default\": false\n      }\n    }\n  }\n```\n\n可以在自己项目中的book.json中做自定义配置,譬如我希望使用项目根目录名为 `websiteStyle.css` 的样式文件覆盖默认主题在生成website时的部分样式,就可以:\n\n```json\n{\n    \"styles\":{\n        \"website\":\"./websiteStyle.css\"\n    },\n    // ---忽略下面的部分---\n    \"plugins\": [\n        \"-sharing\",\n        \"-fontsettings\",\n        \"-search\",\n        \"-lunr\"\n    ]\n}\n```\n\n如此一来,我们在此配置的css就会作为站点样式在默认的样式之后加载.可以覆盖默认的css样式以达到自定义的目的.\n\n## 插件的形式定制新的Theme主题\n\n> 下面示例使用github repo的形式创建一个gitbook的插件\n\n- 首先,我们需要创建一个新的repo,然后在其中`npm init`初始化`package.json`配置文件.\n\n注意该配置文件中必须在`engines`中指明`gitbook`的版本\n```json\n    \"engines\": {\n        \"gitbook\": \">=3.2.2\"\n    }\n```\n如果你想要自定义一些配置节点也可以在`package.json`中声明. \n譬如,现在需要一个keywords的配置,是一个字符串值,用来指定页面渲染后的meta中的keywords,那么我们可以写作:\n```json\n    \t\"gitbook\":{\n\t\t\"properties\":{\n\t\t\t\"keywords\":{\n\t\t\t\t\"type\":\"string\",\n\t\t\t\t\"default\":\"\",\n\t\t\t\t\"description\":\"meta keywords config\"\n\t\t\t}\n\t\t}\n\t}\n```\n\n- 接下来在入口文件中可以使用插件机制提供的hook来获取指定的config:\n\nindex.js\n```javascript\nmodule.exports = {\n    hooks: {\n        config: function(config) {\n            console.log(`config hook~\\nconfig.keywords has a value:${config['keywords']}`)\n            return config\n        }\n    }\n}\n```\n\n- 现在将这个简单的插件push到github,然后就可以在gitbook项目中使用了.我们只需要在项目的`book.json`中添加如下配置:\n\n```json\n\"plugins\":[\"name@git+https://github.com/username/repo-name.git\"]\n```\n\n接下来,在`book.json`当前目录`gitbook install`安装该插件  \n插件安装完成后 `gitbook serve`启动服务器就可以按到我们的插件已经正常运行了\n\n## 提高开发时的效率\n\n虽然,上面我们使用了gitbook自带的插件机制将自定义的部分作为一个单独的插件库.  \n但是实际上开发的时候还是会感觉非常麻烦.\n比如我改动一些样式,就必须要打包上传到github,然后到gitbook的项目中更新插件引用,然后再在本地host查看效果.\n\n这样的一套流程显然是不能够满足我们的开发需求的.  \n所以需要在 `plugin` 项目中用gulp创建一个开发时的 watch 任务,监视开发目录的文件变动,然后打包替换到 `gitbook` 项目里的 `_book(默认的host目录)/gitbook/` 目录.\n\n```javascript\nvar gulp = require('gulp')\nvar sass = require('gulp-sass')\nvar postcss = require('gulp-postcss')\nvar autoprefixer = require('autoprefixer')\nvar webpack = require('webpack-stream')\nvar uglify = require('gulp-uglify')\nvar cssMinify = require('gulp-minify-css')\nvar through = require('through2')\n\nconst PATHS = {\n    SASS: ['./src/scss/style.scss'], // scss 入口文件\n    SASS_ALL: ['./src/scss/**/*'],\n    SCRIPTS: ['./src/js/**/index.js'],\n    SCRIPTS_ALL: ['./src/js/**/*'],\n    production: './_assets/website/',\n    development: '../pdoc/node_modules/gitbook-plugin-polex/_assets/website/',\n    debug: '../pdoc/_book/gitbook/', // 只适用在开发调试过程中 不需要重新host gitbook\n}\n\nlet getPath = function() {\n    let ret = PATHS[process.env.NODE_ENV]\n    return ret\n}\n\ngulp.task('compileSass', () => {\n    var plugins = [autoprefixer({\n        browsers: [\n            \"android 4\",\n            \"iOS 6\",\n            \"last 2 versions\"\n        ]\n    })]\n    gulp.src(PATHS.SASS)\n        .pipe(sass().on('error', sass.logError))\n        .pipe(postcss(plugins))\n        .pipe(cssMinify())\n        .pipe(gulp.dest(getPath()))\n})\n\ngulp.task('compileScript', () => {\n    gulp.src(PATHS.SCRIPTS)\n        .pipe(through.obj(function(file, enc, cb) {\n            var __filename = file.path.split('\\\\').reverse()[1]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename === 'core' ? 'gitbook.js' : 'theme.js'\n                    },\n                    module: {\n                        loaders: [{\n                            test: /\\.js$/,\n                            exclude: /node_modules/,\n                            loader: 'babel',\n                            query: {\n                                presets: ['es2015']\n                            }\n                        }]\n                    }\n                }))\n                .pipe(gulp.dest(getPath()))\n            cb()\n        }))\n})\n\ngulp.task('build', ['compileSass', 'compileScript'])\n\ngulp.task('watch', ['compileSass', 'compileScript'], () => {\n    gulp.watch(PATHS.SASS_ALL, ['compileSass'])\n    gulp.watch(PATHS.SCRIPTS_ALL, ['compileScript'])\n})\n```\n\n在 `src/` 目录创建一个 `build.dev.sh` 脚本来完成打包替换的过程\n\n```bash\n\n#! /bin/bash\nROOT=../pdoc/node_modules/gitbook-plugin-polex/\n\n# Cleanup folder\nrm -rf ${ROOT}_assets\nrm -rf ${ROOT}_layouts\n\n# Recreate folder\nmkdir -p ${ROOT}_assets/website/\n\n# Copy layouts\ncp -R _layouts/ ${ROOT}_layouts\n\n# Copy fonts\nmkdir -p ${ROOT}_assets/website/fonts\ncp -R node_modules/font-awesome/fonts/ ${ROOT}_assets/website/fonts/fontawesome/\n\n# Packaged via Gulp\ncross-env NODE_ENV=development gulp build\n\n# Copy images if they exist\nmkdir -p ${ROOT}_assets/website/images\nimgs=`du -k \"src/images\" | cut -f 1` \nzero=0\nif [ $imgs -gt $zero ]; then\ncp src/images/*.* ${ROOT}_assets/website/images/\nelse\necho \"没有图片要复制.\"\nexit 0\nfi\n\n```\n\n## 自动扫描目录生成SUMMARY.md文件\n\n### 实现思路\n\n- 扫描文件目录,获取文件列表\n- 循环文件列表读取文件内容\n    - 将文件内容拆分成行\n    - 正则匹配标题行\n        - 获取标题深度\n        - 生成hash锚点\n    - 重新写入生成后的内容到md文件\n    - 根据标题/标题深度/锚点生成SUMMARY.md结构描述文件\n\n```javascript\nconst glob = require('glob');   // file scanner lib\nconst fs = require('fs');\nconst path = require('path');\nconst borschikHash = require('borschik-hash');  // hash generator lib\nconst config = require('../config/server.json');    // locale config\nconst DOC_DIR = config.build.dirs.subjects;\n\nlet titleReg = /^#+\\s([^\\n\\{#\\}]+)/gi;\nlet titleHashReg = /\\{#([\\w\\W]+)\\}/;\nlet structureMetaData = [];\n\n\n/**\n * generate the content of summary.md\n */\nlet generateContent = function() {\n  if (structureMetaData.length > 0) {\n    let contentArr = ['# SUMMARY\\n\\n'];\n    let _index = contentArr.length;\n    structureMetaData.forEach(meta => {\n      contentArr[_index++] = `${' '.repeat(meta['depth'] * 4)}`; // indents of menu depth level\n      if (meta.hash) {\n        contentArr[_index++] = `* [${meta.title}](./${meta.filepath}#${meta.hash})`;\n      } else {\n        contentArr[_index++] = `* [${meta.title}](./${meta.filepath})`;\n      }\n      contentArr[_index++] = '\\n';\n    });\n    return contentArr.join('');\n  } else {\n    console.error(`未读取到有效的 markdown 目录结构信息.`);\n    process.exit(-1);\n  }\n};\n\n/**\n * Rewrite the content into file\n * @param {string} filepath\n * @param {string} content\n * @param {string} encoding\n */\nlet rewriteFile = function(filepath, content = '', encoding = 'utf-8') {\n  try {\n    if (fs.existsSync(filepath)) {\n      fs.unlinkSync(filepath);\n    }\n  } catch (e) {\n    console.error(e.message);\n  } finally {\n    fs.writeFile(filepath, content, encoding, (err) => {\n      if (err) {\n        console.error(err.message);\n        process.exit(-1);\n      }\n    });\n  }\n};\n\n/**\n * Create summary.md\n */\nlet generateSummaryFile = function() {\n  let filepath = path.join(__dirname, DOC_DIR, 'SUMMARY.md');\n  rewriteFile(filepath, generateContent());\n};\n\nglob(\"**/*.md\", function(err, files) {\n  if (err) {\n    console.error(err.message);\n    process.exit(-1);\n  } else {\n    files.forEach(filepath => {\n      let absoluteFilePath = path.join(__dirname, DOC_DIR, filepath);\n      let originContent = fs.readFileSync(absoluteFilePath, 'utf-8');\n\n      /**\n       * If the content is not empty,\n       * try to split it into lines.\n       * then get the titleReg-matched lines,\n       * ensure that each of them has an unique anchor name,\n       * no matter whether they were linked or not,\n       * cause we need 2 generate the summary menus and they need hash\n       */\n      if (originContent.length > 0) {\n        let lines = originContent.split('\\n');\n        let newLines = lines.map(lineContent => {\n          let title = filepath.split('/').reverse()[0];\n          let hash = null;\n          let depth = 0;\n          let _title = titleReg.exec(lineContent);\n          let _hash = titleHashReg.exec(lineContent);\n\n          if (_title && _title.length > 0) {\n            // depth begins from 0\n            // which means it is just one less than the amount of '#' in front of the line\n            depth = _title[0].split(/\\s/ig)[0].length - 1;\n            title = _title[_title.length - 1].trim();\n\n            // generate the hash anchors for the titles those don't have any anchor\n            if (_hash && _hash.length > 0) {\n              hash = _hash[_hash.length - 1].trim();\n            } else {\n              // append the hash code to the end of line\n              hash = borschikHash(title);\n              lineContent = `${lineContent} {#${hash}}`;\n            }\n\n            // the meta data of the structures for the summary.md\n            structureMetaData[structureMetaData.length] = {\n              filepath,\n              title,\n              depth,\n              hash\n            };\n          }\n          return lineContent;\n        });\n\n        // rewirte the new content into file\n        let fileContent = newLines.join('\\n');\n        rewriteFile(filepath, fileContent);\n      }\n    });\n    generateSummaryFile();\n  }\n});\n\n```","source":"_posts/Gitbook定制.md","raw":"---\ntitle: Gitbook定制\ndate: 2017-03-02 16:42:21\ntags: Gitbook 定制\n---\n\n# Gitbook website 主题定制化\n\n## Gitbook的文档组织结构的定制\n\n在文档源文件根目录里的 `SUMMARY.md` 作为目录结构的载体,生成左侧的book_summary块,模板会遍历Summary中定义的parts,对于每个part里的articles通过一个递归方法去生成菜单.想要针对菜单不同层级做定制式的处理,可以从此处入手修改.\n\n> 如果只是需要做css定制而不希望改变DOM结构的话,可以借助菜单节点的 `data-level` 属性去实现.\n\n\n以default-theme为例\n```html\n    {% for part in summary.parts %}\n        {% if part.title %}\n        <li class=\"header\">{{ part.title }}</li>\n        {% elif not loop.first %}\n        <li class=\"divider\"></li>\n        {% endif %}\n        {{ articles(part.articles, file, config) }}\n    {% endfor %}\n\n    {% macro articles(_articles) %}\n        {% for article in _articles %}\n            <li class=\"chapter {% if article.path == file.path and not article.anchor %}active{% endif %}\" data-level=\"{{ article.level }}\" {% if article.path %}data-path=\"{{ article.path|resolveFile }}\"{% endif %}>\n                {% if article.path and getPageByPath(article.path) %}\n                    <a href=\"{{ article.path|resolveFile }}{{ article.anchor }}\">\n                {% elif article.url %}\n                    <a target=\"_blank\" href=\"{{ article.url }}\">\n                {% else %}\n                    <span>\n                {% endif %}\n                        {% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %}\n                            <b>{{ article.level }}.</b>\n                        {% endif %}\n                        {{ article.title }}\n                {% if article.path  or article.url %}\n                    </a>\n                {% else %}\n                    </span>\n                {% endif %}\n\n                {% if article.articles.length > 0 %}\n                <ul class=\"articles\">\n                    {{ articles(article.articles, file, config) }}\n                </ul>\n                {% endif %}\n            </li>\n        {% endfor %}\n    {% endmacro %}\n```\n\n## 自定义样式\n\nGitbook默认的Theme提供了style自定义的功能.\n\n其配置定义如下\n```javascript\n\"gitbook\": {\n    \"properties\": {\n      \"styles\": {\n        \"type\": \"object\",\n        \"title\": \"Custom Stylesheets\",\n        \"properties\": {\n          \"website\": {\n            \"title\": \"Stylesheet for website output\",\n            \"default\": \"styles/website.css\"\n          },\n          \"pdf\": {\n            \"title\": \"Stylesheet for PDF output\",\n            \"default\": \"styles/pdf.css\"\n          },\n          \"epub\": {\n            \"title\": \"Stylesheet for ePub output\",\n            \"default\": \"styles/epub.css\"\n          },\n          \"mobi\": {\n            \"title\": \"Stylesheet for Mobi output\",\n            \"default\": \"styles/mobi.css\"\n          },\n          \"ebook\": {\n            \"title\": \"Stylesheet for ebook outputs (PDF, ePub, Mobi)\",\n            \"default\": \"styles/ebook.css\"\n          },\n          \"print\": {\n            \"title\": \"Stylesheet to replace default ebook css\",\n            \"default\": \"styles/print.css\"\n          }\n        }\n      },\n      \"showLevel\": {\n        \"type\": \"boolean\",\n        \"title\": \"Show level indicator in TOC\",\n        \"default\": false\n      }\n    }\n  }\n```\n\n可以在自己项目中的book.json中做自定义配置,譬如我希望使用项目根目录名为 `websiteStyle.css` 的样式文件覆盖默认主题在生成website时的部分样式,就可以:\n\n```json\n{\n    \"styles\":{\n        \"website\":\"./websiteStyle.css\"\n    },\n    // ---忽略下面的部分---\n    \"plugins\": [\n        \"-sharing\",\n        \"-fontsettings\",\n        \"-search\",\n        \"-lunr\"\n    ]\n}\n```\n\n如此一来,我们在此配置的css就会作为站点样式在默认的样式之后加载.可以覆盖默认的css样式以达到自定义的目的.\n\n## 插件的形式定制新的Theme主题\n\n> 下面示例使用github repo的形式创建一个gitbook的插件\n\n- 首先,我们需要创建一个新的repo,然后在其中`npm init`初始化`package.json`配置文件.\n\n注意该配置文件中必须在`engines`中指明`gitbook`的版本\n```json\n    \"engines\": {\n        \"gitbook\": \">=3.2.2\"\n    }\n```\n如果你想要自定义一些配置节点也可以在`package.json`中声明. \n譬如,现在需要一个keywords的配置,是一个字符串值,用来指定页面渲染后的meta中的keywords,那么我们可以写作:\n```json\n    \t\"gitbook\":{\n\t\t\"properties\":{\n\t\t\t\"keywords\":{\n\t\t\t\t\"type\":\"string\",\n\t\t\t\t\"default\":\"\",\n\t\t\t\t\"description\":\"meta keywords config\"\n\t\t\t}\n\t\t}\n\t}\n```\n\n- 接下来在入口文件中可以使用插件机制提供的hook来获取指定的config:\n\nindex.js\n```javascript\nmodule.exports = {\n    hooks: {\n        config: function(config) {\n            console.log(`config hook~\\nconfig.keywords has a value:${config['keywords']}`)\n            return config\n        }\n    }\n}\n```\n\n- 现在将这个简单的插件push到github,然后就可以在gitbook项目中使用了.我们只需要在项目的`book.json`中添加如下配置:\n\n```json\n\"plugins\":[\"name@git+https://github.com/username/repo-name.git\"]\n```\n\n接下来,在`book.json`当前目录`gitbook install`安装该插件  \n插件安装完成后 `gitbook serve`启动服务器就可以按到我们的插件已经正常运行了\n\n## 提高开发时的效率\n\n虽然,上面我们使用了gitbook自带的插件机制将自定义的部分作为一个单独的插件库.  \n但是实际上开发的时候还是会感觉非常麻烦.\n比如我改动一些样式,就必须要打包上传到github,然后到gitbook的项目中更新插件引用,然后再在本地host查看效果.\n\n这样的一套流程显然是不能够满足我们的开发需求的.  \n所以需要在 `plugin` 项目中用gulp创建一个开发时的 watch 任务,监视开发目录的文件变动,然后打包替换到 `gitbook` 项目里的 `_book(默认的host目录)/gitbook/` 目录.\n\n```javascript\nvar gulp = require('gulp')\nvar sass = require('gulp-sass')\nvar postcss = require('gulp-postcss')\nvar autoprefixer = require('autoprefixer')\nvar webpack = require('webpack-stream')\nvar uglify = require('gulp-uglify')\nvar cssMinify = require('gulp-minify-css')\nvar through = require('through2')\n\nconst PATHS = {\n    SASS: ['./src/scss/style.scss'], // scss 入口文件\n    SASS_ALL: ['./src/scss/**/*'],\n    SCRIPTS: ['./src/js/**/index.js'],\n    SCRIPTS_ALL: ['./src/js/**/*'],\n    production: './_assets/website/',\n    development: '../pdoc/node_modules/gitbook-plugin-polex/_assets/website/',\n    debug: '../pdoc/_book/gitbook/', // 只适用在开发调试过程中 不需要重新host gitbook\n}\n\nlet getPath = function() {\n    let ret = PATHS[process.env.NODE_ENV]\n    return ret\n}\n\ngulp.task('compileSass', () => {\n    var plugins = [autoprefixer({\n        browsers: [\n            \"android 4\",\n            \"iOS 6\",\n            \"last 2 versions\"\n        ]\n    })]\n    gulp.src(PATHS.SASS)\n        .pipe(sass().on('error', sass.logError))\n        .pipe(postcss(plugins))\n        .pipe(cssMinify())\n        .pipe(gulp.dest(getPath()))\n})\n\ngulp.task('compileScript', () => {\n    gulp.src(PATHS.SCRIPTS)\n        .pipe(through.obj(function(file, enc, cb) {\n            var __filename = file.path.split('\\\\').reverse()[1]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename === 'core' ? 'gitbook.js' : 'theme.js'\n                    },\n                    module: {\n                        loaders: [{\n                            test: /\\.js$/,\n                            exclude: /node_modules/,\n                            loader: 'babel',\n                            query: {\n                                presets: ['es2015']\n                            }\n                        }]\n                    }\n                }))\n                .pipe(gulp.dest(getPath()))\n            cb()\n        }))\n})\n\ngulp.task('build', ['compileSass', 'compileScript'])\n\ngulp.task('watch', ['compileSass', 'compileScript'], () => {\n    gulp.watch(PATHS.SASS_ALL, ['compileSass'])\n    gulp.watch(PATHS.SCRIPTS_ALL, ['compileScript'])\n})\n```\n\n在 `src/` 目录创建一个 `build.dev.sh` 脚本来完成打包替换的过程\n\n```bash\n\n#! /bin/bash\nROOT=../pdoc/node_modules/gitbook-plugin-polex/\n\n# Cleanup folder\nrm -rf ${ROOT}_assets\nrm -rf ${ROOT}_layouts\n\n# Recreate folder\nmkdir -p ${ROOT}_assets/website/\n\n# Copy layouts\ncp -R _layouts/ ${ROOT}_layouts\n\n# Copy fonts\nmkdir -p ${ROOT}_assets/website/fonts\ncp -R node_modules/font-awesome/fonts/ ${ROOT}_assets/website/fonts/fontawesome/\n\n# Packaged via Gulp\ncross-env NODE_ENV=development gulp build\n\n# Copy images if they exist\nmkdir -p ${ROOT}_assets/website/images\nimgs=`du -k \"src/images\" | cut -f 1` \nzero=0\nif [ $imgs -gt $zero ]; then\ncp src/images/*.* ${ROOT}_assets/website/images/\nelse\necho \"没有图片要复制.\"\nexit 0\nfi\n\n```\n\n## 自动扫描目录生成SUMMARY.md文件\n\n### 实现思路\n\n- 扫描文件目录,获取文件列表\n- 循环文件列表读取文件内容\n    - 将文件内容拆分成行\n    - 正则匹配标题行\n        - 获取标题深度\n        - 生成hash锚点\n    - 重新写入生成后的内容到md文件\n    - 根据标题/标题深度/锚点生成SUMMARY.md结构描述文件\n\n```javascript\nconst glob = require('glob');   // file scanner lib\nconst fs = require('fs');\nconst path = require('path');\nconst borschikHash = require('borschik-hash');  // hash generator lib\nconst config = require('../config/server.json');    // locale config\nconst DOC_DIR = config.build.dirs.subjects;\n\nlet titleReg = /^#+\\s([^\\n\\{#\\}]+)/gi;\nlet titleHashReg = /\\{#([\\w\\W]+)\\}/;\nlet structureMetaData = [];\n\n\n/**\n * generate the content of summary.md\n */\nlet generateContent = function() {\n  if (structureMetaData.length > 0) {\n    let contentArr = ['# SUMMARY\\n\\n'];\n    let _index = contentArr.length;\n    structureMetaData.forEach(meta => {\n      contentArr[_index++] = `${' '.repeat(meta['depth'] * 4)}`; // indents of menu depth level\n      if (meta.hash) {\n        contentArr[_index++] = `* [${meta.title}](./${meta.filepath}#${meta.hash})`;\n      } else {\n        contentArr[_index++] = `* [${meta.title}](./${meta.filepath})`;\n      }\n      contentArr[_index++] = '\\n';\n    });\n    return contentArr.join('');\n  } else {\n    console.error(`未读取到有效的 markdown 目录结构信息.`);\n    process.exit(-1);\n  }\n};\n\n/**\n * Rewrite the content into file\n * @param {string} filepath\n * @param {string} content\n * @param {string} encoding\n */\nlet rewriteFile = function(filepath, content = '', encoding = 'utf-8') {\n  try {\n    if (fs.existsSync(filepath)) {\n      fs.unlinkSync(filepath);\n    }\n  } catch (e) {\n    console.error(e.message);\n  } finally {\n    fs.writeFile(filepath, content, encoding, (err) => {\n      if (err) {\n        console.error(err.message);\n        process.exit(-1);\n      }\n    });\n  }\n};\n\n/**\n * Create summary.md\n */\nlet generateSummaryFile = function() {\n  let filepath = path.join(__dirname, DOC_DIR, 'SUMMARY.md');\n  rewriteFile(filepath, generateContent());\n};\n\nglob(\"**/*.md\", function(err, files) {\n  if (err) {\n    console.error(err.message);\n    process.exit(-1);\n  } else {\n    files.forEach(filepath => {\n      let absoluteFilePath = path.join(__dirname, DOC_DIR, filepath);\n      let originContent = fs.readFileSync(absoluteFilePath, 'utf-8');\n\n      /**\n       * If the content is not empty,\n       * try to split it into lines.\n       * then get the titleReg-matched lines,\n       * ensure that each of them has an unique anchor name,\n       * no matter whether they were linked or not,\n       * cause we need 2 generate the summary menus and they need hash\n       */\n      if (originContent.length > 0) {\n        let lines = originContent.split('\\n');\n        let newLines = lines.map(lineContent => {\n          let title = filepath.split('/').reverse()[0];\n          let hash = null;\n          let depth = 0;\n          let _title = titleReg.exec(lineContent);\n          let _hash = titleHashReg.exec(lineContent);\n\n          if (_title && _title.length > 0) {\n            // depth begins from 0\n            // which means it is just one less than the amount of '#' in front of the line\n            depth = _title[0].split(/\\s/ig)[0].length - 1;\n            title = _title[_title.length - 1].trim();\n\n            // generate the hash anchors for the titles those don't have any anchor\n            if (_hash && _hash.length > 0) {\n              hash = _hash[_hash.length - 1].trim();\n            } else {\n              // append the hash code to the end of line\n              hash = borschikHash(title);\n              lineContent = `${lineContent} {#${hash}}`;\n            }\n\n            // the meta data of the structures for the summary.md\n            structureMetaData[structureMetaData.length] = {\n              filepath,\n              title,\n              depth,\n              hash\n            };\n          }\n          return lineContent;\n        });\n\n        // rewirte the new content into file\n        let fileContent = newLines.join('\\n');\n        rewriteFile(filepath, fileContent);\n      }\n    });\n    generateSummaryFile();\n  }\n});\n\n```","slug":"Gitbook定制","published":1,"updated":"2018-06-20T04:17:57.727Z","_id":"cj2lg564z0000lwpofteca3jq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Gitbook-website-主题定制化\"><a href=\"#Gitbook-website-主题定制化\" class=\"headerlink\" title=\"Gitbook website 主题定制化\"></a>Gitbook website 主题定制化</h1><h2 id=\"Gitbook的文档组织结构的定制\"><a href=\"#Gitbook的文档组织结构的定制\" class=\"headerlink\" title=\"Gitbook的文档组织结构的定制\"></a>Gitbook的文档组织结构的定制</h2><p>在文档源文件根目录里的 <code>SUMMARY.md</code> 作为目录结构的载体,生成左侧的book_summary块,模板会遍历Summary中定义的parts,对于每个part里的articles通过一个递归方法去生成菜单.想要针对菜单不同层级做定制式的处理,可以从此处入手修改.</p>\n<blockquote>\n<p>如果只是需要做css定制而不希望改变DOM结构的话,可以借助菜单节点的 <code>data-level</code> 属性去实现.</p>\n</blockquote>\n<p>以default-theme为例<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% for part in summary.parts %&#125;</div><div class=\"line\">    &#123;% if part.title %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>&#123;&#123; part.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% elif not loop.first %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% endif %&#125;</div><div class=\"line\">    &#123;&#123; articles(part.articles, file, config) &#125;&#125;</div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% macro articles(_articles) %&#125;</div><div class=\"line\">    &#123;% for article in _articles %&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chapter &#123;% if article.path == file.path and not article.anchor %&#125;active&#123;% endif %&#125;\"</span> <span class=\"attr\">data-level</span>=<span class=\"string\">\"&#123;&#123; article.level &#125;&#125;\"</span> &#123;% <span class=\"attr\">if</span> <span class=\"attr\">article.path</span> %&#125;<span class=\"attr\">data-path</span>=<span class=\"string\">\"&#123;&#123; article.path|resolveFile &#125;&#125;\"</span>&#123;% <span class=\"attr\">endif</span> %&#125;&gt;</span></div><div class=\"line\">            &#123;% if article.path and getPageByPath(article.path) %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; article.path|resolveFile &#125;&#125;&#123;&#123; article.anchor &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            &#123;% elif article.url %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; article.url &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            &#123;% else %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\">                    &#123;% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %&#125;</div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; article.level &#125;&#125;.<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">                    &#123;% endif %&#125;</div><div class=\"line\">                    &#123;&#123; article.title &#125;&#125;</div><div class=\"line\">            &#123;% if article.path  or article.url %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            &#123;% else %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\"></div><div class=\"line\">            &#123;% if article.articles.length &gt; 0 %&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"articles\"</span>&gt;</span></div><div class=\"line\">                &#123;&#123; articles(article.articles, file, config) &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>Gitbook默认的Theme提供了style自定义的功能.</p>\n<p>其配置定义如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"gitbook\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"styles\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"object\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Custom Stylesheets\"</span>,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"website\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for website output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/website.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"pdf\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for PDF output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/pdf.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"epub\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for ePub output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/epub.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"mobi\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for Mobi output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/mobi.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"ebook\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for ebook outputs (PDF, ePub, Mobi)\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/ebook.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"print\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet to replace default ebook css\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/print.css\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"showLevel\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"boolean\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Show level indicator in TOC\"</span>,</div><div class=\"line\">        <span class=\"string\">\"default\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>可以在自己项目中的book.json中做自定义配置,譬如我希望使用项目根目录名为 <code>websiteStyle.css</code> 的样式文件覆盖默认主题在生成website时的部分样式,就可以:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"styles\"</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">\"website\"</span>:<span class=\"string\">\"./websiteStyle.css\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ---忽略下面的部分---</div><div class=\"line\">    \"plugins\": [</div><div class=\"line\">        \"-sharing\",</div><div class=\"line\">        \"-fontsettings\",</div><div class=\"line\">        \"-search\",</div><div class=\"line\">        <span class=\"string\">\"-lunr\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一来,我们在此配置的css就会作为站点样式在默认的样式之后加载.可以覆盖默认的css样式以达到自定义的目的.</p>\n<h2 id=\"插件的形式定制新的Theme主题\"><a href=\"#插件的形式定制新的Theme主题\" class=\"headerlink\" title=\"插件的形式定制新的Theme主题\"></a>插件的形式定制新的Theme主题</h2><blockquote>\n<p>下面示例使用github repo的形式创建一个gitbook的插件</p>\n</blockquote>\n<ul>\n<li>首先,我们需要创建一个新的repo,然后在其中<code>npm init</code>初始化<code>package.json</code>配置文件.</li>\n</ul>\n<p>注意该配置文件中必须在<code>engines</code>中指明<code>gitbook</code>的版本<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"engines\": &#123;</div><div class=\"line\">    \"gitbook\": \"&gt;=3.2.2\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你想要自定义一些配置节点也可以在<code>package.json</code>中声明.<br>譬如,现在需要一个keywords的配置,是一个字符串值,用来指定页面渲染后的meta中的keywords,那么我们可以写作:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">   \t\"gitbook\":&#123;</div><div class=\"line\">\t\"properties\":&#123;</div><div class=\"line\">\t\t\"keywords\":&#123;</div><div class=\"line\">\t\t\t\"type\":\"string\",</div><div class=\"line\">\t\t\t\"default\":\"\",</div><div class=\"line\">\t\t\t\"description\":\"meta keywords config\"</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>接下来在入口文件中可以使用插件机制提供的hook来获取指定的config:</li>\n</ul>\n<p>index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    hooks: &#123;</div><div class=\"line\">        config: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`config hook~\\nconfig.keywords has a value:<span class=\"subst\">$&#123;config[<span class=\"string\">'keywords'</span>]&#125;</span>`</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> config</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>现在将这个简单的插件push到github,然后就可以在gitbook项目中使用了.我们只需要在项目的<code>book.json</code>中添加如下配置:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"plugins\":[\"name@git+https://github.com/username/repo-name.git\"]</div></pre></td></tr></table></figure>\n<p>接下来,在<code>book.json</code>当前目录<code>gitbook install</code>安装该插件<br>插件安装完成后 <code>gitbook serve</code>启动服务器就可以按到我们的插件已经正常运行了</p>\n<h2 id=\"提高开发时的效率\"><a href=\"#提高开发时的效率\" class=\"headerlink\" title=\"提高开发时的效率\"></a>提高开发时的效率</h2><p>虽然,上面我们使用了gitbook自带的插件机制将自定义的部分作为一个单独的插件库.<br>但是实际上开发的时候还是会感觉非常麻烦.<br>比如我改动一些样式,就必须要打包上传到github,然后到gitbook的项目中更新插件引用,然后再在本地host查看效果.</p>\n<p>这样的一套流程显然是不能够满足我们的开发需求的.<br>所以需要在 <code>plugin</code> 项目中用gulp创建一个开发时的 watch 任务,监视开发目录的文件变动,然后打包替换到 <code>gitbook</code> 项目里的 <code>_book(默认的host目录)/gitbook/</code> 目录.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-postcss'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-stream'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> cssMinify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> through = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> PATHS = &#123;</div><div class=\"line\">    SASS: [<span class=\"string\">'./src/scss/style.scss'</span>], <span class=\"comment\">// scss 入口文件</span></div><div class=\"line\">    SASS_ALL: [<span class=\"string\">'./src/scss/**/*'</span>],</div><div class=\"line\">    SCRIPTS: [<span class=\"string\">'./src/js/**/index.js'</span>],</div><div class=\"line\">    SCRIPTS_ALL: [<span class=\"string\">'./src/js/**/*'</span>],</div><div class=\"line\">    production: <span class=\"string\">'./_assets/website/'</span>,</div><div class=\"line\">    development: <span class=\"string\">'../pdoc/node_modules/gitbook-plugin-polex/_assets/website/'</span>,</div><div class=\"line\">    debug: <span class=\"string\">'../pdoc/_book/gitbook/'</span>, <span class=\"comment\">// 只适用在开发调试过程中 不需要重新host gitbook</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> getPath = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> ret = PATHS[process.env.NODE_ENV]</div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'compileSass'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> plugins = [autoprefixer(&#123;</div><div class=\"line\">        browsers: [</div><div class=\"line\">            <span class=\"string\">\"android 4\"</span>,</div><div class=\"line\">            <span class=\"string\">\"iOS 6\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;)]</div><div class=\"line\">    gulp.src(PATHS.SASS)</div><div class=\"line\">        .pipe(sass().on(<span class=\"string\">'error'</span>, sass.logError))</div><div class=\"line\">        .pipe(postcss(plugins))</div><div class=\"line\">        .pipe(cssMinify())</div><div class=\"line\">        .pipe(gulp.dest(getPath()))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'compileScript'</span>, () =&gt; &#123;</div><div class=\"line\">    gulp.src(PATHS.SCRIPTS)</div><div class=\"line\">        .pipe(through.obj(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file, enc, cb</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> __filename = file.path.split(<span class=\"string\">'\\\\'</span>).reverse()[<span class=\"number\">1</span>]</div><div class=\"line\">            gulp.src(file.path)</div><div class=\"line\">                .pipe(webpack(&#123;</div><div class=\"line\">                    output: &#123;</div><div class=\"line\">                        filename: __filename === <span class=\"string\">'core'</span> ? <span class=\"string\">'gitbook.js'</span> : <span class=\"string\">'theme.js'</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">                        loaders: [&#123;</div><div class=\"line\">                            test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">                            exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                            loader: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                            query: &#123;</div><div class=\"line\">                                presets: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;]</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;))</div><div class=\"line\">                .pipe(gulp.dest(getPath()))</div><div class=\"line\">            cb()</div><div class=\"line\">        &#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'compileSass'</span>, <span class=\"string\">'compileScript'</span>])</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'compileSass'</span>, <span class=\"string\">'compileScript'</span>], () =&gt; &#123;</div><div class=\"line\">    gulp.watch(PATHS.SASS_ALL, [<span class=\"string\">'compileSass'</span>])</div><div class=\"line\">    gulp.watch(PATHS.SCRIPTS_ALL, [<span class=\"string\">'compileScript'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在 <code>src/</code> 目录创建一个 <code>build.dev.sh</code> 脚本来完成打包替换的过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#! /bin/bash</span></div><div class=\"line\">ROOT=../pdoc/node_modules/gitbook-plugin-polex/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cleanup folder</span></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;ROOT&#125;</span>_assets</div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;ROOT&#125;</span>_layouts</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Recreate folder</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy layouts</span></div><div class=\"line\">cp -R _layouts/ <span class=\"variable\">$&#123;ROOT&#125;</span>_layouts</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy fonts</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/fonts</div><div class=\"line\">cp -R node_modules/font-awesome/fonts/ <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/fonts/fontawesome/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Packaged via Gulp</span></div><div class=\"line\">cross-env NODE_ENV=development gulp build</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy images if they exist</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/images</div><div class=\"line\">imgs=`du -k <span class=\"string\">\"src/images\"</span> | cut -f 1` </div><div class=\"line\">zero=0</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$imgs</span> -gt <span class=\"variable\">$zero</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">cp src/images/*.* <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/images/</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"没有图片要复制.\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"自动扫描目录生成SUMMARY-md文件\"><a href=\"#自动扫描目录生成SUMMARY-md文件\" class=\"headerlink\" title=\"自动扫描目录生成SUMMARY.md文件\"></a>自动扫描目录生成SUMMARY.md文件</h2><h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><ul>\n<li>扫描文件目录,获取文件列表</li>\n<li>循环文件列表读取文件内容<ul>\n<li>将文件内容拆分成行</li>\n<li>正则匹配标题行<ul>\n<li>获取标题深度</li>\n<li>生成hash锚点</li>\n</ul>\n</li>\n<li>重新写入生成后的内容到md文件</li>\n<li>根据标题/标题深度/锚点生成SUMMARY.md结构描述文件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>);   <span class=\"comment\">// file scanner lib</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> borschikHash = <span class=\"built_in\">require</span>(<span class=\"string\">'borschik-hash'</span>);  <span class=\"comment\">// hash generator lib</span></div><div class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/server.json'</span>);    <span class=\"comment\">// locale config</span></div><div class=\"line\"><span class=\"keyword\">const</span> DOC_DIR = config.build.dirs.subjects;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> titleReg = <span class=\"regexp\">/^#+\\s([^\\n\\&#123;#\\&#125;]+)/gi</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> titleHashReg = <span class=\"regexp\">/\\&#123;#([\\w\\W]+)\\&#125;/</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> structureMetaData = [];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * generate the content of summary.md</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> generateContent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (structureMetaData.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> contentArr = [<span class=\"string\">'# SUMMARY\\n\\n'</span>];</div><div class=\"line\">    <span class=\"keyword\">let</span> _index = contentArr.length;</div><div class=\"line\">    structureMetaData.forEach(<span class=\"function\"><span class=\"params\">meta</span> =&gt;</span> &#123;</div><div class=\"line\">      contentArr[_index++] = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"string\">' '</span>.repeat(meta[<span class=\"string\">'depth'</span>] * <span class=\"number\">4</span>)&#125;</span>`</span>; <span class=\"comment\">// indents of menu depth level</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (meta.hash) &#123;</div><div class=\"line\">        contentArr[_index++] = <span class=\"string\">`* [<span class=\"subst\">$&#123;meta.title&#125;</span>](./<span class=\"subst\">$&#123;meta.filepath&#125;</span>#<span class=\"subst\">$&#123;meta.hash&#125;</span>)`</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        contentArr[_index++] = <span class=\"string\">`* [<span class=\"subst\">$&#123;meta.title&#125;</span>](./<span class=\"subst\">$&#123;meta.filepath&#125;</span>)`</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      contentArr[_index++] = <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> contentArr.join(<span class=\"string\">''</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`未读取到有效的 markdown 目录结构信息.`</span>);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Rewrite the content into file</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; filepath</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; content</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; encoding</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> rewriteFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filepath, content = <span class=\"string\">''</span>, encoding = <span class=\"string\">'utf-8'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fs.existsSync(filepath)) &#123;</div><div class=\"line\">      fs.unlinkSync(filepath);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(e.message);</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    fs.writeFile(filepath, content, encoding, (err) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err.message);</div><div class=\"line\">        process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Create summary.md</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> generateSummaryFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> filepath = path.join(__dirname, DOC_DIR, <span class=\"string\">'SUMMARY.md'</span>);</div><div class=\"line\">  rewriteFile(filepath, generateContent());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">glob(<span class=\"string\">\"**/*.md\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(err.message);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    files.forEach(<span class=\"function\"><span class=\"params\">filepath</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> absoluteFilePath = path.join(__dirname, DOC_DIR, filepath);</div><div class=\"line\">      <span class=\"keyword\">let</span> originContent = fs.readFileSync(absoluteFilePath, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * If the content is not empty,</span></div><div class=\"line\"><span class=\"comment\">       * try to split it into lines.</span></div><div class=\"line\"><span class=\"comment\">       * then get the titleReg-matched lines,</span></div><div class=\"line\"><span class=\"comment\">       * ensure that each of them has an unique anchor name,</span></div><div class=\"line\"><span class=\"comment\">       * no matter whether they were linked or not,</span></div><div class=\"line\"><span class=\"comment\">       * cause we need 2 generate the summary menus and they need hash</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (originContent.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> lines = originContent.split(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> newLines = lines.map(<span class=\"function\"><span class=\"params\">lineContent</span> =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> title = filepath.split(<span class=\"string\">'/'</span>).reverse()[<span class=\"number\">0</span>];</div><div class=\"line\">          <span class=\"keyword\">let</span> hash = <span class=\"literal\">null</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> depth = <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> _title = titleReg.exec(lineContent);</div><div class=\"line\">          <span class=\"keyword\">let</span> _hash = titleHashReg.exec(lineContent);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (_title &amp;&amp; _title.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// depth begins from 0</span></div><div class=\"line\">            <span class=\"comment\">// which means it is just one less than the amount of '#' in front of the line</span></div><div class=\"line\">            depth = _title[<span class=\"number\">0</span>].split(<span class=\"regexp\">/\\s/ig</span>)[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</div><div class=\"line\">            title = _title[_title.length - <span class=\"number\">1</span>].trim();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// generate the hash anchors for the titles those don't have any anchor</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (_hash &amp;&amp; _hash.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              hash = _hash[_hash.length - <span class=\"number\">1</span>].trim();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"comment\">// append the hash code to the end of line</span></div><div class=\"line\">              hash = borschikHash(title);</div><div class=\"line\">              lineContent = <span class=\"string\">`<span class=\"subst\">$&#123;lineContent&#125;</span> &#123;#<span class=\"subst\">$&#123;hash&#125;</span>&#125;`</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// the meta data of the structures for the summary.md</span></div><div class=\"line\">            structureMetaData[structureMetaData.length] = &#123;</div><div class=\"line\">              filepath,</div><div class=\"line\">              title,</div><div class=\"line\">              depth,</div><div class=\"line\">              hash</div><div class=\"line\">            &#125;;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> lineContent;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// rewirte the new content into file</span></div><div class=\"line\">        <span class=\"keyword\">let</span> fileContent = newLines.join(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">        rewriteFile(filepath, fileContent);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    generateSummaryFile();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gitbook-website-主题定制化\"><a href=\"#Gitbook-website-主题定制化\" class=\"headerlink\" title=\"Gitbook website 主题定制化\"></a>Gitbook website 主题定制化</h1><h2 id=\"Gitbook的文档组织结构的定制\"><a href=\"#Gitbook的文档组织结构的定制\" class=\"headerlink\" title=\"Gitbook的文档组织结构的定制\"></a>Gitbook的文档组织结构的定制</h2><p>在文档源文件根目录里的 <code>SUMMARY.md</code> 作为目录结构的载体,生成左侧的book_summary块,模板会遍历Summary中定义的parts,对于每个part里的articles通过一个递归方法去生成菜单.想要针对菜单不同层级做定制式的处理,可以从此处入手修改.</p>\n<blockquote>\n<p>如果只是需要做css定制而不希望改变DOM结构的话,可以借助菜单节点的 <code>data-level</code> 属性去实现.</p>\n</blockquote>\n<p>以default-theme为例<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% for part in summary.parts %&#125;</div><div class=\"line\">    &#123;% if part.title %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>&#123;&#123; part.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% elif not loop.first %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% endif %&#125;</div><div class=\"line\">    &#123;&#123; articles(part.articles, file, config) &#125;&#125;</div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% macro articles(_articles) %&#125;</div><div class=\"line\">    &#123;% for article in _articles %&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chapter &#123;% if article.path == file.path and not article.anchor %&#125;active&#123;% endif %&#125;\"</span> <span class=\"attr\">data-level</span>=<span class=\"string\">\"&#123;&#123; article.level &#125;&#125;\"</span> &#123;% <span class=\"attr\">if</span> <span class=\"attr\">article.path</span> %&#125;<span class=\"attr\">data-path</span>=<span class=\"string\">\"&#123;&#123; article.path|resolveFile &#125;&#125;\"</span>&#123;% <span class=\"attr\">endif</span> %&#125;&gt;</span></div><div class=\"line\">            &#123;% if article.path and getPageByPath(article.path) %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; article.path|resolveFile &#125;&#125;&#123;&#123; article.anchor &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            &#123;% elif article.url %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; article.url &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            &#123;% else %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\">                    &#123;% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %&#125;</div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; article.level &#125;&#125;.<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">                    &#123;% endif %&#125;</div><div class=\"line\">                    &#123;&#123; article.title &#125;&#125;</div><div class=\"line\">            &#123;% if article.path  or article.url %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            &#123;% else %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\"></div><div class=\"line\">            &#123;% if article.articles.length &gt; 0 %&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"articles\"</span>&gt;</span></div><div class=\"line\">                &#123;&#123; articles(article.articles, file, config) &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            &#123;% endif %&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>Gitbook默认的Theme提供了style自定义的功能.</p>\n<p>其配置定义如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"gitbook\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"styles\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"object\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Custom Stylesheets\"</span>,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"website\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for website output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/website.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"pdf\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for PDF output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/pdf.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"epub\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for ePub output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/epub.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"mobi\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for Mobi output\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/mobi.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"ebook\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet for ebook outputs (PDF, ePub, Mobi)\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/ebook.css\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"print\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Stylesheet to replace default ebook css\"</span>,</div><div class=\"line\">            <span class=\"string\">\"default\"</span>: <span class=\"string\">\"styles/print.css\"</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"showLevel\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"boolean\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Show level indicator in TOC\"</span>,</div><div class=\"line\">        <span class=\"string\">\"default\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>可以在自己项目中的book.json中做自定义配置,譬如我希望使用项目根目录名为 <code>websiteStyle.css</code> 的样式文件覆盖默认主题在生成website时的部分样式,就可以:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"styles\"</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">\"website\"</span>:<span class=\"string\">\"./websiteStyle.css\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    // ---忽略下面的部分---</div><div class=\"line\">    \"plugins\": [</div><div class=\"line\">        \"-sharing\",</div><div class=\"line\">        \"-fontsettings\",</div><div class=\"line\">        \"-search\",</div><div class=\"line\">        <span class=\"string\">\"-lunr\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一来,我们在此配置的css就会作为站点样式在默认的样式之后加载.可以覆盖默认的css样式以达到自定义的目的.</p>\n<h2 id=\"插件的形式定制新的Theme主题\"><a href=\"#插件的形式定制新的Theme主题\" class=\"headerlink\" title=\"插件的形式定制新的Theme主题\"></a>插件的形式定制新的Theme主题</h2><blockquote>\n<p>下面示例使用github repo的形式创建一个gitbook的插件</p>\n</blockquote>\n<ul>\n<li>首先,我们需要创建一个新的repo,然后在其中<code>npm init</code>初始化<code>package.json</code>配置文件.</li>\n</ul>\n<p>注意该配置文件中必须在<code>engines</code>中指明<code>gitbook</code>的版本<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"engines\": &#123;</div><div class=\"line\">    \"gitbook\": \"&gt;=3.2.2\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你想要自定义一些配置节点也可以在<code>package.json</code>中声明.<br>譬如,现在需要一个keywords的配置,是一个字符串值,用来指定页面渲染后的meta中的keywords,那么我们可以写作:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">   \t\"gitbook\":&#123;</div><div class=\"line\">\t\"properties\":&#123;</div><div class=\"line\">\t\t\"keywords\":&#123;</div><div class=\"line\">\t\t\t\"type\":\"string\",</div><div class=\"line\">\t\t\t\"default\":\"\",</div><div class=\"line\">\t\t\t\"description\":\"meta keywords config\"</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>接下来在入口文件中可以使用插件机制提供的hook来获取指定的config:</li>\n</ul>\n<p>index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    hooks: &#123;</div><div class=\"line\">        config: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`config hook~\\nconfig.keywords has a value:<span class=\"subst\">$&#123;config[<span class=\"string\">'keywords'</span>]&#125;</span>`</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> config</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>现在将这个简单的插件push到github,然后就可以在gitbook项目中使用了.我们只需要在项目的<code>book.json</code>中添加如下配置:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"plugins\":[\"name@git+https://github.com/username/repo-name.git\"]</div></pre></td></tr></table></figure>\n<p>接下来,在<code>book.json</code>当前目录<code>gitbook install</code>安装该插件<br>插件安装完成后 <code>gitbook serve</code>启动服务器就可以按到我们的插件已经正常运行了</p>\n<h2 id=\"提高开发时的效率\"><a href=\"#提高开发时的效率\" class=\"headerlink\" title=\"提高开发时的效率\"></a>提高开发时的效率</h2><p>虽然,上面我们使用了gitbook自带的插件机制将自定义的部分作为一个单独的插件库.<br>但是实际上开发的时候还是会感觉非常麻烦.<br>比如我改动一些样式,就必须要打包上传到github,然后到gitbook的项目中更新插件引用,然后再在本地host查看效果.</p>\n<p>这样的一套流程显然是不能够满足我们的开发需求的.<br>所以需要在 <code>plugin</code> 项目中用gulp创建一个开发时的 watch 任务,监视开发目录的文件变动,然后打包替换到 <code>gitbook</code> 项目里的 <code>_book(默认的host目录)/gitbook/</code> 目录.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-postcss'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-stream'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> cssMinify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> through = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> PATHS = &#123;</div><div class=\"line\">    SASS: [<span class=\"string\">'./src/scss/style.scss'</span>], <span class=\"comment\">// scss 入口文件</span></div><div class=\"line\">    SASS_ALL: [<span class=\"string\">'./src/scss/**/*'</span>],</div><div class=\"line\">    SCRIPTS: [<span class=\"string\">'./src/js/**/index.js'</span>],</div><div class=\"line\">    SCRIPTS_ALL: [<span class=\"string\">'./src/js/**/*'</span>],</div><div class=\"line\">    production: <span class=\"string\">'./_assets/website/'</span>,</div><div class=\"line\">    development: <span class=\"string\">'../pdoc/node_modules/gitbook-plugin-polex/_assets/website/'</span>,</div><div class=\"line\">    debug: <span class=\"string\">'../pdoc/_book/gitbook/'</span>, <span class=\"comment\">// 只适用在开发调试过程中 不需要重新host gitbook</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> getPath = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> ret = PATHS[process.env.NODE_ENV]</div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'compileSass'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> plugins = [autoprefixer(&#123;</div><div class=\"line\">        browsers: [</div><div class=\"line\">            <span class=\"string\">\"android 4\"</span>,</div><div class=\"line\">            <span class=\"string\">\"iOS 6\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;)]</div><div class=\"line\">    gulp.src(PATHS.SASS)</div><div class=\"line\">        .pipe(sass().on(<span class=\"string\">'error'</span>, sass.logError))</div><div class=\"line\">        .pipe(postcss(plugins))</div><div class=\"line\">        .pipe(cssMinify())</div><div class=\"line\">        .pipe(gulp.dest(getPath()))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'compileScript'</span>, () =&gt; &#123;</div><div class=\"line\">    gulp.src(PATHS.SCRIPTS)</div><div class=\"line\">        .pipe(through.obj(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file, enc, cb</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> __filename = file.path.split(<span class=\"string\">'\\\\'</span>).reverse()[<span class=\"number\">1</span>]</div><div class=\"line\">            gulp.src(file.path)</div><div class=\"line\">                .pipe(webpack(&#123;</div><div class=\"line\">                    output: &#123;</div><div class=\"line\">                        filename: __filename === <span class=\"string\">'core'</span> ? <span class=\"string\">'gitbook.js'</span> : <span class=\"string\">'theme.js'</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">                        loaders: [&#123;</div><div class=\"line\">                            test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">                            exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                            loader: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                            query: &#123;</div><div class=\"line\">                                presets: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;]</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;))</div><div class=\"line\">                .pipe(gulp.dest(getPath()))</div><div class=\"line\">            cb()</div><div class=\"line\">        &#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'compileSass'</span>, <span class=\"string\">'compileScript'</span>])</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'compileSass'</span>, <span class=\"string\">'compileScript'</span>], () =&gt; &#123;</div><div class=\"line\">    gulp.watch(PATHS.SASS_ALL, [<span class=\"string\">'compileSass'</span>])</div><div class=\"line\">    gulp.watch(PATHS.SCRIPTS_ALL, [<span class=\"string\">'compileScript'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在 <code>src/</code> 目录创建一个 <code>build.dev.sh</code> 脚本来完成打包替换的过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#! /bin/bash</span></div><div class=\"line\">ROOT=../pdoc/node_modules/gitbook-plugin-polex/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cleanup folder</span></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;ROOT&#125;</span>_assets</div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;ROOT&#125;</span>_layouts</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Recreate folder</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy layouts</span></div><div class=\"line\">cp -R _layouts/ <span class=\"variable\">$&#123;ROOT&#125;</span>_layouts</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy fonts</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/fonts</div><div class=\"line\">cp -R node_modules/font-awesome/fonts/ <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/fonts/fontawesome/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Packaged via Gulp</span></div><div class=\"line\">cross-env NODE_ENV=development gulp build</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Copy images if they exist</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/images</div><div class=\"line\">imgs=`du -k <span class=\"string\">\"src/images\"</span> | cut -f 1` </div><div class=\"line\">zero=0</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$imgs</span> -gt <span class=\"variable\">$zero</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">cp src/images/*.* <span class=\"variable\">$&#123;ROOT&#125;</span>_assets/website/images/</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"没有图片要复制.\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"自动扫描目录生成SUMMARY-md文件\"><a href=\"#自动扫描目录生成SUMMARY-md文件\" class=\"headerlink\" title=\"自动扫描目录生成SUMMARY.md文件\"></a>自动扫描目录生成SUMMARY.md文件</h2><h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><ul>\n<li>扫描文件目录,获取文件列表</li>\n<li>循环文件列表读取文件内容<ul>\n<li>将文件内容拆分成行</li>\n<li>正则匹配标题行<ul>\n<li>获取标题深度</li>\n<li>生成hash锚点</li>\n</ul>\n</li>\n<li>重新写入生成后的内容到md文件</li>\n<li>根据标题/标题深度/锚点生成SUMMARY.md结构描述文件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>);   <span class=\"comment\">// file scanner lib</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> borschikHash = <span class=\"built_in\">require</span>(<span class=\"string\">'borschik-hash'</span>);  <span class=\"comment\">// hash generator lib</span></div><div class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/server.json'</span>);    <span class=\"comment\">// locale config</span></div><div class=\"line\"><span class=\"keyword\">const</span> DOC_DIR = config.build.dirs.subjects;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> titleReg = <span class=\"regexp\">/^#+\\s([^\\n\\&#123;#\\&#125;]+)/gi</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> titleHashReg = <span class=\"regexp\">/\\&#123;#([\\w\\W]+)\\&#125;/</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> structureMetaData = [];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * generate the content of summary.md</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> generateContent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (structureMetaData.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> contentArr = [<span class=\"string\">'# SUMMARY\\n\\n'</span>];</div><div class=\"line\">    <span class=\"keyword\">let</span> _index = contentArr.length;</div><div class=\"line\">    structureMetaData.forEach(<span class=\"function\"><span class=\"params\">meta</span> =&gt;</span> &#123;</div><div class=\"line\">      contentArr[_index++] = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"string\">' '</span>.repeat(meta[<span class=\"string\">'depth'</span>] * <span class=\"number\">4</span>)&#125;</span>`</span>; <span class=\"comment\">// indents of menu depth level</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (meta.hash) &#123;</div><div class=\"line\">        contentArr[_index++] = <span class=\"string\">`* [<span class=\"subst\">$&#123;meta.title&#125;</span>](./<span class=\"subst\">$&#123;meta.filepath&#125;</span>#<span class=\"subst\">$&#123;meta.hash&#125;</span>)`</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        contentArr[_index++] = <span class=\"string\">`* [<span class=\"subst\">$&#123;meta.title&#125;</span>](./<span class=\"subst\">$&#123;meta.filepath&#125;</span>)`</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      contentArr[_index++] = <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> contentArr.join(<span class=\"string\">''</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`未读取到有效的 markdown 目录结构信息.`</span>);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Rewrite the content into file</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; filepath</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; content</span></div><div class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; encoding</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> rewriteFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filepath, content = <span class=\"string\">''</span>, encoding = <span class=\"string\">'utf-8'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fs.existsSync(filepath)) &#123;</div><div class=\"line\">      fs.unlinkSync(filepath);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(e.message);</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    fs.writeFile(filepath, content, encoding, (err) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err.message);</div><div class=\"line\">        process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Create summary.md</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">let</span> generateSummaryFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> filepath = path.join(__dirname, DOC_DIR, <span class=\"string\">'SUMMARY.md'</span>);</div><div class=\"line\">  rewriteFile(filepath, generateContent());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">glob(<span class=\"string\">\"**/*.md\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(err.message);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    files.forEach(<span class=\"function\"><span class=\"params\">filepath</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> absoluteFilePath = path.join(__dirname, DOC_DIR, filepath);</div><div class=\"line\">      <span class=\"keyword\">let</span> originContent = fs.readFileSync(absoluteFilePath, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * If the content is not empty,</span></div><div class=\"line\"><span class=\"comment\">       * try to split it into lines.</span></div><div class=\"line\"><span class=\"comment\">       * then get the titleReg-matched lines,</span></div><div class=\"line\"><span class=\"comment\">       * ensure that each of them has an unique anchor name,</span></div><div class=\"line\"><span class=\"comment\">       * no matter whether they were linked or not,</span></div><div class=\"line\"><span class=\"comment\">       * cause we need 2 generate the summary menus and they need hash</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (originContent.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> lines = originContent.split(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> newLines = lines.map(<span class=\"function\"><span class=\"params\">lineContent</span> =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> title = filepath.split(<span class=\"string\">'/'</span>).reverse()[<span class=\"number\">0</span>];</div><div class=\"line\">          <span class=\"keyword\">let</span> hash = <span class=\"literal\">null</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> depth = <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> _title = titleReg.exec(lineContent);</div><div class=\"line\">          <span class=\"keyword\">let</span> _hash = titleHashReg.exec(lineContent);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (_title &amp;&amp; _title.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// depth begins from 0</span></div><div class=\"line\">            <span class=\"comment\">// which means it is just one less than the amount of '#' in front of the line</span></div><div class=\"line\">            depth = _title[<span class=\"number\">0</span>].split(<span class=\"regexp\">/\\s/ig</span>)[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</div><div class=\"line\">            title = _title[_title.length - <span class=\"number\">1</span>].trim();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// generate the hash anchors for the titles those don't have any anchor</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (_hash &amp;&amp; _hash.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              hash = _hash[_hash.length - <span class=\"number\">1</span>].trim();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"comment\">// append the hash code to the end of line</span></div><div class=\"line\">              hash = borschikHash(title);</div><div class=\"line\">              lineContent = <span class=\"string\">`<span class=\"subst\">$&#123;lineContent&#125;</span> &#123;#<span class=\"subst\">$&#123;hash&#125;</span>&#125;`</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// the meta data of the structures for the summary.md</span></div><div class=\"line\">            structureMetaData[structureMetaData.length] = &#123;</div><div class=\"line\">              filepath,</div><div class=\"line\">              title,</div><div class=\"line\">              depth,</div><div class=\"line\">              hash</div><div class=\"line\">            &#125;;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> lineContent;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// rewirte the new content into file</span></div><div class=\"line\">        <span class=\"keyword\">let</span> fileContent = newLines.join(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">        rewriteFile(filepath, fileContent);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    generateSummaryFile();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Chat聊天服务器架设历程","date":"2016-01-21T04:26:03.000Z","_content":"\n# Chat聊天服务器架设历程 #\n----------\n## 2015年11月3日 13:16:20 在Github上找到了Lets chat项目 ##\n\n**首先安装了说明上的依赖**  \n\nnodejs 0.10+  \nMongoDB 2.6+  \nPython 2.7.x\n\n**然后将项目clone到本地目录**  \n\ngit clone https://github.com/sdelements/lets-chat.git\n\n**安装项目依赖**  \n\ncd lets-chat  \n\nnpm install\n\n<!--more-->\n\n**npm install 出现错误**  \n\n执行python 失败  \n\n在系统环境变量中指定了python的安装目录\n\n**然后npm install 成功**\n\n复制设置文件\n**cp settings.yml.sample settings.yml**\n\n然后执行\n**git pull 成功**\nnpm run-script migrate 报错\n\n\n> 错误是Window Script Host  \n> 脚本 D:\\xxx\\migroose.js  \n> 行 3  \n> 字符 1  \n> 错误 缺少对象  \n> 代码 800A138F  \n> 源 Microsoft JScript 运行时错误\n\n找到对应的[项目ISSUS](https://github.com/sdelements/lets-chat/issues/569 \"项目ISSUS\")\n\n> hhaidar建议尝试使用 vagrant 或者 docker\n\n然而**本地情况是mongoDB 无法正常连接**  即在cmd中键入 mongo 执行后出错\n\n> 2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not\n> installed, will zero-out data files\n> MongoDB shell version: 3.0.7\n> connecting to: test\n> 2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re\n> ason: errno:10061 由于目标计算机积极拒绝，无法连接。\n> 2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn't connect to server 127.0.\n> 0.1:27017 (127.0.0.1), connection attempt failed\n>     at connect (src/mongo/shell/mongo.js:179:14)\n>     at (connect):1:6 at src/mongo/shell/mongo.js:179\n> exception: connect failed\n\n在cnBlog找到了一篇windows下注册mongoDB服务的文章\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)\n> `mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n然后**cmd中可以正常链接到本地mongodb**\n\n然而错误依旧是在migroose文件的第三行\n\n    'use strict';\n\n    var mongoose = require('mongoose'),\t//require出错\n    settings = require('./app/config'),\n    migroose = require('migroose'),\n    Runner = require('migroose-cli/cli/runner/index');\n\n到最后也没找到什么解决办法,也懒得找了\n\n## 2016年1月3日23:25:51 重新使用 `nodejs express jade socket.io` 创建了聊天室项目 ##\n\n在使用`express-session`中间件时 选择了redis作为sessionStore\n于是安装了tj大神的`connect-redis`组件\n结果在运行时 向session中写入user信息时报错\n\n  ```\n  Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n    at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)\n    at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)\n    at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)\n    at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)\n    at Socket.<anonymous> (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\n  ```\n去查了一下,多半的人都是说\n>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.\n\n>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : `stop-writes-on-bgsave-error no`\n\n我去看了一下本地redis服务的配置文件\n\n  ```\n      ################################ SNAPSHOTTING  ################################\n    #\n    # Save the DB on disk:\n    #\n    #   save <seconds> <changes>\n    #\n    #   Will save the DB if both the given number of seconds and the given\n    #   number of write operations against the DB occurred.\n    #\n    #   In the example below the behaviour will be to save:\n    #   after 900 sec (15 min) if at least 1 key changed\n    #   after 300 sec (5 min) if at least 10 keys changed\n    #   after 60 sec if at least 10000 keys changed\n    #\n    #   Note: you can disable saving completely by commenting out all \"save\" lines.\n    #\n    #   It is also possible to remove all the previously configured save\n    #   points by adding a save directive with a single empty string argument\n    #   like in the following example:\n    #\n    #   save \"\"\n\n    save 900 1\n    save 300 10\n    save 60 10000\n\n    # By default Redis will stop accepting writes if RDB snapshots are enabled\n    # (at least one save point) and the latest background save failed.\n    # This will make the user aware (in a hard way) that data is not persisting\n    # on disk properly, otherwise chances are that no one will notice and some\n    # disaster will happen.\n    #\n    # If the background saving process will start working again Redis will\n    # automatically allow writes again.\n    #\n    # However if you have setup your proper monitoring of the Redis server\n    # and persistence, you may want to disable this feature so that Redis will\n    # continue to work as usual even if there are problems with disk,\n    # permissions, and so forth.\n    stop-writes-on-bgsave-error yes\n  ```\n首先,前面是数据快照的策略配置,默认\n  - 至少1次更改,将于900秒后存储快照\n  - 至少10次更改,将于300秒后存储快照\n  - 至少10000次更改,将于60秒后存储快照\n\n下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.\n\n然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云...\n\n接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为`no`\n\n> 我查看了一下本机内存是没有问题的 硬盘就更不用说了\n\n> 所以肯定不是因为内存不够的原因导致的\n\n> 于是我在cmd里运行redis-server\n\n  ```\n  [7312] 03 Jan 23:38:08.472 #\n  The Windows version of Redis allocates a memory mapped heap for sharing with\n  the forked process used for persistence operations. In order to share this\n  memory, Windows allocates from the system paging file a portion equal to the\n  size of the Redis heap. At this time there is insufficient contiguous free\n  space available in the system paging file for this operation (Windows error\n  0x5AF). To work around this you may either increase the size of the system\n  paging file, or decrease the size of the Redis heap with the --maxheap flag.\n  Sometimes a reboot will defragment the system paging file sufficiently for\n  this operation to complete successfully.\n\n  Please see the documentation included with the binary distributions for more\n  details on the --maxheap flag.\n\n  Redis can not continue. Exiting.\n  ```\n\n从上面的错误来看,应该*decrease maxheap*,**我猜有可能是windows下默认的maxheap超过了阈值**\n\n决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了*maxheap 1.5gb/ maxmemory 1gb*,再启动服务就好了...\n","source":"_posts/Chat Server.md","raw":"---\ntitle: Chat聊天服务器架设历程\ndate: 2016-1-21 12:26:03\ntags: javascript \n---\n\n# Chat聊天服务器架设历程 #\n----------\n## 2015年11月3日 13:16:20 在Github上找到了Lets chat项目 ##\n\n**首先安装了说明上的依赖**  \n\nnodejs 0.10+  \nMongoDB 2.6+  \nPython 2.7.x\n\n**然后将项目clone到本地目录**  \n\ngit clone https://github.com/sdelements/lets-chat.git\n\n**安装项目依赖**  \n\ncd lets-chat  \n\nnpm install\n\n<!--more-->\n\n**npm install 出现错误**  \n\n执行python 失败  \n\n在系统环境变量中指定了python的安装目录\n\n**然后npm install 成功**\n\n复制设置文件\n**cp settings.yml.sample settings.yml**\n\n然后执行\n**git pull 成功**\nnpm run-script migrate 报错\n\n\n> 错误是Window Script Host  \n> 脚本 D:\\xxx\\migroose.js  \n> 行 3  \n> 字符 1  \n> 错误 缺少对象  \n> 代码 800A138F  \n> 源 Microsoft JScript 运行时错误\n\n找到对应的[项目ISSUS](https://github.com/sdelements/lets-chat/issues/569 \"项目ISSUS\")\n\n> hhaidar建议尝试使用 vagrant 或者 docker\n\n然而**本地情况是mongoDB 无法正常连接**  即在cmd中键入 mongo 执行后出错\n\n> 2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not\n> installed, will zero-out data files\n> MongoDB shell version: 3.0.7\n> connecting to: test\n> 2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re\n> ason: errno:10061 由于目标计算机积极拒绝，无法连接。\n> 2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn't connect to server 127.0.\n> 0.1:27017 (127.0.0.1), connection attempt failed\n>     at connect (src/mongo/shell/mongo.js:179:14)\n>     at (connect):1:6 at src/mongo/shell/mongo.js:179\n> exception: connect failed\n\n在cnBlog找到了一篇windows下注册mongoDB服务的文章\n\n> **用管理员身份打开cmd** cd mongoDB的bin目录(必须留在该目录)\n> mkdir xxx  创建目录用于存放数据库文件\n> 执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)\n> `mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb`\n> directoryperdb 每个数据库独立目录\n\n然后**cmd中可以正常链接到本地mongodb**\n\n然而错误依旧是在migroose文件的第三行\n\n    'use strict';\n\n    var mongoose = require('mongoose'),\t//require出错\n    settings = require('./app/config'),\n    migroose = require('migroose'),\n    Runner = require('migroose-cli/cli/runner/index');\n\n到最后也没找到什么解决办法,也懒得找了\n\n## 2016年1月3日23:25:51 重新使用 `nodejs express jade socket.io` 创建了聊天室项目 ##\n\n在使用`express-session`中间件时 选择了redis作为sessionStore\n于是安装了tj大神的`connect-redis`组件\n结果在运行时 向session中写入user信息时报错\n\n  ```\n  Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n    at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)\n    at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)\n    at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)\n    at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)\n    at Socket.<anonymous> (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\n  ```\n去查了一下,多半的人都是说\n>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.\n\n>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : `stop-writes-on-bgsave-error no`\n\n我去看了一下本地redis服务的配置文件\n\n  ```\n      ################################ SNAPSHOTTING  ################################\n    #\n    # Save the DB on disk:\n    #\n    #   save <seconds> <changes>\n    #\n    #   Will save the DB if both the given number of seconds and the given\n    #   number of write operations against the DB occurred.\n    #\n    #   In the example below the behaviour will be to save:\n    #   after 900 sec (15 min) if at least 1 key changed\n    #   after 300 sec (5 min) if at least 10 keys changed\n    #   after 60 sec if at least 10000 keys changed\n    #\n    #   Note: you can disable saving completely by commenting out all \"save\" lines.\n    #\n    #   It is also possible to remove all the previously configured save\n    #   points by adding a save directive with a single empty string argument\n    #   like in the following example:\n    #\n    #   save \"\"\n\n    save 900 1\n    save 300 10\n    save 60 10000\n\n    # By default Redis will stop accepting writes if RDB snapshots are enabled\n    # (at least one save point) and the latest background save failed.\n    # This will make the user aware (in a hard way) that data is not persisting\n    # on disk properly, otherwise chances are that no one will notice and some\n    # disaster will happen.\n    #\n    # If the background saving process will start working again Redis will\n    # automatically allow writes again.\n    #\n    # However if you have setup your proper monitoring of the Redis server\n    # and persistence, you may want to disable this feature so that Redis will\n    # continue to work as usual even if there are problems with disk,\n    # permissions, and so forth.\n    stop-writes-on-bgsave-error yes\n  ```\n首先,前面是数据快照的策略配置,默认\n  - 至少1次更改,将于900秒后存储快照\n  - 至少10次更改,将于300秒后存储快照\n  - 至少10000次更改,将于60秒后存储快照\n\n下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.\n\n然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云...\n\n接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为`no`\n\n> 我查看了一下本机内存是没有问题的 硬盘就更不用说了\n\n> 所以肯定不是因为内存不够的原因导致的\n\n> 于是我在cmd里运行redis-server\n\n  ```\n  [7312] 03 Jan 23:38:08.472 #\n  The Windows version of Redis allocates a memory mapped heap for sharing with\n  the forked process used for persistence operations. In order to share this\n  memory, Windows allocates from the system paging file a portion equal to the\n  size of the Redis heap. At this time there is insufficient contiguous free\n  space available in the system paging file for this operation (Windows error\n  0x5AF). To work around this you may either increase the size of the system\n  paging file, or decrease the size of the Redis heap with the --maxheap flag.\n  Sometimes a reboot will defragment the system paging file sufficiently for\n  this operation to complete successfully.\n\n  Please see the documentation included with the binary distributions for more\n  details on the --maxheap flag.\n\n  Redis can not continue. Exiting.\n  ```\n\n从上面的错误来看,应该*decrease maxheap*,**我猜有可能是windows下默认的maxheap超过了阈值**\n\n决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了*maxheap 1.5gb/ maxmemory 1gb*,再启动服务就好了...\n","slug":"Chat Server","published":1,"updated":"2017-09-04T10:06:43.000Z","_id":"cj2lg56530001lwpoo916b3vp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Chat聊天服务器架设历程\"><a href=\"#Chat聊天服务器架设历程\" class=\"headerlink\" title=\"Chat聊天服务器架设历程\"></a>Chat聊天服务器架设历程</h1><hr>\n<h2 id=\"2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\"><a href=\"#2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\" class=\"headerlink\" title=\"2015年11月3日 13:16:20 在Github上找到了Lets chat项目\"></a>2015年11月3日 13:16:20 在Github上找到了Lets chat项目</h2><p><strong>首先安装了说明上的依赖</strong>  </p>\n<p>nodejs 0.10+<br>MongoDB 2.6+<br>Python 2.7.x</p>\n<p><strong>然后将项目clone到本地目录</strong>  </p>\n<p>git clone <a href=\"https://github.com/sdelements/lets-chat.git\">https://github.com/sdelements/lets-chat.git</a></p>\n<p><strong>安装项目依赖</strong>  </p>\n<p>cd lets-chat  </p>\n<p>npm install</p>\n<a id=\"more\"></a>\n<p><strong>npm install 出现错误</strong>  </p>\n<p>执行python 失败  </p>\n<p>在系统环境变量中指定了python的安装目录</p>\n<p><strong>然后npm install 成功</strong></p>\n<p>复制设置文件<br><strong>cp settings.yml.sample settings.yml</strong></p>\n<p>然后执行<br><strong>git pull 成功</strong><br>npm run-script migrate 报错</p>\n<blockquote>\n<p>错误是Window Script Host<br>脚本 D:\\xxx\\migroose.js<br>行 3<br>字符 1<br>错误 缺少对象<br>代码 800A138F<br>源 Microsoft JScript 运行时错误</p>\n</blockquote>\n<p>找到对应的<a href=\"https://github.com/sdelements/lets-chat/issues/569\" title=\"项目ISSUS\">项目ISSUS</a></p>\n<blockquote>\n<p>hhaidar建议尝试使用 vagrant 或者 docker</p>\n</blockquote>\n<p>然而<strong>本地情况是mongoDB 无法正常连接</strong>  即在cmd中键入 mongo 执行后出错</p>\n<blockquote>\n<p>2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not<br>installed, will zero-out data files<br>MongoDB shell version: 3.0.7<br>connecting to: test<br>2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re<br>ason: errno:10061 由于目标计算机积极拒绝，无法连接。<br>2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn’t connect to server 127.0.<br>0.1:27017 (127.0.0.1), connection attempt failed<br>    at connect (src/mongo/shell/mongo.js:179:14)<br>    at (connect):1:6 at src/mongo/shell/mongo.js:179<br>exception: connect failed</p>\n</blockquote>\n<p>在cnBlog找到了一篇windows下注册mongoDB服务的文章</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)<br><code>mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>然后<strong>cmd中可以正常链接到本地mongodb</strong></p>\n<p>然而错误依旧是在migroose文件的第三行</p>\n<pre><code>&apos;use strict&apos;;\n\nvar mongoose = require(&apos;mongoose&apos;),    //require出错\nsettings = require(&apos;./app/config&apos;),\nmigroose = require(&apos;migroose&apos;),\nRunner = require(&apos;migroose-cli/cli/runner/index&apos;);\n</code></pre><p>到最后也没找到什么解决办法,也懒得找了</p>\n<h2 id=\"2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\"><a href=\"#2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\" class=\"headerlink\" title=\"2016年1月3日23:25:51 重新使用 nodejs express jade socket.io 创建了聊天室项目\"></a>2016年1月3日23:25:51 重新使用 <code>nodejs express jade socket.io</code> 创建了聊天室项目</h2><p>在使用<code>express-session</code>中间件时 选择了redis作为sessionStore<br>于是安装了tj大神的<code>connect-redis</code>组件<br>结果在运行时 向session中写入user信息时报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</div><div class=\"line\">  at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)</div><div class=\"line\">  at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)</div><div class=\"line\">  at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)</div><div class=\"line\">  at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)</div><div class=\"line\">  at Socket.&lt;anonymous&gt; (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)</div><div class=\"line\">  at emitOne (events.js:77:13)</div><div class=\"line\">  at Socket.emit (events.js:169:7)</div><div class=\"line\">  at readableAddChunk (_stream_readable.js:146:16)</div><div class=\"line\">  at Socket.Readable.push (_stream_readable.js:110:10)</div><div class=\"line\">  at TCP.onread (net.js:523:20)</div></pre></td></tr></table></figure>\n<p>去查了一下,多半的人都是说</p>\n<blockquote>\n<p>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.</p>\n<p>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : <code>stop-writes-on-bgsave-error no</code></p>\n</blockquote>\n<p>我去看了一下本地redis服务的配置文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ################################ SNAPSHOTTING  ################################</div><div class=\"line\">#</div><div class=\"line\"># Save the DB on disk:</div><div class=\"line\">#</div><div class=\"line\">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\">#</div><div class=\"line\">#   Will save the DB if both the given number of seconds and the given</div><div class=\"line\">#   number of write operations against the DB occurred.</div><div class=\"line\">#</div><div class=\"line\">#   In the example below the behaviour will be to save:</div><div class=\"line\">#   after 900 sec (15 min) if at least 1 key changed</div><div class=\"line\">#   after 300 sec (5 min) if at least 10 keys changed</div><div class=\"line\">#   after 60 sec if at least 10000 keys changed</div><div class=\"line\">#</div><div class=\"line\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</div><div class=\"line\">#</div><div class=\"line\">#   It is also possible to remove all the previously configured save</div><div class=\"line\">#   points by adding a save directive with a single empty string argument</div><div class=\"line\">#   like in the following example:</div><div class=\"line\">#</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"></div><div class=\"line\"># By default Redis will stop accepting writes if RDB snapshots are enabled</div><div class=\"line\"># (at least one save point) and the latest background save failed.</div><div class=\"line\"># This will make the user aware (in a hard way) that data is not persisting</div><div class=\"line\"># on disk properly, otherwise chances are that no one will notice and some</div><div class=\"line\"># disaster will happen.</div><div class=\"line\">#</div><div class=\"line\"># If the background saving process will start working again Redis will</div><div class=\"line\"># automatically allow writes again.</div><div class=\"line\">#</div><div class=\"line\"># However if you have setup your proper monitoring of the Redis server</div><div class=\"line\"># and persistence, you may want to disable this feature so that Redis will</div><div class=\"line\"># continue to work as usual even if there are problems with disk,</div><div class=\"line\"># permissions, and so forth.</div><div class=\"line\">stop-writes-on-bgsave-error yes</div></pre></td></tr></table></figure>\n<p>首先,前面是数据快照的策略配置,默认</p>\n<ul>\n<li>至少1次更改,将于900秒后存储快照</li>\n<li>至少10次更改,将于300秒后存储快照</li>\n<li>至少10000次更改,将于60秒后存储快照</li>\n</ul>\n<p>下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.</p>\n<p>然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云…</p>\n<p>接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为<code>no</code></p>\n<blockquote>\n<p>我查看了一下本机内存是没有问题的 硬盘就更不用说了</p>\n<p>所以肯定不是因为内存不够的原因导致的</p>\n<p>于是我在cmd里运行redis-server</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[7312] 03 Jan 23:38:08.472 #</div><div class=\"line\">The Windows version of Redis allocates a memory mapped heap for sharing with</div><div class=\"line\">the forked process used for persistence operations. In order to share this</div><div class=\"line\">memory, Windows allocates from the system paging file a portion equal to the</div><div class=\"line\">size of the Redis heap. At this time there is insufficient contiguous free</div><div class=\"line\">space available in the system paging file for this operation (Windows error</div><div class=\"line\">0x5AF). To work around this you may either increase the size of the system</div><div class=\"line\">paging file, or decrease the size of the Redis heap with the --maxheap flag.</div><div class=\"line\">Sometimes a reboot will defragment the system paging file sufficiently for</div><div class=\"line\">this operation to complete successfully.</div><div class=\"line\"></div><div class=\"line\">Please see the documentation included with the binary distributions for more</div><div class=\"line\">details on the --maxheap flag.</div><div class=\"line\"></div><div class=\"line\">Redis can not continue. Exiting.</div></pre></td></tr></table></figure>\n<p>从上面的错误来看,应该<em>decrease maxheap</em>,<strong>我猜有可能是windows下默认的maxheap超过了阈值</strong></p>\n<p>决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了<em>maxheap 1.5gb/ maxmemory 1gb</em>,再启动服务就好了…</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Chat聊天服务器架设历程\"><a href=\"#Chat聊天服务器架设历程\" class=\"headerlink\" title=\"Chat聊天服务器架设历程\"></a>Chat聊天服务器架设历程</h1><hr>\n<h2 id=\"2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\"><a href=\"#2015年11月3日-13-16-20-在Github上找到了Lets-chat项目\" class=\"headerlink\" title=\"2015年11月3日 13:16:20 在Github上找到了Lets chat项目\"></a>2015年11月3日 13:16:20 在Github上找到了Lets chat项目</h2><p><strong>首先安装了说明上的依赖</strong>  </p>\n<p>nodejs 0.10+<br>MongoDB 2.6+<br>Python 2.7.x</p>\n<p><strong>然后将项目clone到本地目录</strong>  </p>\n<p>git clone <a href=\"https://github.com/sdelements/lets-chat.git\">https://github.com/sdelements/lets-chat.git</a></p>\n<p><strong>安装项目依赖</strong>  </p>\n<p>cd lets-chat  </p>\n<p>npm install</p>","more":"<p><strong>npm install 出现错误</strong>  </p>\n<p>执行python 失败  </p>\n<p>在系统环境变量中指定了python的安装目录</p>\n<p><strong>然后npm install 成功</strong></p>\n<p>复制设置文件<br><strong>cp settings.yml.sample settings.yml</strong></p>\n<p>然后执行<br><strong>git pull 成功</strong><br>npm run-script migrate 报错</p>\n<blockquote>\n<p>错误是Window Script Host<br>脚本 D:\\xxx\\migroose.js<br>行 3<br>字符 1<br>错误 缺少对象<br>代码 800A138F<br>源 Microsoft JScript 运行时错误</p>\n</blockquote>\n<p>找到对应的<a href=\"https://github.com/sdelements/lets-chat/issues/569\" title=\"项目ISSUS\">项目ISSUS</a></p>\n<blockquote>\n<p>hhaidar建议尝试使用 vagrant 或者 docker</p>\n</blockquote>\n<p>然而<strong>本地情况是mongoDB 无法正常连接</strong>  即在cmd中键入 mongo 执行后出错</p>\n<blockquote>\n<p>2015-11-03T13:31:04.068+0800 I CONTROL  Hotfix KB2731284 or later update is not<br>installed, will zero-out data files<br>MongoDB shell version: 3.0.7<br>connecting to: test<br>2015-11-03T13:31:05.128+0800 W NETWORK  Failed to connect to 127.0.0.1:27017, re<br>ason: errno:10061 由于目标计算机积极拒绝，无法连接。<br>2015-11-03T13:31:05.133+0800 E QUERY    Error: couldn’t connect to server 127.0.<br>0.1:27017 (127.0.0.1), connection attempt failed<br>    at connect (src/mongo/shell/mongo.js:179:14)<br>    at (connect):1:6 at src/mongo/shell/mongo.js:179<br>exception: connect failed</p>\n</blockquote>\n<p>在cnBlog找到了一篇windows下注册mongoDB服务的文章</p>\n<blockquote>\n<p><strong>用管理员身份打开cmd</strong> cd mongoDB的bin目录(必须留在该目录)<br>mkdir xxx  创建目录用于存放数据库文件<br>执行指令(注意logpath指向文件 dbpath指向目录 都是绝对路径)<br><code>mongod --install --serviceName 服务名称 --serviceDisplayName 显示名称 --logpath xxxx --dbpath xxx --directoryperdb</code><br>directoryperdb 每个数据库独立目录</p>\n</blockquote>\n<p>然后<strong>cmd中可以正常链接到本地mongodb</strong></p>\n<p>然而错误依旧是在migroose文件的第三行</p>\n<pre><code>&apos;use strict&apos;;\n\nvar mongoose = require(&apos;mongoose&apos;),    //require出错\nsettings = require(&apos;./app/config&apos;),\nmigroose = require(&apos;migroose&apos;),\nRunner = require(&apos;migroose-cli/cli/runner/index&apos;);\n</code></pre><p>到最后也没找到什么解决办法,也懒得找了</p>\n<h2 id=\"2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\"><a href=\"#2016年1月3日23-25-51-重新使用-nodejs-express-jade-socket-io-创建了聊天室项目\" class=\"headerlink\" title=\"2016年1月3日23:25:51 重新使用 nodejs express jade socket.io 创建了聊天室项目\"></a>2016年1月3日23:25:51 重新使用 <code>nodejs express jade socket.io</code> 创建了聊天室项目</h2><p>在使用<code>express-session</code>中间件时 选择了redis作为sessionStore<br>于是安装了tj大神的<code>connect-redis</code>组件<br>结果在运行时 向session中写入user信息时报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</div><div class=\"line\">  at JavascriptReplyParser._parseResult (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:43:16)</div><div class=\"line\">  at JavascriptReplyParser.try_parsing (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:114:21)</div><div class=\"line\">  at JavascriptReplyParser.run (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:126:22)</div><div class=\"line\">  at JavascriptReplyParser.execute (e:\\Github\\NodeDataServer\\node_modules\\redis\\lib\\parsers\\javascript.js:107:10)</div><div class=\"line\">  at Socket.&lt;anonymous&gt; (e:\\Github\\NodeDataServer\\node_modules\\redis\\index.js:131:27)</div><div class=\"line\">  at emitOne (events.js:77:13)</div><div class=\"line\">  at Socket.emit (events.js:169:7)</div><div class=\"line\">  at readableAddChunk (_stream_readable.js:146:16)</div><div class=\"line\">  at Socket.Readable.push (_stream_readable.js:110:10)</div><div class=\"line\">  at TCP.onread (net.js:523:20)</div></pre></td></tr></table></figure>\n<p>去查了一下,多半的人都是说</p>\n<blockquote>\n<p>因为redis在持久化到硬盘的backsave的时候需要从当前运行时环境fork出一个镜像,然后使用子进程将内存镜像写入硬盘.</p>\n<p>这时复制镜像会消耗双倍的内存,所以内存不足时会失败.redis默认设置在失败时,拒绝写入,所以建议将拒绝写入的配置修改为no : <code>stop-writes-on-bgsave-error no</code></p>\n</blockquote>\n<p>我去看了一下本地redis服务的配置文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ################################ SNAPSHOTTING  ################################</div><div class=\"line\">#</div><div class=\"line\"># Save the DB on disk:</div><div class=\"line\">#</div><div class=\"line\">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\">#</div><div class=\"line\">#   Will save the DB if both the given number of seconds and the given</div><div class=\"line\">#   number of write operations against the DB occurred.</div><div class=\"line\">#</div><div class=\"line\">#   In the example below the behaviour will be to save:</div><div class=\"line\">#   after 900 sec (15 min) if at least 1 key changed</div><div class=\"line\">#   after 300 sec (5 min) if at least 10 keys changed</div><div class=\"line\">#   after 60 sec if at least 10000 keys changed</div><div class=\"line\">#</div><div class=\"line\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</div><div class=\"line\">#</div><div class=\"line\">#   It is also possible to remove all the previously configured save</div><div class=\"line\">#   points by adding a save directive with a single empty string argument</div><div class=\"line\">#   like in the following example:</div><div class=\"line\">#</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"></div><div class=\"line\"># By default Redis will stop accepting writes if RDB snapshots are enabled</div><div class=\"line\"># (at least one save point) and the latest background save failed.</div><div class=\"line\"># This will make the user aware (in a hard way) that data is not persisting</div><div class=\"line\"># on disk properly, otherwise chances are that no one will notice and some</div><div class=\"line\"># disaster will happen.</div><div class=\"line\">#</div><div class=\"line\"># If the background saving process will start working again Redis will</div><div class=\"line\"># automatically allow writes again.</div><div class=\"line\">#</div><div class=\"line\"># However if you have setup your proper monitoring of the Redis server</div><div class=\"line\"># and persistence, you may want to disable this feature so that Redis will</div><div class=\"line\"># continue to work as usual even if there are problems with disk,</div><div class=\"line\"># permissions, and so forth.</div><div class=\"line\">stop-writes-on-bgsave-error yes</div></pre></td></tr></table></figure>\n<p>首先,前面是数据快照的策略配置,默认</p>\n<ul>\n<li>至少1次更改,将于900秒后存储快照</li>\n<li>至少10次更改,将于300秒后存储快照</li>\n<li>至少10000次更改,将于60秒后存储快照</li>\n</ul>\n<p>下面说了一下redis snapshots启用然后最后一次backsave失败的时候会拒绝写入.</p>\n<p>然后解释了一下这样用户就会觉察到数据没有正确的持久化到硬盘上,为了防止世界被破坏云云…</p>\n<p>接下来又假设了一下如果用户有相当健全的monitoring system的时候,就可以为所欲为 把配置设置为<code>no</code></p>\n<blockquote>\n<p>我查看了一下本机内存是没有问题的 硬盘就更不用说了</p>\n<p>所以肯定不是因为内存不够的原因导致的</p>\n<p>于是我在cmd里运行redis-server</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[7312] 03 Jan 23:38:08.472 #</div><div class=\"line\">The Windows version of Redis allocates a memory mapped heap for sharing with</div><div class=\"line\">the forked process used for persistence operations. In order to share this</div><div class=\"line\">memory, Windows allocates from the system paging file a portion equal to the</div><div class=\"line\">size of the Redis heap. At this time there is insufficient contiguous free</div><div class=\"line\">space available in the system paging file for this operation (Windows error</div><div class=\"line\">0x5AF). To work around this you may either increase the size of the system</div><div class=\"line\">paging file, or decrease the size of the Redis heap with the --maxheap flag.</div><div class=\"line\">Sometimes a reboot will defragment the system paging file sufficiently for</div><div class=\"line\">this operation to complete successfully.</div><div class=\"line\"></div><div class=\"line\">Please see the documentation included with the binary distributions for more</div><div class=\"line\">details on the --maxheap flag.</div><div class=\"line\"></div><div class=\"line\">Redis can not continue. Exiting.</div></pre></td></tr></table></figure>\n<p>从上面的错误来看,应该<em>decrease maxheap</em>,<strong>我猜有可能是windows下默认的maxheap超过了阈值</strong></p>\n<p>决定再去看一下配置,发现没有指定maxheap和maxmemory,然后随便给了<em>maxheap 1.5gb/ maxmemory 1gb</em>,再启动服务就好了…</p>"},{"title":"奇技淫巧","date":"2016-09-28T04:26:03.000Z","_content":"\n# generator 生成i内的 fibonacci数组\n\n    let i = 1000;\n    [...(function(limit){ \n        return function* (){\n            let [prev, curr] = [0,1]\n            while(prev + curr < limit){\n                [prev, curr] = [curr, prev + curr]\n                yield curr\n            }\n        }\n    })(i)()]\n\n<!--more-->\n\n# 不需要中间变量,交换两个值类型变量的值得装逼进阶\n\n    let [a,b]=[1,2]\n    // 普通青年\n    a=a+b\n    b=a-b\n    a=a-b\n    // 文艺青年\n    a=a^b\n    b=a^b\n    a=a^b\n    // 进阶演化\n    a^=b\n    b^=a\n    a^=b\n    -----\n    b^=a^=b\n    a^=b\n    -----\n    a=(b^=a^=b)^a\n    -----\n    // 究极装逼方案\n    b^=a^(a=b)\n\n为什么会这样呢?  \n因为行内的赋值写法一开始就把右侧变量的值确定下来了  \n也就是说 `b^=a^(a=b)`  \n等价于 `b=b^a^(a=b)`  \n等价于 `b=2^1^(a=2)`  \n等价于 `a=2;b=2^1^2` -- `a=2;b=1`  \n也就解释了 为什么`a^=b^=a^=b`是错误的   \n因为其等价于`a=a^(b=b^(a=a^b))`  \n`a=1^(b=2^(a=1^2))`   // a=1,b=2\n`a=1^(b=2^(a=3))` // a被赋值为3,b=2   \n`a=1^(b=2^3)`  // a=3,b=2  \n`a=1^(b=1)`  // a=3,b被赋值为1  \n`a=1^1` // a=1,b=1\n`a=0` // a被赋值为0,b=1  \n\n# 不动点组合子\n\n    // 将其用于将递归匿名函数\n    let Y = f => (x => f(y => x(x)(y)))(x => f(y => x(x)(y)))\n    let steamrollArray = a => Y(fl => i => i instanceof Array ? i.reduce((p, n) => p.concat(fl(n)), []) : i)(a)\n    steamrollArray([1,[2,3],[[[4]],[5]]]) // 结果是 [1,2,3,4,5]\n\n采用 Y-combinator(fixed-point combinator) 的方式去实现匿名函数递归.\n参考 [不动点组合子](https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90)\n","source":"_posts/奇技淫巧.md","raw":"---\ntitle: 奇技淫巧\ndate: 2016-9-28 12:26:03\ntags: javascript \n---\n\n# generator 生成i内的 fibonacci数组\n\n    let i = 1000;\n    [...(function(limit){ \n        return function* (){\n            let [prev, curr] = [0,1]\n            while(prev + curr < limit){\n                [prev, curr] = [curr, prev + curr]\n                yield curr\n            }\n        }\n    })(i)()]\n\n<!--more-->\n\n# 不需要中间变量,交换两个值类型变量的值得装逼进阶\n\n    let [a,b]=[1,2]\n    // 普通青年\n    a=a+b\n    b=a-b\n    a=a-b\n    // 文艺青年\n    a=a^b\n    b=a^b\n    a=a^b\n    // 进阶演化\n    a^=b\n    b^=a\n    a^=b\n    -----\n    b^=a^=b\n    a^=b\n    -----\n    a=(b^=a^=b)^a\n    -----\n    // 究极装逼方案\n    b^=a^(a=b)\n\n为什么会这样呢?  \n因为行内的赋值写法一开始就把右侧变量的值确定下来了  \n也就是说 `b^=a^(a=b)`  \n等价于 `b=b^a^(a=b)`  \n等价于 `b=2^1^(a=2)`  \n等价于 `a=2;b=2^1^2` -- `a=2;b=1`  \n也就解释了 为什么`a^=b^=a^=b`是错误的   \n因为其等价于`a=a^(b=b^(a=a^b))`  \n`a=1^(b=2^(a=1^2))`   // a=1,b=2\n`a=1^(b=2^(a=3))` // a被赋值为3,b=2   \n`a=1^(b=2^3)`  // a=3,b=2  \n`a=1^(b=1)`  // a=3,b被赋值为1  \n`a=1^1` // a=1,b=1\n`a=0` // a被赋值为0,b=1  \n\n# 不动点组合子\n\n    // 将其用于将递归匿名函数\n    let Y = f => (x => f(y => x(x)(y)))(x => f(y => x(x)(y)))\n    let steamrollArray = a => Y(fl => i => i instanceof Array ? i.reduce((p, n) => p.concat(fl(n)), []) : i)(a)\n    steamrollArray([1,[2,3],[[[4]],[5]]]) // 结果是 [1,2,3,4,5]\n\n采用 Y-combinator(fixed-point combinator) 的方式去实现匿名函数递归.\n参考 [不动点组合子](https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90)\n","slug":"奇技淫巧","published":1,"updated":"2018-06-20T04:16:48.258Z","_id":"cj2lg56570004lwpowayrkt0z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"generator-生成i内的-fibonacci数组\"><a href=\"#generator-生成i内的-fibonacci数组\" class=\"headerlink\" title=\"generator 生成i内的 fibonacci数组\"></a>generator 生成i内的 fibonacci数组</h1><pre><code>let i = 1000;\n[...(function(limit){ \n    return function* (){\n        let [prev, curr] = [0,1]\n        while(prev + curr &lt; limit){\n            [prev, curr] = [curr, prev + curr]\n            yield curr\n        }\n    }\n})(i)()]\n</code></pre><a id=\"more\"></a>\n<h1 id=\"不需要中间变量-交换两个值类型变量的值得装逼进阶\"><a href=\"#不需要中间变量-交换两个值类型变量的值得装逼进阶\" class=\"headerlink\" title=\"不需要中间变量,交换两个值类型变量的值得装逼进阶\"></a>不需要中间变量,交换两个值类型变量的值得装逼进阶</h1><pre><code>let [a,b]=[1,2]\n// 普通青年\na=a+b\nb=a-b\na=a-b\n// 文艺青年\na=a^b\nb=a^b\na=a^b\n// 进阶演化\na^=b\nb^=a\na^=b\n-----\nb^=a^=b\na^=b\n-----\na=(b^=a^=b)^a\n-----\n// 究极装逼方案\nb^=a^(a=b)\n</code></pre><p>为什么会这样呢?<br>因为行内的赋值写法一开始就把右侧变量的值确定下来了<br>也就是说 <code>b^=a^(a=b)</code><br>等价于 <code>b=b^a^(a=b)</code><br>等价于 <code>b=2^1^(a=2)</code><br>等价于 <code>a=2;b=2^1^2</code> – <code>a=2;b=1</code><br>也就解释了 为什么<code>a^=b^=a^=b</code>是错误的<br>因为其等价于<code>a=a^(b=b^(a=a^b))</code><br><code>a=1^(b=2^(a=1^2))</code>   // a=1,b=2<br><code>a=1^(b=2^(a=3))</code> // a被赋值为3,b=2<br><code>a=1^(b=2^3)</code>  // a=3,b=2<br><code>a=1^(b=1)</code>  // a=3,b被赋值为1<br><code>a=1^1</code> // a=1,b=1<br><code>a=0</code> // a被赋值为0,b=1  </p>\n<h1 id=\"不动点组合子\"><a href=\"#不动点组合子\" class=\"headerlink\" title=\"不动点组合子\"></a>不动点组合子</h1><pre><code>// 将其用于将递归匿名函数\nlet Y = f =&gt; (x =&gt; f(y =&gt; x(x)(y)))(x =&gt; f(y =&gt; x(x)(y)))\nlet steamrollArray = a =&gt; Y(fl =&gt; i =&gt; i instanceof Array ? i.reduce((p, n) =&gt; p.concat(fl(n)), []) : i)(a)\nsteamrollArray([1,[2,3],[[[4]],[5]]]) // 结果是 [1,2,3,4,5]\n</code></pre><p>采用 Y-combinator(fixed-point combinator) 的方式去实现匿名函数递归.<br>参考 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90\" target=\"_blank\" rel=\"external\">不动点组合子</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"generator-生成i内的-fibonacci数组\"><a href=\"#generator-生成i内的-fibonacci数组\" class=\"headerlink\" title=\"generator 生成i内的 fibonacci数组\"></a>generator 生成i内的 fibonacci数组</h1><pre><code>let i = 1000;\n[...(function(limit){ \n    return function* (){\n        let [prev, curr] = [0,1]\n        while(prev + curr &lt; limit){\n            [prev, curr] = [curr, prev + curr]\n            yield curr\n        }\n    }\n})(i)()]\n</code></pre>","more":"<h1 id=\"不需要中间变量-交换两个值类型变量的值得装逼进阶\"><a href=\"#不需要中间变量-交换两个值类型变量的值得装逼进阶\" class=\"headerlink\" title=\"不需要中间变量,交换两个值类型变量的值得装逼进阶\"></a>不需要中间变量,交换两个值类型变量的值得装逼进阶</h1><pre><code>let [a,b]=[1,2]\n// 普通青年\na=a+b\nb=a-b\na=a-b\n// 文艺青年\na=a^b\nb=a^b\na=a^b\n// 进阶演化\na^=b\nb^=a\na^=b\n-----\nb^=a^=b\na^=b\n-----\na=(b^=a^=b)^a\n-----\n// 究极装逼方案\nb^=a^(a=b)\n</code></pre><p>为什么会这样呢?<br>因为行内的赋值写法一开始就把右侧变量的值确定下来了<br>也就是说 <code>b^=a^(a=b)</code><br>等价于 <code>b=b^a^(a=b)</code><br>等价于 <code>b=2^1^(a=2)</code><br>等价于 <code>a=2;b=2^1^2</code> – <code>a=2;b=1</code><br>也就解释了 为什么<code>a^=b^=a^=b</code>是错误的<br>因为其等价于<code>a=a^(b=b^(a=a^b))</code><br><code>a=1^(b=2^(a=1^2))</code>   // a=1,b=2<br><code>a=1^(b=2^(a=3))</code> // a被赋值为3,b=2<br><code>a=1^(b=2^3)</code>  // a=3,b=2<br><code>a=1^(b=1)</code>  // a=3,b被赋值为1<br><code>a=1^1</code> // a=1,b=1<br><code>a=0</code> // a被赋值为0,b=1  </p>\n<h1 id=\"不动点组合子\"><a href=\"#不动点组合子\" class=\"headerlink\" title=\"不动点组合子\"></a>不动点组合子</h1><pre><code>// 将其用于将递归匿名函数\nlet Y = f =&gt; (x =&gt; f(y =&gt; x(x)(y)))(x =&gt; f(y =&gt; x(x)(y)))\nlet steamrollArray = a =&gt; Y(fl =&gt; i =&gt; i instanceof Array ? i.reduce((p, n) =&gt; p.concat(fl(n)), []) : i)(a)\nsteamrollArray([1,[2,3],[[[4]],[5]]]) // 结果是 [1,2,3,4,5]\n</code></pre><p>采用 Y-combinator(fixed-point combinator) 的方式去实现匿名函数递归.<br>参考 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90\" target=\"_blank\" rel=\"external\">不动点组合子</a></p>"},{"layout":"network.md","title":"好玩的社区","date":"2016-10-01T06:52:16.000Z","_content":"\n> 以下是个人搜罗的一些比较喜欢的社区,比起传统的 csdn 和 open-open 那种技术性论坛和博客,这里给我的感觉更像是家.\n\n<!--more-->\n\n- [知乎](http://www.zhihu.com)\n\n  不用多说,这应该是当前国内互联网社区的当家花旦.\n\n- [简书](http://www.jianshu.com)\n\n一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.\n\n- [SegmentFault](http://www.segmentfault.com)\n\n相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.\n\n- [PingWest品玩](http://www.pingwest.com)\n\n狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.\n\n- [那么(原孢子)](http://www.named.cn)\n\n从前有一个设计师社区,后来...没有了...(好失落)\n\n- [LOFTER乐乎](http://www.lofter.com)\n\n每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!\n\n- [V2EX](http://www.v2ex.com)\n\n简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.\n\n- [众成翻译](http://www.zcfy.cc/)\n\n打着翻译的旗号的前沿技术社区.\n\n- [云栖社区](https://yq.aliyun.com/)\n\n阿里爸爸的技术社区.\n\n- [腾讯 AlloyTeam](http://alloyteam.github.io/)\n\n腾讯 AlloyTeam 团队博客.\n\n- [JS Tips](http://www.jstips.co/)\n\nOne tip per day.","source":"_posts/好玩的社区.md","raw":"layout: network.md\ntitle: 好玩的社区\ndate: 2016-10-01 14:52:16\ntags: 技术 社区\n---\n\n> 以下是个人搜罗的一些比较喜欢的社区,比起传统的 csdn 和 open-open 那种技术性论坛和博客,这里给我的感觉更像是家.\n\n<!--more-->\n\n- [知乎](http://www.zhihu.com)\n\n  不用多说,这应该是当前国内互联网社区的当家花旦.\n\n- [简书](http://www.jianshu.com)\n\n一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.\n\n- [SegmentFault](http://www.segmentfault.com)\n\n相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.\n\n- [PingWest品玩](http://www.pingwest.com)\n\n狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.\n\n- [那么(原孢子)](http://www.named.cn)\n\n从前有一个设计师社区,后来...没有了...(好失落)\n\n- [LOFTER乐乎](http://www.lofter.com)\n\n每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!\n\n- [V2EX](http://www.v2ex.com)\n\n简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.\n\n- [众成翻译](http://www.zcfy.cc/)\n\n打着翻译的旗号的前沿技术社区.\n\n- [云栖社区](https://yq.aliyun.com/)\n\n阿里爸爸的技术社区.\n\n- [腾讯 AlloyTeam](http://alloyteam.github.io/)\n\n腾讯 AlloyTeam 团队博客.\n\n- [JS Tips](http://www.jstips.co/)\n\nOne tip per day.","slug":"好玩的社区","published":1,"updated":"2018-06-20T04:06:53.408Z","_id":"cj2lg56590005lwpo3thmvy14","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>以下是个人搜罗的一些比较喜欢的社区,比起传统的 csdn 和 open-open 那种技术性论坛和博客,这里给我的感觉更像是家.</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li><p><a href=\"http://www.zhihu.com\" target=\"_blank\" rel=\"external\">知乎</a></p>\n<p>不用多说,这应该是当前国内互联网社区的当家花旦.</p>\n</li>\n<li><p><a href=\"http://www.jianshu.com\" target=\"_blank\" rel=\"external\">简书</a></p>\n</li>\n</ul>\n<p>一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.</p>\n<ul>\n<li><a href=\"http://www.segmentfault.com\" target=\"_blank\" rel=\"external\">SegmentFault</a></li>\n</ul>\n<p>相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.</p>\n<ul>\n<li><a href=\"http://www.pingwest.com\" target=\"_blank\" rel=\"external\">PingWest品玩</a></li>\n</ul>\n<p>狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.</p>\n<ul>\n<li><a href=\"http://www.named.cn\" target=\"_blank\" rel=\"external\">那么(原孢子)</a></li>\n</ul>\n<p>从前有一个设计师社区,后来…没有了…(好失落)</p>\n<ul>\n<li><a href=\"http://www.lofter.com\" target=\"_blank\" rel=\"external\">LOFTER乐乎</a></li>\n</ul>\n<p>每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!</p>\n<ul>\n<li><a href=\"http://www.v2ex.com\" target=\"_blank\" rel=\"external\">V2EX</a></li>\n</ul>\n<p>简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.</p>\n<ul>\n<li><a href=\"http://www.zcfy.cc/\" target=\"_blank\" rel=\"external\">众成翻译</a></li>\n</ul>\n<p>打着翻译的旗号的前沿技术社区.</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/\" target=\"_blank\" rel=\"external\">云栖社区</a></li>\n</ul>\n<p>阿里爸爸的技术社区.</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/\" target=\"_blank\" rel=\"external\">腾讯 AlloyTeam</a></li>\n</ul>\n<p>腾讯 AlloyTeam 团队博客.</p>\n<ul>\n<li><a href=\"http://www.jstips.co/\" target=\"_blank\" rel=\"external\">JS Tips</a></li>\n</ul>\n<p>One tip per day.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>以下是个人搜罗的一些比较喜欢的社区,比起传统的 csdn 和 open-open 那种技术性论坛和博客,这里给我的感觉更像是家.</p>\n</blockquote>","more":"<ul>\n<li><p><a href=\"http://www.zhihu.com\" target=\"_blank\" rel=\"external\">知乎</a></p>\n<p>不用多说,这应该是当前国内互联网社区的当家花旦.</p>\n</li>\n<li><p><a href=\"http://www.jianshu.com\" target=\"_blank\" rel=\"external\">简书</a></p>\n</li>\n</ul>\n<p>一开始是一个格外有情调的小资社区,经常有些暖心的小鸡汤啊什么的.后来,进驻了一波程序员,现在成了小知乎.</p>\n<ul>\n<li><a href=\"http://www.segmentfault.com\" target=\"_blank\" rel=\"external\">SegmentFault</a></li>\n</ul>\n<p>相比stackoverflow,专业性稍微差一些,社交成分多一些的程序员问答社区,比较活跃.</p>\n<ul>\n<li><a href=\"http://www.pingwest.com\" target=\"_blank\" rel=\"external\">PingWest品玩</a></li>\n</ul>\n<p>狂拽酷炫吊炸天的行业动向信息社区,经常有些让人亮瞎眼睛的新闻.</p>\n<ul>\n<li><a href=\"http://www.named.cn\" target=\"_blank\" rel=\"external\">那么(原孢子)</a></li>\n</ul>\n<p>从前有一个设计师社区,后来…没有了…(好失落)</p>\n<ul>\n<li><a href=\"http://www.lofter.com\" target=\"_blank\" rel=\"external\">LOFTER乐乎</a></li>\n</ul>\n<p>每个人的理想国,摄影师的天堂,话说我还在上面订购了一些明信片呢.感觉perfect!</p>\n<ul>\n<li><a href=\"http://www.v2ex.com\" target=\"_blank\" rel=\"external\">V2EX</a></li>\n</ul>\n<p>简洁明快的技术社区,虽然感觉从内容质量上来讲也在走下坡路,但我个人对其评价还是很高的.</p>\n<ul>\n<li><a href=\"http://www.zcfy.cc/\" target=\"_blank\" rel=\"external\">众成翻译</a></li>\n</ul>\n<p>打着翻译的旗号的前沿技术社区.</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/\" target=\"_blank\" rel=\"external\">云栖社区</a></li>\n</ul>\n<p>阿里爸爸的技术社区.</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/\" target=\"_blank\" rel=\"external\">腾讯 AlloyTeam</a></li>\n</ul>\n<p>腾讯 AlloyTeam 团队博客.</p>\n<ul>\n<li><a href=\"http://www.jstips.co/\" target=\"_blank\" rel=\"external\">JS Tips</a></li>\n</ul>\n<p>One tip per day.</p>"},{"title":"踩过的坑","date":"2016-09-28T04:57:29.000Z","_content":"\n# 浏览器\n\n## IE 系列\n\n- IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.\n- 在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是**respond默认不会加载跨域样式资源**,\n- 在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.\n\n## Ajax/CORS\n\n- XMLHttpRequest的`setRequestHeader`要在`open`后进行\n- 在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的`withCredentials`要在`open`后,设置为`true`(对应的,服务器要有`Access-Control-Allow-Credentials: true`的responseHeader)\n- XHR的同步请求中不能设置timeout,否则会报错\n- XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick\n\n<!--more-->\n\n## IOS 微信X5\n\n- 不支持canvas.resetTransform()\n- 不支持Array.fill\n- 不支持Array.findIndex\n\n## Android 微信X5\n\n- 不支持字符串模板\n\n# NODEJS\n\n## MSBuild Error MSB4132 错误\n\n该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.\n\n> msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0\n\n- 首先检查Python安装的版本和系统变量\n- 然后检查是否安装MS build tools\n- 接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)\n- 告诉npm当前系统msbuild的版本\n\t- 可以设置npm全局配置 `npm config set msvs_version xxxx --global` xxxx代表版本 2012/2013/2015  \n\t- 或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 `npm install <module> --msvs_version=xxxx`\n- 重装node-gyp\n\n## MSBuild Error MSB4019 错误\n\n这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的\n\n- 首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了`vcredist_x64 2013`是没有的\n- 其次,确保路径设置正确\n\t- 打开注册表确认`HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0`路径下的`VCTargetsPath`的值为`$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140`,V140是vs2015的路径,其余版本还得视情况而定\n\t- 也可以打开cmd,设置VCTargetsPath路径 `set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140`,不过这个方式cmd关了就没用了\n- 重新 `npm rebuild node-sass`\n\n<strike>\n## MSBuild Error MSB3428 错误\n\n该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题\n\n- 首先检查系统是否安装了.net framework 2.0 sdk\n\t- 如果没有装,这里是下载地址 https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！ \n- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径\n</strike>\n\n## Babel-Gulp使用[Symbol.iterator]时编译出现错误 \n\n> npm install babel-plugin-transform-runtime\n\n然后在\n\n\tgulp.task('default', ()=> {\n\t  return gulp\n\t    .src('app.js')\n\t    .pipe(babel({\n\t      presets: ['es2015'],\n\t      plugins: ['transform-runtime']\n\t    }))\n\t    .pipe(gulp.dest('dist'))\n\t    ;\n\t});\n\n但是编译完成后的文件模块的路径出现了问题\n\n\tError: Cannot find module 'babel-runtime/core-js/get-iterator'\n\t    at Function.Module._resolveFilename (module.js:337:15)\n\t    at Function.Module._load (module.js:287:25)\n\t    at Module.require (module.js:366:17)\n\t    at require (module.js:385:17)\n\t    at Object.<anonymous> (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n\t    at Module._compile (module.js:435:26)\n\t    at Object.Module._extensions..js (module.js:442:10)\n\t    at Module.load (module.js:356:32)\n\t    at Function.Module._load (module.js:311:12)\n\t    at Function.Module.runMain (module.js:467:10)\n\n\t尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 \"Cannot find module 'babel-runtime/regenerator'\")\n\n# ELM\n\n## windows环境下 elm-package install/elm-make 出现错误permission denied\n\n\telm-make: elm-lang-core-5204441: MoveFileEx \"elm-lang-core-5204441\" \"2.1.0\": permission denied (Access is denied.)\n\n详情参见 [ISSUE](https://github.com/elm-lang/elm-platform/issues/81)  \n分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.  \n临时解决方法是手动移动`elm-lang-core-5204441`文件夹到`elm-stuff/packages/elm-lang/core/`目录下,重命名目录名称为`2.1.0`\n\n# REACT-NATIVE\n\n## windows环境下 android开发 \n\n\t- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n\t于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n\t然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n\n## ios 环境下添加 react-native-vector-icons 引用\n\n  - XCode 中添加 RNVectorIcons.xcodeproj 到 Libraries\n\t- Build Phases 中添加 libRNVectorIcons 到 Link Binary With Libraries\n\t- Build Phases 中添加 FontAwesome.ttf 到 CopyBundleResources\n\t- Info.plist 中添加 Fonts provided by application\n\t\t- 第一栏添加 FontAwesome.ttf\n\n\t然后运行报错 watchman EMFILE\n\n\t使用 brew 重新安装 watchman 然后 删除 node_modules 使用 npm（注意不是yarn）install\n\n\t重新打包即可\n\n\t还有一种方法没有试过，执行命令：`ulimit 4096 # for instance`\n\n# NGINX\n\n\tnginx 在代理同一个服务器上的多个 nodejs 实例时，当 nodejs 中有使用了 socket.io ，就会出现不断 connect 的问题，这是因为 nginx 在代理时没有把套接字链接视作一个长链接导致的，配置 upsteam 的 keepalive 之后便可以解决该问题。\n\n```json\n\n\t\tupstream upstream_host {\n\t\t\tserver 127.0.0.1:8090;\n\t\t\tkeepalive 64;\n\t\t}\n\n\t\tlocation ^~ /socket {\n\t\t\t\tproxy_pass https://upstream_host;\n\t\t\t\tproxy_redirect off;\n\t\t\t\tproxy_pass_request_headers on;\n\t\t\t\tproxy_http_version 1.1;\n\t\t\t\tproxy_set_header Upgrade $http_upgrade;\n\t\t\t\tproxy_set_header Connection \"upgrade\";\n\t\t}\n\n```\n\n# DEBIAN\n\n使用 puppeteer 时会报依赖错误，普通用户只需要安装依赖即可解决\n\n```\nsudo apt-get update\n\nsudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing\n```\n","source":"_posts/踩过的坑.md","raw":"---\ntitle: 踩过的坑\ndate: 2016-9-28 12:57:29\ntags: 踩坑\n---\n\n# 浏览器\n\n## IE 系列\n\n- IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.\n- 在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是**respond默认不会加载跨域样式资源**,\n- 在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.\n\n## Ajax/CORS\n\n- XMLHttpRequest的`setRequestHeader`要在`open`后进行\n- 在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的`withCredentials`要在`open`后,设置为`true`(对应的,服务器要有`Access-Control-Allow-Credentials: true`的responseHeader)\n- XHR的同步请求中不能设置timeout,否则会报错\n- XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick\n\n<!--more-->\n\n## IOS 微信X5\n\n- 不支持canvas.resetTransform()\n- 不支持Array.fill\n- 不支持Array.findIndex\n\n## Android 微信X5\n\n- 不支持字符串模板\n\n# NODEJS\n\n## MSBuild Error MSB4132 错误\n\n该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.\n\n> msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0\n\n- 首先检查Python安装的版本和系统变量\n- 然后检查是否安装MS build tools\n- 接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)\n- 告诉npm当前系统msbuild的版本\n\t- 可以设置npm全局配置 `npm config set msvs_version xxxx --global` xxxx代表版本 2012/2013/2015  \n\t- 或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 `npm install <module> --msvs_version=xxxx`\n- 重装node-gyp\n\n## MSBuild Error MSB4019 错误\n\n这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的\n\n- 首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了`vcredist_x64 2013`是没有的\n- 其次,确保路径设置正确\n\t- 打开注册表确认`HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0`路径下的`VCTargetsPath`的值为`$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140`,V140是vs2015的路径,其余版本还得视情况而定\n\t- 也可以打开cmd,设置VCTargetsPath路径 `set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140`,不过这个方式cmd关了就没用了\n- 重新 `npm rebuild node-sass`\n\n<strike>\n## MSBuild Error MSB3428 错误\n\n该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题\n\n- 首先检查系统是否安装了.net framework 2.0 sdk\n\t- 如果没有装,这里是下载地址 https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！ \n- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径\n</strike>\n\n## Babel-Gulp使用[Symbol.iterator]时编译出现错误 \n\n> npm install babel-plugin-transform-runtime\n\n然后在\n\n\tgulp.task('default', ()=> {\n\t  return gulp\n\t    .src('app.js')\n\t    .pipe(babel({\n\t      presets: ['es2015'],\n\t      plugins: ['transform-runtime']\n\t    }))\n\t    .pipe(gulp.dest('dist'))\n\t    ;\n\t});\n\n但是编译完成后的文件模块的路径出现了问题\n\n\tError: Cannot find module 'babel-runtime/core-js/get-iterator'\n\t    at Function.Module._resolveFilename (module.js:337:15)\n\t    at Function.Module._load (module.js:287:25)\n\t    at Module.require (module.js:366:17)\n\t    at require (module.js:385:17)\n\t    at Object.<anonymous> (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n\t    at Module._compile (module.js:435:26)\n\t    at Object.Module._extensions..js (module.js:442:10)\n\t    at Module.load (module.js:356:32)\n\t    at Function.Module._load (module.js:311:12)\n\t    at Function.Module.runMain (module.js:467:10)\n\n\t尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 \"Cannot find module 'babel-runtime/regenerator'\")\n\n# ELM\n\n## windows环境下 elm-package install/elm-make 出现错误permission denied\n\n\telm-make: elm-lang-core-5204441: MoveFileEx \"elm-lang-core-5204441\" \"2.1.0\": permission denied (Access is denied.)\n\n详情参见 [ISSUE](https://github.com/elm-lang/elm-platform/issues/81)  \n分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.  \n临时解决方法是手动移动`elm-lang-core-5204441`文件夹到`elm-stuff/packages/elm-lang/core/`目录下,重命名目录名称为`2.1.0`\n\n# REACT-NATIVE\n\n## windows环境下 android开发 \n\n\t- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n\t于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n\t然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n\n## ios 环境下添加 react-native-vector-icons 引用\n\n  - XCode 中添加 RNVectorIcons.xcodeproj 到 Libraries\n\t- Build Phases 中添加 libRNVectorIcons 到 Link Binary With Libraries\n\t- Build Phases 中添加 FontAwesome.ttf 到 CopyBundleResources\n\t- Info.plist 中添加 Fonts provided by application\n\t\t- 第一栏添加 FontAwesome.ttf\n\n\t然后运行报错 watchman EMFILE\n\n\t使用 brew 重新安装 watchman 然后 删除 node_modules 使用 npm（注意不是yarn）install\n\n\t重新打包即可\n\n\t还有一种方法没有试过，执行命令：`ulimit 4096 # for instance`\n\n# NGINX\n\n\tnginx 在代理同一个服务器上的多个 nodejs 实例时，当 nodejs 中有使用了 socket.io ，就会出现不断 connect 的问题，这是因为 nginx 在代理时没有把套接字链接视作一个长链接导致的，配置 upsteam 的 keepalive 之后便可以解决该问题。\n\n```json\n\n\t\tupstream upstream_host {\n\t\t\tserver 127.0.0.1:8090;\n\t\t\tkeepalive 64;\n\t\t}\n\n\t\tlocation ^~ /socket {\n\t\t\t\tproxy_pass https://upstream_host;\n\t\t\t\tproxy_redirect off;\n\t\t\t\tproxy_pass_request_headers on;\n\t\t\t\tproxy_http_version 1.1;\n\t\t\t\tproxy_set_header Upgrade $http_upgrade;\n\t\t\t\tproxy_set_header Connection \"upgrade\";\n\t\t}\n\n```\n\n# DEBIAN\n\n使用 puppeteer 时会报依赖错误，普通用户只需要安装依赖即可解决\n\n```\nsudo apt-get update\n\nsudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing\n```\n","slug":"踩过的坑","published":1,"updated":"2018-06-20T04:14:19.407Z","_id":"cj2lg565c0008lwpom8lhx4kq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h2 id=\"IE-系列\"><a href=\"#IE-系列\" class=\"headerlink\" title=\"IE 系列\"></a>IE 系列</h2><ul>\n<li>IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.</li>\n<li>在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是<strong>respond默认不会加载跨域样式资源</strong>,</li>\n<li>在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.</li>\n</ul>\n<h2 id=\"Ajax-CORS\"><a href=\"#Ajax-CORS\" class=\"headerlink\" title=\"Ajax/CORS\"></a>Ajax/CORS</h2><ul>\n<li>XMLHttpRequest的<code>setRequestHeader</code>要在<code>open</code>后进行</li>\n<li>在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的<code>withCredentials</code>要在<code>open</code>后,设置为<code>true</code>(对应的,服务器要有<code>Access-Control-Allow-Credentials: true</code>的responseHeader)</li>\n<li>XHR的同步请求中不能设置timeout,否则会报错</li>\n<li>XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"IOS-微信X5\"><a href=\"#IOS-微信X5\" class=\"headerlink\" title=\"IOS 微信X5\"></a>IOS 微信X5</h2><ul>\n<li>不支持canvas.resetTransform()</li>\n<li>不支持Array.fill</li>\n<li>不支持Array.findIndex</li>\n</ul>\n<h2 id=\"Android-微信X5\"><a href=\"#Android-微信X5\" class=\"headerlink\" title=\"Android 微信X5\"></a>Android 微信X5</h2><ul>\n<li>不支持字符串模板</li>\n</ul>\n<h1 id=\"NODEJS\"><a href=\"#NODEJS\" class=\"headerlink\" title=\"NODEJS\"></a>NODEJS</h1><h2 id=\"MSBuild-Error-MSB4132-错误\"><a href=\"#MSBuild-Error-MSB4132-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4132 错误\"></a>MSBuild Error MSB4132 错误</h2><p>该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.</p>\n<blockquote>\n<p>msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0</p>\n</blockquote>\n<ul>\n<li>首先检查Python安装的版本和系统变量</li>\n<li>然后检查是否安装MS build tools</li>\n<li>接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)</li>\n<li>告诉npm当前系统msbuild的版本<ul>\n<li>可以设置npm全局配置 <code>npm config set msvs_version xxxx --global</code> xxxx代表版本 2012/2013/2015  </li>\n<li>或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 <code>npm install &lt;module&gt; --msvs_version=xxxx</code></li>\n</ul>\n</li>\n<li>重装node-gyp</li>\n</ul>\n<h2 id=\"MSBuild-Error-MSB4019-错误\"><a href=\"#MSBuild-Error-MSB4019-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4019 错误\"></a>MSBuild Error MSB4019 错误</h2><p>这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的</p>\n<ul>\n<li>首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了<code>vcredist_x64 2013</code>是没有的</li>\n<li>其次,确保路径设置正确<ul>\n<li>打开注册表确认<code>HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0</code>路径下的<code>VCTargetsPath</code>的值为<code>$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140</code>,V140是vs2015的路径,其余版本还得视情况而定</li>\n<li>也可以打开cmd,设置VCTargetsPath路径 <code>set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140</code>,不过这个方式cmd关了就没用了</li>\n</ul>\n</li>\n<li>重新 <code>npm rebuild node-sass</code></li>\n</ul>\n<strike><br>## MSBuild Error MSB3428 错误<br><br>该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题<br><br>- 首先检查系统是否安装了.net framework 2.0 sdk<br>    - 如果没有装,这里是下载地址 <a href=\"https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe\" target=\"_blank\" rel=\"external\">https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe</a> 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！<br>- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径<br></strike>\n\n<h2 id=\"Babel-Gulp使用-Symbol-iterator-时编译出现错误\"><a href=\"#Babel-Gulp使用-Symbol-iterator-时编译出现错误\" class=\"headerlink\" title=\"Babel-Gulp使用[Symbol.iterator]时编译出现错误\"></a>Babel-Gulp使用[Symbol.iterator]时编译出现错误</h2><blockquote>\n<p>npm install babel-plugin-transform-runtime</p>\n</blockquote>\n<p>然后在</p>\n<pre><code>gulp.task(&apos;default&apos;, ()=&gt; {\n  return gulp\n    .src(&apos;app.js&apos;)\n    .pipe(babel({\n      presets: [&apos;es2015&apos;],\n      plugins: [&apos;transform-runtime&apos;]\n    }))\n    .pipe(gulp.dest(&apos;dist&apos;))\n    ;\n});\n</code></pre><p>但是编译完成后的文件模块的路径出现了问题</p>\n<pre><code>Error: Cannot find module &apos;babel-runtime/core-js/get-iterator&apos;\n    at Function.Module._resolveFilename (module.js:337:15)\n    at Function.Module._load (module.js:287:25)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.&lt;anonymous&gt; (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Function.Module.runMain (module.js:467:10)\n\n尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 &quot;Cannot find module &apos;babel-runtime/regenerator&apos;&quot;)\n</code></pre><h1 id=\"ELM\"><a href=\"#ELM\" class=\"headerlink\" title=\"ELM\"></a>ELM</h1><h2 id=\"windows环境下-elm-package-install-elm-make-出现错误permission-denied\"><a href=\"#windows环境下-elm-package-install-elm-make-出现错误permission-denied\" class=\"headerlink\" title=\"windows环境下 elm-package install/elm-make 出现错误permission denied\"></a>windows环境下 elm-package install/elm-make 出现错误permission denied</h2><pre><code>elm-make: elm-lang-core-5204441: MoveFileEx &quot;elm-lang-core-5204441&quot; &quot;2.1.0&quot;: permission denied (Access is denied.)\n</code></pre><p>详情参见 <a href=\"https://github.com/elm-lang/elm-platform/issues/81\">ISSUE</a><br>分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.<br>临时解决方法是手动移动<code>elm-lang-core-5204441</code>文件夹到<code>elm-stuff/packages/elm-lang/core/</code>目录下,重命名目录名称为<code>2.1.0</code></p>\n<h1 id=\"REACT-NATIVE\"><a href=\"#REACT-NATIVE\" class=\"headerlink\" title=\"REACT-NATIVE\"></a>REACT-NATIVE</h1><h2 id=\"windows环境下-android开发\"><a href=\"#windows环境下-android开发\" class=\"headerlink\" title=\"windows环境下 android开发\"></a>windows环境下 android开发</h2><pre><code>- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n</code></pre><h2 id=\"ios-环境下添加-react-native-vector-icons-引用\"><a href=\"#ios-环境下添加-react-native-vector-icons-引用\" class=\"headerlink\" title=\"ios 环境下添加 react-native-vector-icons 引用\"></a>ios 环境下添加 react-native-vector-icons 引用</h2><ul>\n<li><p>XCode 中添加 RNVectorIcons.xcodeproj 到 Libraries</p>\n<ul>\n<li>Build Phases 中添加 libRNVectorIcons 到 Link Binary With Libraries</li>\n<li>Build Phases 中添加 FontAwesome.ttf 到 CopyBundleResources</li>\n<li>Info.plist 中添加 Fonts provided by application<ul>\n<li>第一栏添加 FontAwesome.ttf</li>\n</ul>\n</li>\n</ul>\n<p>然后运行报错 watchman EMFILE</p>\n<p>使用 brew 重新安装 watchman 然后 删除 node_modules 使用 npm（注意不是yarn）install</p>\n<p>重新打包即可</p>\n<p>还有一种方法没有试过，执行命令：<code>ulimit 4096 # for instance</code></p>\n</li>\n</ul>\n<h1 id=\"NGINX\"><a href=\"#NGINX\" class=\"headerlink\" title=\"NGINX\"></a>NGINX</h1><pre><code>nginx 在代理同一个服务器上的多个 nodejs 实例时，当 nodejs 中有使用了 socket.io ，就会出现不断 connect 的问题，这是因为 nginx 在代理时没有把套接字链接视作一个长链接导致的，配置 upsteam 的 keepalive 之后便可以解决该问题。\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">upstream upstream_host &#123;</div><div class=\"line\">\tserver 127.0.0.1:8090;</div><div class=\"line\">\tkeepalive 64;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">location ^~ /socket &#123;</div><div class=\"line\">\t\tproxy_pass https://upstream_host;</div><div class=\"line\">\t\tproxy_redirect off;</div><div class=\"line\">\t\tproxy_pass_request_headers on;</div><div class=\"line\">\t\tproxy_http_version 1.1;</div><div class=\"line\">\t\tproxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">\t\tproxy_set_header Connection \"upgrade\";</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"DEBIAN\"><a href=\"#DEBIAN\" class=\"headerlink\" title=\"DEBIAN\"></a>DEBIAN</h1><p>使用 puppeteer 时会报依赖错误，普通用户只需要安装依赖即可解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\"></div><div class=\"line\">sudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h2 id=\"IE-系列\"><a href=\"#IE-系列\" class=\"headerlink\" title=\"IE 系列\"></a>IE 系列</h2><ul>\n<li>IE11在跨站引用的样式文件中的url(比如字体文件路径)解析时,会将document文档的域作为当前域,而不是该样式文件的域.</li>\n<li>在IE8中使用respond.js去使之支持css3媒体查询的时候,值得注意的是<strong>respond默认不会加载跨域样式资源</strong>,</li>\n<li>在IE8中实现数据可视化,千万不要用基于canvas绘图的插件+excanvas,这是自寻死路.还是找找svg+vml绘图的插件吧,比如highcharts之类的.效率问题.</li>\n</ul>\n<h2 id=\"Ajax-CORS\"><a href=\"#Ajax-CORS\" class=\"headerlink\" title=\"Ajax/CORS\"></a>Ajax/CORS</h2><ul>\n<li>XMLHttpRequest的<code>setRequestHeader</code>要在<code>open</code>后进行</li>\n<li>在跨域的POST请求,需要携带cookie身份信息时,XMLHttpRequest的<code>withCredentials</code>要在<code>open</code>后,设置为<code>true</code>(对应的,服务器要有<code>Access-Control-Allow-Credentials: true</code>的responseHeader)</li>\n<li>XHR的同步请求中不能设置timeout,否则会报错</li>\n<li>XHR的ontimeout,onabort,onerror等等事件在onreadystatechange事件执行后才会触发 所以如果要reject结果的话,需要 setTimeout 0 将其延迟到下一tick</li>\n</ul>","more":"<h2 id=\"IOS-微信X5\"><a href=\"#IOS-微信X5\" class=\"headerlink\" title=\"IOS 微信X5\"></a>IOS 微信X5</h2><ul>\n<li>不支持canvas.resetTransform()</li>\n<li>不支持Array.fill</li>\n<li>不支持Array.findIndex</li>\n</ul>\n<h2 id=\"Android-微信X5\"><a href=\"#Android-微信X5\" class=\"headerlink\" title=\"Android 微信X5\"></a>Android 微信X5</h2><ul>\n<li>不支持字符串模板</li>\n</ul>\n<h1 id=\"NODEJS\"><a href=\"#NODEJS\" class=\"headerlink\" title=\"NODEJS\"></a>NODEJS</h1><h2 id=\"MSBuild-Error-MSB4132-错误\"><a href=\"#MSBuild-Error-MSB4132-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4132 错误\"></a>MSBuild Error MSB4132 错误</h2><p>该错误是由于node-gyp默认使用2.0版本的msbuild,可能和当前机器上的msbuild版本不一致导致的.</p>\n<blockquote>\n<p>msbuild error msb4132 the tools version 2.0 is unrecognized. available tools versions are 4.0</p>\n</blockquote>\n<ul>\n<li>首先检查Python安装的版本和系统变量</li>\n<li>然后检查是否安装MS build tools</li>\n<li>接下来卸载node-gyp(高版本的npm里node-gyp不再是独立的包 不能卸载)</li>\n<li>告诉npm当前系统msbuild的版本<ul>\n<li>可以设置npm全局配置 <code>npm config set msvs_version xxxx --global</code> xxxx代表版本 2012/2013/2015  </li>\n<li>或者在npm的 rebuild|install 某些需要编译的包时加上msvs_version的指定设置 <code>npm install &lt;module&gt; --msvs_version=xxxx</code></li>\n</ul>\n</li>\n<li>重装node-gyp</li>\n</ul>\n<h2 id=\"MSBuild-Error-MSB4019-错误\"><a href=\"#MSBuild-Error-MSB4019-错误\" class=\"headerlink\" title=\"MSBuild Error MSB4019 错误\"></a>MSBuild Error MSB4019 错误</h2><p>这个错误是由于node-gyp在build一些项目,没有找到系统配置的microsoft.cpp.default.props文件位置导致的</p>\n<ul>\n<li>首选,要确保已经安装了vs,譬如vs 2015(V140),如果没有安装那是找不到这个文件的,起码win10下我装了<code>vcredist_x64 2013</code>是没有的</li>\n<li>其次,确保路径设置正确<ul>\n<li>打开注册表确认<code>HKLM\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\4.0</code>路径下的<code>VCTargetsPath</code>的值为<code>$(MSBuildExtensionsPath32)\\Microsoft.Cpp\\v4.0\\V140</code>,V140是vs2015的路径,其余版本还得视情况而定</li>\n<li>也可以打开cmd,设置VCTargetsPath路径 <code>set VCTargetsPath=c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V140</code>,不过这个方式cmd关了就没用了</li>\n</ul>\n</li>\n<li>重新 <code>npm rebuild node-sass</code></li>\n</ul>\n<strike><br>## MSBuild Error MSB3428 错误<br><br>该错误是由于系统默认路径下没有找到VCBuild.exe可执行文件导致的，依然是某些类库在当前系统打包的时候出现的问题<br><br>- 首先检查系统是否安装了.net framework 2.0 sdk<br>    - 如果没有装,这里是下载地址 <a href=\"https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe\" target=\"_blank\" rel=\"external\">https://download.microsoft.com/download/a/2/8/a28bafa4-c007-4224-a53f-54aee547ed97/setup.exe</a> 注意,win7以上的操作系统,不！支！持！哈哈哈哈哈哈！<br>- 确认安装之后,在系统环境变量中为当前用户(或者所有用户，自行斟酌)的PATH配置中添加VCBuild.exe的绝对路径<br></strike>\n\n<h2 id=\"Babel-Gulp使用-Symbol-iterator-时编译出现错误\"><a href=\"#Babel-Gulp使用-Symbol-iterator-时编译出现错误\" class=\"headerlink\" title=\"Babel-Gulp使用[Symbol.iterator]时编译出现错误\"></a>Babel-Gulp使用[Symbol.iterator]时编译出现错误</h2><blockquote>\n<p>npm install babel-plugin-transform-runtime</p>\n</blockquote>\n<p>然后在</p>\n<pre><code>gulp.task(&apos;default&apos;, ()=&gt; {\n  return gulp\n    .src(&apos;app.js&apos;)\n    .pipe(babel({\n      presets: [&apos;es2015&apos;],\n      plugins: [&apos;transform-runtime&apos;]\n    }))\n    .pipe(gulp.dest(&apos;dist&apos;))\n    ;\n});\n</code></pre><p>但是编译完成后的文件模块的路径出现了问题</p>\n<pre><code>Error: Cannot find module &apos;babel-runtime/core-js/get-iterator&apos;\n    at Function.Module._resolveFilename (module.js:337:15)\n    at Function.Module._load (module.js:287:25)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.&lt;anonymous&gt; (C:\\Users\\Administrator\\Desktop\\Marsoln Licher\\Lib\\exampleProj\\dist\\app.js:3:21)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Function.Module.runMain (module.js:467:10)\n\n尚未有什么好的解决方法,估计是其自身的问题,babel-gulp的repo里也有对应的[ISSUE](https://github.com/babel/gulp-babel/issues/50 &quot;Cannot find module &apos;babel-runtime/regenerator&apos;&quot;)\n</code></pre><h1 id=\"ELM\"><a href=\"#ELM\" class=\"headerlink\" title=\"ELM\"></a>ELM</h1><h2 id=\"windows环境下-elm-package-install-elm-make-出现错误permission-denied\"><a href=\"#windows环境下-elm-package-install-elm-make-出现错误permission-denied\" class=\"headerlink\" title=\"windows环境下 elm-package install/elm-make 出现错误permission denied\"></a>windows环境下 elm-package install/elm-make 出现错误permission denied</h2><pre><code>elm-make: elm-lang-core-5204441: MoveFileEx &quot;elm-lang-core-5204441&quot; &quot;2.1.0&quot;: permission denied (Access is denied.)\n</code></pre><p>详情参见 <a href=\"https://github.com/elm-lang/elm-platform/issues/81\">ISSUE</a><br>分析错误,发现是elm包管理器在下载pkg之后需要创建一个版本号然后将对应的文件移动到其目录下,这个动作在windows平台上有安全问题,所以操作失败.<br>临时解决方法是手动移动<code>elm-lang-core-5204441</code>文件夹到<code>elm-stuff/packages/elm-lang/core/</code>目录下,重命名目录名称为<code>2.1.0</code></p>\n<h1 id=\"REACT-NATIVE\"><a href=\"#REACT-NATIVE\" class=\"headerlink\" title=\"REACT-NATIVE\"></a>REACT-NATIVE</h1><h2 id=\"windows环境下-android开发\"><a href=\"#windows环境下-android开发\" class=\"headerlink\" title=\"windows环境下 android开发\"></a>windows环境下 android开发</h2><pre><code>- socket.io 出现引用错误,初步估计是因为socket.io和react-native都是用webpack打包,所以查找引用目录出现了问题,\n于是将socket.io.js(打包后的文件)作为一个单独模块添加到项目里,\n然后报了一些navigator的错误(因为根据浏览器的userAgent判断环境),无脑的去掉这些地方就能用了\n</code></pre><h2 id=\"ios-环境下添加-react-native-vector-icons-引用\"><a href=\"#ios-环境下添加-react-native-vector-icons-引用\" class=\"headerlink\" title=\"ios 环境下添加 react-native-vector-icons 引用\"></a>ios 环境下添加 react-native-vector-icons 引用</h2><ul>\n<li><p>XCode 中添加 RNVectorIcons.xcodeproj 到 Libraries</p>\n<ul>\n<li>Build Phases 中添加 libRNVectorIcons 到 Link Binary With Libraries</li>\n<li>Build Phases 中添加 FontAwesome.ttf 到 CopyBundleResources</li>\n<li>Info.plist 中添加 Fonts provided by application<ul>\n<li>第一栏添加 FontAwesome.ttf</li>\n</ul>\n</li>\n</ul>\n<p>然后运行报错 watchman EMFILE</p>\n<p>使用 brew 重新安装 watchman 然后 删除 node_modules 使用 npm（注意不是yarn）install</p>\n<p>重新打包即可</p>\n<p>还有一种方法没有试过，执行命令：<code>ulimit 4096 # for instance</code></p>\n</li>\n</ul>\n<h1 id=\"NGINX\"><a href=\"#NGINX\" class=\"headerlink\" title=\"NGINX\"></a>NGINX</h1><pre><code>nginx 在代理同一个服务器上的多个 nodejs 实例时，当 nodejs 中有使用了 socket.io ，就会出现不断 connect 的问题，这是因为 nginx 在代理时没有把套接字链接视作一个长链接导致的，配置 upsteam 的 keepalive 之后便可以解决该问题。\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">upstream upstream_host &#123;</div><div class=\"line\">\tserver 127.0.0.1:8090;</div><div class=\"line\">\tkeepalive 64;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">location ^~ /socket &#123;</div><div class=\"line\">\t\tproxy_pass https://upstream_host;</div><div class=\"line\">\t\tproxy_redirect off;</div><div class=\"line\">\t\tproxy_pass_request_headers on;</div><div class=\"line\">\t\tproxy_http_version 1.1;</div><div class=\"line\">\t\tproxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">\t\tproxy_set_header Connection \"upgrade\";</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"DEBIAN\"><a href=\"#DEBIAN\" class=\"headerlink\" title=\"DEBIAN\"></a>DEBIAN</h1><p>使用 puppeteer 时会报依赖错误，普通用户只需要安装依赖即可解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\"></div><div class=\"line\">sudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing</div></pre></td></tr></table></figure>"},{"title":"工具使用","date":"2016-09-28T04:42:06.000Z","_content":"\n# Git\n\n## 生成ssh\n\n    - 配置全局设置 `git config --global user.name \"username\"` `git confgi --global user.email \"example@xxx.com\"`\n    - 生成ssh `ssh-keygen -t rsa -C \"example@xxx.com\"` 会在C:\\User\\xxx目录下生成.ssh目录\n    - 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n    - 验证 ssh 是否添加成功 `ssh git@github.com`\n\n## 解决git clone时文件目录过长的方法\n\n    修改git设置 `git config --system core.longpaths true`\n\n## 解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误\n\n该错误是由于服务器ssh验证使用了一个过时的算法导致的,但是为了能够成功通过,需要在bash每次打开时设置一下 [stackoverflow solution](http://stackoverflow.com/questions/38770202/using-kexalgorithms-diffie-hellman-group1-sha1-did-not-resolve-no-matching-ke)\n\n```bash\nexport GIT_SSH_COMMAND='ssh -o KexAlgorithms=+diffie-hellman-group1-sha1'\n```\n\nstackoverflow上有热心人说可以在 git config 中做配置,但是我试了,并没有什么用,不过还是记录一下\n\n```bash\n\ngit config --global core.sshCommand \"ssh -o KexAlgorithms=+diffie-hellman-group1-sha1\"\ngit config --global core.scpCommand \"scp -o KexAlgorithms=+diffie-hellman-group1-sha1\"\n\n```\n\n<!--more-->\n\n# VS CODE\n\n## 配置代码段\n\n- `ctrl + p` 打开quick open\n- 输入 `>snippets` 回车\n- 进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车\n- 打开一个名称为javascript.json的配置文件\n- 假设我们要一个控制台打印的代码段,缩写为`_cl`,则需要添加如下配置\n\n        \"Console log\": {    // 代码段的名称\n            \"prefix\": \"_cl\",    // 触发代码段的缩写\n            \"body\": [\n                \"console.log('$1')\",    // 代码段的第一行 $1表示第一个变量\n                \"$2\"    // 代码段的第二行\n            ],\n            \"description\": \"输出到控制台\" // 代码段的描述\n        }\n\n- 保存即生效,当然只能在你指定的语言中生效\n\n# GULP/WEBPACK\n\n## 多入口打包ES6模块化文件\n\n        var gulp = require('gulp')\n        var webpack = require('webpack-stream')\n        var uglify = require('gulp-uglify')\n        var through = require('through2')\n\n        gulp.task('packagedScripts', () => {\n            gulp.src('./src/scripts/entrances/**/*')\n                .pipe(through.obj(function (file, enc, cb) {\n                    var __filename = file.path.split('\\\\').reverse()[0]\n                    gulp.src(file.path)\n                        .pipe(webpack({\n                            output: {\n                                filename: __filename\n                            },\n                            module: {\n                                loaders: [\n                                    {\n                                        test: /\\.js$/,\n                                        exclude: /node_modules/,\n                                        loader: 'babel',\n                                        query: {\n                                            presets: ['es2015']\n                                        }\n                                    }\n                                ]\n                            }\n                        }))\n                        .pipe(uglify())\n                        .pipe(gulp.dest('./src/scripts/packaged'))  // 输出到指定目录\n                    cb()\n                }))\n        })\n\n## gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\n\n        var gulp = require('gulp')\n        var sass = require('gulp-sass')\n        var imagemin = require('gulp-imagemin')\n        var uglify = require('gulp-uglify')\n        var cssMinify = require('gulp-minify-css')\n        var RevAll = require('gulp-rev-all')\n        var filter = require('gulp-filter')\n\n        var buildFunc = () => {\n            var jsFilter = filter('**/*.js')\n            var htmlFilter = filter('**/*.html')\n            var cssFilter = filter('**/*.css')\n            var picFilter = filter(['**/*.jpg', '**/*.png'])\n\n            var revAll = RevAll({\n                dontGlobal: ['.scss'],\n                dontRenameFile: ['.html'],\n                dontSearchFile: ['.css'],\n                transformPath: function(rev) {\n                    return rev\n                        .replace('scripts/', 'dist/scripts/')\n                        .replace('style/', 'dist/style/')\n                        .replace('images/', 'dist/images/')\n                }\n            })\n\n            var v = gulp.src('src/**/*')\n                .pipe(revAll.revision());\n\n            // 压缩js\n            v.pipe(jsFilter)\n                .pipe(uglify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩css\n            v.pipe(cssFilter)\n                .pipe(cssMinify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩图片\n            v.pipe(picFilter)\n                .pipe(imagemin())\n                .pipe(gulp.dest('./dist'))\n\n            // 生成index.html\n            v.pipe(htmlFilter)\n                .pipe(gulp.dest('./'));\n        }\n\n## 使用postcss/autoprefixer/postcss-scss\n\n> 需要安装 `npm i postcss postcss-loader autoprefixer postcss-scss` ,切记一定要装 `postcss`\n\n- webpack.config.js中添加配置\n\n```javascript\nmodule:{\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css?importLoaders=1!postcss!sass'    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变\n        }\n    ]\n},\npostcss: [autoprefixer({\n    // 需要支持的浏览器或者平台的配置\n    browsers: [\n        \"android 4\",\n        \"iOS 6\",\n        \"last 2 versions\"\n    ]\n})],\n```\n\n- package.json中添加配置（也可以选择postcss.config.js等形式配置)\n\n```javascript\n\"postcss\": {\n    \"plugins\": {\n        \"parser\": \"postcss-scss\",\n        \"autoprefixer\": true\n    }\n}\n```\n","source":"_posts/工具使用.md","raw":"---\ntitle: 工具使用\ndate: 2016-9-28 12:42:06\ntags: 工具\n---\n\n# Git\n\n## 生成ssh\n\n    - 配置全局设置 `git config --global user.name \"username\"` `git confgi --global user.email \"example@xxx.com\"`\n    - 生成ssh `ssh-keygen -t rsa -C \"example@xxx.com\"` 会在C:\\User\\xxx目录下生成.ssh目录\n    - 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n    - 验证 ssh 是否添加成功 `ssh git@github.com`\n\n## 解决git clone时文件目录过长的方法\n\n    修改git设置 `git config --system core.longpaths true`\n\n## 解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误\n\n该错误是由于服务器ssh验证使用了一个过时的算法导致的,但是为了能够成功通过,需要在bash每次打开时设置一下 [stackoverflow solution](http://stackoverflow.com/questions/38770202/using-kexalgorithms-diffie-hellman-group1-sha1-did-not-resolve-no-matching-ke)\n\n```bash\nexport GIT_SSH_COMMAND='ssh -o KexAlgorithms=+diffie-hellman-group1-sha1'\n```\n\nstackoverflow上有热心人说可以在 git config 中做配置,但是我试了,并没有什么用,不过还是记录一下\n\n```bash\n\ngit config --global core.sshCommand \"ssh -o KexAlgorithms=+diffie-hellman-group1-sha1\"\ngit config --global core.scpCommand \"scp -o KexAlgorithms=+diffie-hellman-group1-sha1\"\n\n```\n\n<!--more-->\n\n# VS CODE\n\n## 配置代码段\n\n- `ctrl + p` 打开quick open\n- 输入 `>snippets` 回车\n- 进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车\n- 打开一个名称为javascript.json的配置文件\n- 假设我们要一个控制台打印的代码段,缩写为`_cl`,则需要添加如下配置\n\n        \"Console log\": {    // 代码段的名称\n            \"prefix\": \"_cl\",    // 触发代码段的缩写\n            \"body\": [\n                \"console.log('$1')\",    // 代码段的第一行 $1表示第一个变量\n                \"$2\"    // 代码段的第二行\n            ],\n            \"description\": \"输出到控制台\" // 代码段的描述\n        }\n\n- 保存即生效,当然只能在你指定的语言中生效\n\n# GULP/WEBPACK\n\n## 多入口打包ES6模块化文件\n\n        var gulp = require('gulp')\n        var webpack = require('webpack-stream')\n        var uglify = require('gulp-uglify')\n        var through = require('through2')\n\n        gulp.task('packagedScripts', () => {\n            gulp.src('./src/scripts/entrances/**/*')\n                .pipe(through.obj(function (file, enc, cb) {\n                    var __filename = file.path.split('\\\\').reverse()[0]\n                    gulp.src(file.path)\n                        .pipe(webpack({\n                            output: {\n                                filename: __filename\n                            },\n                            module: {\n                                loaders: [\n                                    {\n                                        test: /\\.js$/,\n                                        exclude: /node_modules/,\n                                        loader: 'babel',\n                                        query: {\n                                            presets: ['es2015']\n                                        }\n                                    }\n                                ]\n                            }\n                        }))\n                        .pipe(uglify())\n                        .pipe(gulp.dest('./src/scripts/packaged'))  // 输出到指定目录\n                    cb()\n                }))\n        })\n\n## gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\n\n        var gulp = require('gulp')\n        var sass = require('gulp-sass')\n        var imagemin = require('gulp-imagemin')\n        var uglify = require('gulp-uglify')\n        var cssMinify = require('gulp-minify-css')\n        var RevAll = require('gulp-rev-all')\n        var filter = require('gulp-filter')\n\n        var buildFunc = () => {\n            var jsFilter = filter('**/*.js')\n            var htmlFilter = filter('**/*.html')\n            var cssFilter = filter('**/*.css')\n            var picFilter = filter(['**/*.jpg', '**/*.png'])\n\n            var revAll = RevAll({\n                dontGlobal: ['.scss'],\n                dontRenameFile: ['.html'],\n                dontSearchFile: ['.css'],\n                transformPath: function(rev) {\n                    return rev\n                        .replace('scripts/', 'dist/scripts/')\n                        .replace('style/', 'dist/style/')\n                        .replace('images/', 'dist/images/')\n                }\n            })\n\n            var v = gulp.src('src/**/*')\n                .pipe(revAll.revision());\n\n            // 压缩js\n            v.pipe(jsFilter)\n                .pipe(uglify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩css\n            v.pipe(cssFilter)\n                .pipe(cssMinify())\n                .pipe(gulp.dest('./dist'));\n\n            // 压缩图片\n            v.pipe(picFilter)\n                .pipe(imagemin())\n                .pipe(gulp.dest('./dist'))\n\n            // 生成index.html\n            v.pipe(htmlFilter)\n                .pipe(gulp.dest('./'));\n        }\n\n## 使用postcss/autoprefixer/postcss-scss\n\n> 需要安装 `npm i postcss postcss-loader autoprefixer postcss-scss` ,切记一定要装 `postcss`\n\n- webpack.config.js中添加配置\n\n```javascript\nmodule:{\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css?importLoaders=1!postcss!sass'    // 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变\n        }\n    ]\n},\npostcss: [autoprefixer({\n    // 需要支持的浏览器或者平台的配置\n    browsers: [\n        \"android 4\",\n        \"iOS 6\",\n        \"last 2 versions\"\n    ]\n})],\n```\n\n- package.json中添加配置（也可以选择postcss.config.js等形式配置)\n\n```javascript\n\"postcss\": {\n    \"plugins\": {\n        \"parser\": \"postcss-scss\",\n        \"autoprefixer\": true\n    }\n}\n```\n","slug":"工具使用","published":1,"updated":"2018-06-20T04:07:32.239Z","_id":"cj2lg565e0009lwpot8a4oo9z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h2><pre><code>- 配置全局设置 `git config --global user.name &quot;username&quot;` `git confgi --global user.email &quot;example@xxx.com&quot;`\n- 生成ssh `ssh-keygen -t rsa -C &quot;example@xxx.com&quot;` 会在C:\\User\\xxx目录下生成.ssh目录\n- 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n- 验证 ssh 是否添加成功 `ssh git@github.com`\n</code></pre><h2 id=\"解决git-clone时文件目录过长的方法\"><a href=\"#解决git-clone时文件目录过长的方法\" class=\"headerlink\" title=\"解决git clone时文件目录过长的方法\"></a>解决git clone时文件目录过长的方法</h2><pre><code>修改git设置 `git config --system core.longpaths true`\n</code></pre><h2 id=\"解决-git-review-时-no-matching-key-exchange-method-found-Their-offer-diffie-hellman-group1-sha1-的错误\"><a href=\"#解决-git-review-时-no-matching-key-exchange-method-found-Their-offer-diffie-hellman-group1-sha1-的错误\" class=\"headerlink\" title=\"解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误\"></a>解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误</h2><p>该错误是由于服务器ssh验证使用了一个过时的算法导致的,但是为了能够成功通过,需要在bash每次打开时设置一下 <a href=\"http://stackoverflow.com/questions/38770202/using-kexalgorithms-diffie-hellman-group1-sha1-did-not-resolve-no-matching-ke\" target=\"_blank\" rel=\"external\">stackoverflow solution</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> GIT_SSH_COMMAND=<span class=\"string\">'ssh -o KexAlgorithms=+diffie-hellman-group1-sha1'</span></div></pre></td></tr></table></figure>\n<p>stackoverflow上有热心人说可以在 git config 中做配置,但是我试了,并没有什么用,不过还是记录一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git config --global core.sshCommand <span class=\"string\">\"ssh -o KexAlgorithms=+diffie-hellman-group1-sha1\"</span></div><div class=\"line\">git config --global core.scpCommand <span class=\"string\">\"scp -o KexAlgorithms=+diffie-hellman-group1-sha1\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"VS-CODE\"><a href=\"#VS-CODE\" class=\"headerlink\" title=\"VS CODE\"></a>VS CODE</h1><h2 id=\"配置代码段\"><a href=\"#配置代码段\" class=\"headerlink\" title=\"配置代码段\"></a>配置代码段</h2><ul>\n<li><code>ctrl + p</code> 打开quick open</li>\n<li>输入 <code>&gt;snippets</code> 回车</li>\n<li>进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车</li>\n<li>打开一个名称为javascript.json的配置文件</li>\n<li><p>假设我们要一个控制台打印的代码段,缩写为<code>_cl</code>,则需要添加如下配置</p>\n<pre><code>&quot;Console log&quot;: {    // 代码段的名称\n    &quot;prefix&quot;: &quot;_cl&quot;,    // 触发代码段的缩写\n    &quot;body&quot;: [\n        &quot;console.log(&apos;$1&apos;)&quot;,    // 代码段的第一行 $1表示第一个变量\n        &quot;$2&quot;    // 代码段的第二行\n    ],\n    &quot;description&quot;: &quot;输出到控制台&quot; // 代码段的描述\n}\n</code></pre></li>\n<li><p>保存即生效,当然只能在你指定的语言中生效</p>\n</li>\n</ul>\n<h1 id=\"GULP-WEBPACK\"><a href=\"#GULP-WEBPACK\" class=\"headerlink\" title=\"GULP/WEBPACK\"></a>GULP/WEBPACK</h1><h2 id=\"多入口打包ES6模块化文件\"><a href=\"#多入口打包ES6模块化文件\" class=\"headerlink\" title=\"多入口打包ES6模块化文件\"></a>多入口打包ES6模块化文件</h2><pre><code>var gulp = require(&apos;gulp&apos;)\nvar webpack = require(&apos;webpack-stream&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar through = require(&apos;through2&apos;)\n\ngulp.task(&apos;packagedScripts&apos;, () =&gt; {\n    gulp.src(&apos;./src/scripts/entrances/**/*&apos;)\n        .pipe(through.obj(function (file, enc, cb) {\n            var __filename = file.path.split(&apos;\\\\&apos;).reverse()[0]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename\n                    },\n                    module: {\n                        loaders: [\n                            {\n                                test: /\\.js$/,\n                                exclude: /node_modules/,\n                                loader: &apos;babel&apos;,\n                                query: {\n                                    presets: [&apos;es2015&apos;]\n                                }\n                            }\n                        ]\n                    }\n                }))\n                .pipe(uglify())\n                .pipe(gulp.dest(&apos;./src/scripts/packaged&apos;))  // 输出到指定目录\n            cb()\n        }))\n})\n</code></pre><h2 id=\"gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\"><a href=\"#gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\" class=\"headerlink\" title=\"gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\"></a>gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用</h2><pre><code>var gulp = require(&apos;gulp&apos;)\nvar sass = require(&apos;gulp-sass&apos;)\nvar imagemin = require(&apos;gulp-imagemin&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar cssMinify = require(&apos;gulp-minify-css&apos;)\nvar RevAll = require(&apos;gulp-rev-all&apos;)\nvar filter = require(&apos;gulp-filter&apos;)\n\nvar buildFunc = () =&gt; {\n    var jsFilter = filter(&apos;**/*.js&apos;)\n    var htmlFilter = filter(&apos;**/*.html&apos;)\n    var cssFilter = filter(&apos;**/*.css&apos;)\n    var picFilter = filter([&apos;**/*.jpg&apos;, &apos;**/*.png&apos;])\n\n    var revAll = RevAll({\n        dontGlobal: [&apos;.scss&apos;],\n        dontRenameFile: [&apos;.html&apos;],\n        dontSearchFile: [&apos;.css&apos;],\n        transformPath: function(rev) {\n            return rev\n                .replace(&apos;scripts/&apos;, &apos;dist/scripts/&apos;)\n                .replace(&apos;style/&apos;, &apos;dist/style/&apos;)\n                .replace(&apos;images/&apos;, &apos;dist/images/&apos;)\n        }\n    })\n\n    var v = gulp.src(&apos;src/**/*&apos;)\n        .pipe(revAll.revision());\n\n    // 压缩js\n    v.pipe(jsFilter)\n        .pipe(uglify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩css\n    v.pipe(cssFilter)\n        .pipe(cssMinify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩图片\n    v.pipe(picFilter)\n        .pipe(imagemin())\n        .pipe(gulp.dest(&apos;./dist&apos;))\n\n    // 生成index.html\n    v.pipe(htmlFilter)\n        .pipe(gulp.dest(&apos;./&apos;));\n}\n</code></pre><h2 id=\"使用postcss-autoprefixer-postcss-scss\"><a href=\"#使用postcss-autoprefixer-postcss-scss\" class=\"headerlink\" title=\"使用postcss/autoprefixer/postcss-scss\"></a>使用postcss/autoprefixer/postcss-scss</h2><blockquote>\n<p>需要安装 <code>npm i postcss postcss-loader autoprefixer postcss-scss</code> ,切记一定要装 <code>postcss</code></p>\n</blockquote>\n<ul>\n<li>webpack.config.js中添加配置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>:&#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.scss$/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'style!css?importLoaders=1!postcss!sass'</span>    <span class=\"comment\">// 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;,</div><div class=\"line\">postcss: [autoprefixer(&#123;</div><div class=\"line\">    <span class=\"comment\">// 需要支持的浏览器或者平台的配置</span></div><div class=\"line\">    browsers: [</div><div class=\"line\">        <span class=\"string\">\"android 4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"iOS 6\"</span>,</div><div class=\"line\">        <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;)],</div></pre></td></tr></table></figure>\n<ul>\n<li>package.json中添加配置（也可以选择postcss.config.js等形式配置)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"postcss\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"plugins\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"parser\"</span>: <span class=\"string\">\"postcss-scss\"</span>,</div><div class=\"line\">        <span class=\"string\">\"autoprefixer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h2><pre><code>- 配置全局设置 `git config --global user.name &quot;username&quot;` `git confgi --global user.email &quot;example@xxx.com&quot;`\n- 生成ssh `ssh-keygen -t rsa -C &quot;example@xxx.com&quot;` 会在C:\\User\\xxx目录下生成.ssh目录\n- 将生成的.ssh目录中的id_rsa.pub的内容添加到gitlab/github的个人账户的ssh-key\n- 验证 ssh 是否添加成功 `ssh git@github.com`\n</code></pre><h2 id=\"解决git-clone时文件目录过长的方法\"><a href=\"#解决git-clone时文件目录过长的方法\" class=\"headerlink\" title=\"解决git clone时文件目录过长的方法\"></a>解决git clone时文件目录过长的方法</h2><pre><code>修改git设置 `git config --system core.longpaths true`\n</code></pre><h2 id=\"解决-git-review-时-no-matching-key-exchange-method-found-Their-offer-diffie-hellman-group1-sha1-的错误\"><a href=\"#解决-git-review-时-no-matching-key-exchange-method-found-Their-offer-diffie-hellman-group1-sha1-的错误\" class=\"headerlink\" title=\"解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误\"></a>解决 git review 时 no matching key exchange method found. Their offer: diffie-hellman-group1-sha1 的错误</h2><p>该错误是由于服务器ssh验证使用了一个过时的算法导致的,但是为了能够成功通过,需要在bash每次打开时设置一下 <a href=\"http://stackoverflow.com/questions/38770202/using-kexalgorithms-diffie-hellman-group1-sha1-did-not-resolve-no-matching-ke\" target=\"_blank\" rel=\"external\">stackoverflow solution</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> GIT_SSH_COMMAND=<span class=\"string\">'ssh -o KexAlgorithms=+diffie-hellman-group1-sha1'</span></div></pre></td></tr></table></figure>\n<p>stackoverflow上有热心人说可以在 git config 中做配置,但是我试了,并没有什么用,不过还是记录一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git config --global core.sshCommand <span class=\"string\">\"ssh -o KexAlgorithms=+diffie-hellman-group1-sha1\"</span></div><div class=\"line\">git config --global core.scpCommand <span class=\"string\">\"scp -o KexAlgorithms=+diffie-hellman-group1-sha1\"</span></div></pre></td></tr></table></figure>","more":"<h1 id=\"VS-CODE\"><a href=\"#VS-CODE\" class=\"headerlink\" title=\"VS CODE\"></a>VS CODE</h1><h2 id=\"配置代码段\"><a href=\"#配置代码段\" class=\"headerlink\" title=\"配置代码段\"></a>配置代码段</h2><ul>\n<li><code>ctrl + p</code> 打开quick open</li>\n<li>输入 <code>&gt;snippets</code> 回车</li>\n<li>进入到代码段语言选择输入栏,输入你想编辑的代码段使用的语言,譬如javascript,回车</li>\n<li>打开一个名称为javascript.json的配置文件</li>\n<li><p>假设我们要一个控制台打印的代码段,缩写为<code>_cl</code>,则需要添加如下配置</p>\n<pre><code>&quot;Console log&quot;: {    // 代码段的名称\n    &quot;prefix&quot;: &quot;_cl&quot;,    // 触发代码段的缩写\n    &quot;body&quot;: [\n        &quot;console.log(&apos;$1&apos;)&quot;,    // 代码段的第一行 $1表示第一个变量\n        &quot;$2&quot;    // 代码段的第二行\n    ],\n    &quot;description&quot;: &quot;输出到控制台&quot; // 代码段的描述\n}\n</code></pre></li>\n<li><p>保存即生效,当然只能在你指定的语言中生效</p>\n</li>\n</ul>\n<h1 id=\"GULP-WEBPACK\"><a href=\"#GULP-WEBPACK\" class=\"headerlink\" title=\"GULP/WEBPACK\"></a>GULP/WEBPACK</h1><h2 id=\"多入口打包ES6模块化文件\"><a href=\"#多入口打包ES6模块化文件\" class=\"headerlink\" title=\"多入口打包ES6模块化文件\"></a>多入口打包ES6模块化文件</h2><pre><code>var gulp = require(&apos;gulp&apos;)\nvar webpack = require(&apos;webpack-stream&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar through = require(&apos;through2&apos;)\n\ngulp.task(&apos;packagedScripts&apos;, () =&gt; {\n    gulp.src(&apos;./src/scripts/entrances/**/*&apos;)\n        .pipe(through.obj(function (file, enc, cb) {\n            var __filename = file.path.split(&apos;\\\\&apos;).reverse()[0]\n            gulp.src(file.path)\n                .pipe(webpack({\n                    output: {\n                        filename: __filename\n                    },\n                    module: {\n                        loaders: [\n                            {\n                                test: /\\.js$/,\n                                exclude: /node_modules/,\n                                loader: &apos;babel&apos;,\n                                query: {\n                                    presets: [&apos;es2015&apos;]\n                                }\n                            }\n                        ]\n                    }\n                }))\n                .pipe(uglify())\n                .pipe(gulp.dest(&apos;./src/scripts/packaged&apos;))  // 输出到指定目录\n            cb()\n        }))\n})\n</code></pre><h2 id=\"gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\"><a href=\"#gulp-rev-all-gulp-filter-生成文件hash值-并替换对其的引用\" class=\"headerlink\" title=\"gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用\"></a>gulp-rev-all,gulp-filter 生成文件hash值 并替换对其的引用</h2><pre><code>var gulp = require(&apos;gulp&apos;)\nvar sass = require(&apos;gulp-sass&apos;)\nvar imagemin = require(&apos;gulp-imagemin&apos;)\nvar uglify = require(&apos;gulp-uglify&apos;)\nvar cssMinify = require(&apos;gulp-minify-css&apos;)\nvar RevAll = require(&apos;gulp-rev-all&apos;)\nvar filter = require(&apos;gulp-filter&apos;)\n\nvar buildFunc = () =&gt; {\n    var jsFilter = filter(&apos;**/*.js&apos;)\n    var htmlFilter = filter(&apos;**/*.html&apos;)\n    var cssFilter = filter(&apos;**/*.css&apos;)\n    var picFilter = filter([&apos;**/*.jpg&apos;, &apos;**/*.png&apos;])\n\n    var revAll = RevAll({\n        dontGlobal: [&apos;.scss&apos;],\n        dontRenameFile: [&apos;.html&apos;],\n        dontSearchFile: [&apos;.css&apos;],\n        transformPath: function(rev) {\n            return rev\n                .replace(&apos;scripts/&apos;, &apos;dist/scripts/&apos;)\n                .replace(&apos;style/&apos;, &apos;dist/style/&apos;)\n                .replace(&apos;images/&apos;, &apos;dist/images/&apos;)\n        }\n    })\n\n    var v = gulp.src(&apos;src/**/*&apos;)\n        .pipe(revAll.revision());\n\n    // 压缩js\n    v.pipe(jsFilter)\n        .pipe(uglify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩css\n    v.pipe(cssFilter)\n        .pipe(cssMinify())\n        .pipe(gulp.dest(&apos;./dist&apos;));\n\n    // 压缩图片\n    v.pipe(picFilter)\n        .pipe(imagemin())\n        .pipe(gulp.dest(&apos;./dist&apos;))\n\n    // 生成index.html\n    v.pipe(htmlFilter)\n        .pipe(gulp.dest(&apos;./&apos;));\n}\n</code></pre><h2 id=\"使用postcss-autoprefixer-postcss-scss\"><a href=\"#使用postcss-autoprefixer-postcss-scss\" class=\"headerlink\" title=\"使用postcss/autoprefixer/postcss-scss\"></a>使用postcss/autoprefixer/postcss-scss</h2><blockquote>\n<p>需要安装 <code>npm i postcss postcss-loader autoprefixer postcss-scss</code> ,切记一定要装 <code>postcss</code></p>\n</blockquote>\n<ul>\n<li>webpack.config.js中添加配置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>:&#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.scss$/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'style!css?importLoaders=1!postcss!sass'</span>    <span class=\"comment\">// 先sass-loader将scss文件编译成css 再做后续的处理，所以顺序不能变</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;,</div><div class=\"line\">postcss: [autoprefixer(&#123;</div><div class=\"line\">    <span class=\"comment\">// 需要支持的浏览器或者平台的配置</span></div><div class=\"line\">    browsers: [</div><div class=\"line\">        <span class=\"string\">\"android 4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"iOS 6\"</span>,</div><div class=\"line\">        <span class=\"string\">\"last 2 versions\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;)],</div></pre></td></tr></table></figure>\n<ul>\n<li>package.json中添加配置（也可以选择postcss.config.js等形式配置)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"postcss\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"plugins\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"parser\"</span>: <span class=\"string\">\"postcss-scss\"</span>,</div><div class=\"line\">        <span class=\"string\">\"autoprefixer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"常用指令","date":"2018-03-15T04:42:06.000Z","_content":"\n# 通用指令\n\n- 查看占用端口\n  - sudo lsof -i :PORT 显示指定端口的占用进程\n  - ps -ef | grep \"xxx\"  查看指定名称的进程\n  - sudo kill -9 PID 结束指定进程\n- 查看磁盘占用\n  - df -h 查看根目录的挂载盘占用情况\n  - du -h -d 1 PATH 查看指定目录的磁盘情况\n- 查找文件\n  - find / -name \"xxx\"\n- crontab 修改默认编辑器\n  - select-editor\n- 给用户添加目录权限\n  - chown user:user DIR\n    - chmod 760 DIR\n- 给用户添加 sudo 权限\n  - vim /etc/sudoers 然后添加权限记录\n\n<!--more-->\n\n# scp\n\n- 远程下载文件到本地  scp -P 端口 username@servername:/remote_path/filename ~/local_destination\n- 上传本地文件到远程  scp -P 端口 ~/local_path/local_filename username@servername:/remote_path\n\n# ssh\n\n- 生成 rsa签名\n  - ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \n\n- 安全配置\n  - vi /etc/ssh/sshd_config\n  - 禁用密码验证\n    - PasswordAuthentication no\n  - 启用密钥验证\n    - RSAAuthentication yes\n    - PubkeyAuthentication yes\n  - 指定公钥数据库文件\n    - AuthorsizedKeysFile PATH/TO/FILE\n\n- 将远程机器端口8082映射到本地8000\n  - ssh -NfL *:8000:localhost:8082 root@47.52.207.196 -p 65499\n\n# shadowsocks\n\n- 安装\n  - sudo apt-get install python-pip\n  - sudo pip install setuptools\n  - sudo pip install shadowsocks\n\n- 创建配置文件\n  - vim /etc/shadowsocks.conf\n\n{\n  \"server\": \"服务器的IP地址\",\n  \"server_port\": 12306,\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": 1080,\n  \"password\": \"cybereits\",\n  \"timeout\": 300,\n  \"method\": \"rc4-md5\"\n}\n\n- 开启 shadowsocks 服务器\n  - sudo ssserver -c /etc/shadowsocks.conf -d start\n\n- 本地使用 shadowsocks\n  - sudo sslocal -c /etc/shadowsocks.conf -d start\n\n# git\n\n- 添加本地代理\n\n```shell\ngit gc --aggressive\ngit repack -a -f -d --window=250 --depth=250\ngit config --global http.postBuffer 524288000\ngit config --global https.postBuffer 524288000\n```\n\n- 添加 shadowsocks 在 1080 端口后\n\n```shell\ngit config --global http.proxy socks5://127.0.0.1:1080\ngit config --global https.proxy socks5://127.0.0.1:1080\n```\n\n# shell 交互\n\n```shell\n#!/usr/bin/expect -f\nspawn ssh user@my.server.com\nexpect \"assword:\"\nsend \"mypassword\\r\"\ninteract\n```\n\n# mysql 定时备份\n\n```shell\n#!/bin/bash\n\nfolder=~/backup/mysql\ntime=`date +%Y%m%d%H`\nfilename=backup\nhost=localhost\nuser=root\npassword=123\ndb=cybereits\n\nmysqldump -h$host -u$user -p$password $db|gzip>$folder/$filename.$time.sql.gz\n\nfind $folder -name \"$filename_*.sql.gz\" -type f -mtime +5 -exec rm {} \\; > /dev/null 2>&1\n```\n\n说明：\n\n代码中 time=\\` date +%Y%m%d%H \\` 也可以写为 time=\"$(date +\"%Y%m%d$H\")\"\n\ndb：数据库名；\nuser：数据库用户名；\npassword：用户密码；\nfilename：自定义备份文件前缀标识。\n-type f 表示查找普通类型的文件，f表示普通文件。\n-mtime +5 按照文件的更改时间来查找文件，+5表示文件更改时间距现在5天以前；如果是 -mmin +5 表示文件更改时间距现在5分钟以前。\n-exec rm {} \\; 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\\，最后是一个分号。\n/dev/null 2>&1 把标准出错重定向到标准输出，然后扔到/DEV/NULL下面去。通俗的说，就是把所有标准输出和标准出错都扔到垃圾桶里面；其中的& 表示让该命令在后台执行。\n\n为脚本添加执行权限 `chmod +x /usr/sbin/bakmysql.sh`\n\n检查有没安装crond,如果没有，先安装 `yum -y install vixie-cron yum -y install crontabs`\n\n`vi /etc/crontab`\n\n在最后一行中加入 `00 3 * * * root /usr/sbin/bakmysql.sh` 表示每天3点00分执行备份\n\n重启crontab `/etc/rc.d/init.d/crond restart` 或者 `service crond restart`\n\n恢复数据备份文件：\n\n非压缩备份文件恢复：`mysql -u root -p dataname < name2008010103.sql`\n\n从压缩文件直接恢复：`gzip < name2008010103.sql.gz | mysql -u root -p dataname` 或：`zcat name2008010103.sql.gz | mysql -u root -p`\n\n# geth 命令行使用说明\n\n调用其它合约的方法\n\n```javascript\n// ABI_OBJECT 合约 ABI\n// DEPLOY_ADDR 合约部署地址\n// 两者都可以在 etherscan 查询到\nvar contract = eth.contract(ABI_OBJECT).at(DEPLOY_ADDR)\n// 解锁转出钱包（转账才需要 查询不需要）\nweb3.personal.unlockAccount(\"转出钱包地址\",\"钱包密钥\",300)  // 解锁 300 秒\n// 调用 ERC-20 标准的 transfer 方法\ncontract.transfer.sendTransaction(\"收款地址\",\"代币数量 * 合约 decimal\", { from: \"转出钱包地址\" })\n```\n","source":"_posts/常用指令.md","raw":"---\ntitle: 常用指令\ndate: 2018-3-15 12:42:06\ntags: shell 指令\n---\n\n# 通用指令\n\n- 查看占用端口\n  - sudo lsof -i :PORT 显示指定端口的占用进程\n  - ps -ef | grep \"xxx\"  查看指定名称的进程\n  - sudo kill -9 PID 结束指定进程\n- 查看磁盘占用\n  - df -h 查看根目录的挂载盘占用情况\n  - du -h -d 1 PATH 查看指定目录的磁盘情况\n- 查找文件\n  - find / -name \"xxx\"\n- crontab 修改默认编辑器\n  - select-editor\n- 给用户添加目录权限\n  - chown user:user DIR\n    - chmod 760 DIR\n- 给用户添加 sudo 权限\n  - vim /etc/sudoers 然后添加权限记录\n\n<!--more-->\n\n# scp\n\n- 远程下载文件到本地  scp -P 端口 username@servername:/remote_path/filename ~/local_destination\n- 上传本地文件到远程  scp -P 端口 ~/local_path/local_filename username@servername:/remote_path\n\n# ssh\n\n- 生成 rsa签名\n  - ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \n\n- 安全配置\n  - vi /etc/ssh/sshd_config\n  - 禁用密码验证\n    - PasswordAuthentication no\n  - 启用密钥验证\n    - RSAAuthentication yes\n    - PubkeyAuthentication yes\n  - 指定公钥数据库文件\n    - AuthorsizedKeysFile PATH/TO/FILE\n\n- 将远程机器端口8082映射到本地8000\n  - ssh -NfL *:8000:localhost:8082 root@47.52.207.196 -p 65499\n\n# shadowsocks\n\n- 安装\n  - sudo apt-get install python-pip\n  - sudo pip install setuptools\n  - sudo pip install shadowsocks\n\n- 创建配置文件\n  - vim /etc/shadowsocks.conf\n\n{\n  \"server\": \"服务器的IP地址\",\n  \"server_port\": 12306,\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": 1080,\n  \"password\": \"cybereits\",\n  \"timeout\": 300,\n  \"method\": \"rc4-md5\"\n}\n\n- 开启 shadowsocks 服务器\n  - sudo ssserver -c /etc/shadowsocks.conf -d start\n\n- 本地使用 shadowsocks\n  - sudo sslocal -c /etc/shadowsocks.conf -d start\n\n# git\n\n- 添加本地代理\n\n```shell\ngit gc --aggressive\ngit repack -a -f -d --window=250 --depth=250\ngit config --global http.postBuffer 524288000\ngit config --global https.postBuffer 524288000\n```\n\n- 添加 shadowsocks 在 1080 端口后\n\n```shell\ngit config --global http.proxy socks5://127.0.0.1:1080\ngit config --global https.proxy socks5://127.0.0.1:1080\n```\n\n# shell 交互\n\n```shell\n#!/usr/bin/expect -f\nspawn ssh user@my.server.com\nexpect \"assword:\"\nsend \"mypassword\\r\"\ninteract\n```\n\n# mysql 定时备份\n\n```shell\n#!/bin/bash\n\nfolder=~/backup/mysql\ntime=`date +%Y%m%d%H`\nfilename=backup\nhost=localhost\nuser=root\npassword=123\ndb=cybereits\n\nmysqldump -h$host -u$user -p$password $db|gzip>$folder/$filename.$time.sql.gz\n\nfind $folder -name \"$filename_*.sql.gz\" -type f -mtime +5 -exec rm {} \\; > /dev/null 2>&1\n```\n\n说明：\n\n代码中 time=\\` date +%Y%m%d%H \\` 也可以写为 time=\"$(date +\"%Y%m%d$H\")\"\n\ndb：数据库名；\nuser：数据库用户名；\npassword：用户密码；\nfilename：自定义备份文件前缀标识。\n-type f 表示查找普通类型的文件，f表示普通文件。\n-mtime +5 按照文件的更改时间来查找文件，+5表示文件更改时间距现在5天以前；如果是 -mmin +5 表示文件更改时间距现在5分钟以前。\n-exec rm {} \\; 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\\，最后是一个分号。\n/dev/null 2>&1 把标准出错重定向到标准输出，然后扔到/DEV/NULL下面去。通俗的说，就是把所有标准输出和标准出错都扔到垃圾桶里面；其中的& 表示让该命令在后台执行。\n\n为脚本添加执行权限 `chmod +x /usr/sbin/bakmysql.sh`\n\n检查有没安装crond,如果没有，先安装 `yum -y install vixie-cron yum -y install crontabs`\n\n`vi /etc/crontab`\n\n在最后一行中加入 `00 3 * * * root /usr/sbin/bakmysql.sh` 表示每天3点00分执行备份\n\n重启crontab `/etc/rc.d/init.d/crond restart` 或者 `service crond restart`\n\n恢复数据备份文件：\n\n非压缩备份文件恢复：`mysql -u root -p dataname < name2008010103.sql`\n\n从压缩文件直接恢复：`gzip < name2008010103.sql.gz | mysql -u root -p dataname` 或：`zcat name2008010103.sql.gz | mysql -u root -p`\n\n# geth 命令行使用说明\n\n调用其它合约的方法\n\n```javascript\n// ABI_OBJECT 合约 ABI\n// DEPLOY_ADDR 合约部署地址\n// 两者都可以在 etherscan 查询到\nvar contract = eth.contract(ABI_OBJECT).at(DEPLOY_ADDR)\n// 解锁转出钱包（转账才需要 查询不需要）\nweb3.personal.unlockAccount(\"转出钱包地址\",\"钱包密钥\",300)  // 解锁 300 秒\n// 调用 ERC-20 标准的 transfer 方法\ncontract.transfer.sendTransaction(\"收款地址\",\"代币数量 * 合约 decimal\", { from: \"转出钱包地址\" })\n```\n","slug":"常用指令","published":1,"updated":"2018-06-20T04:20:23.263Z","_id":"cjejkk0bv00009d2e46j320pw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"通用指令\"><a href=\"#通用指令\" class=\"headerlink\" title=\"通用指令\"></a>通用指令</h1><ul>\n<li>查看占用端口<ul>\n<li>sudo lsof -i :PORT 显示指定端口的占用进程</li>\n<li>ps -ef | grep “xxx”  查看指定名称的进程</li>\n<li>sudo kill -9 PID 结束指定进程</li>\n</ul>\n</li>\n<li>查看磁盘占用<ul>\n<li>df -h 查看根目录的挂载盘占用情况</li>\n<li>du -h -d 1 PATH 查看指定目录的磁盘情况</li>\n</ul>\n</li>\n<li>查找文件<ul>\n<li>find / -name “xxx”</li>\n</ul>\n</li>\n<li>crontab 修改默认编辑器<ul>\n<li>select-editor</li>\n</ul>\n</li>\n<li>给用户添加目录权限<ul>\n<li>chown user:user DIR<ul>\n<li>chmod 760 DIR</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>给用户添加 sudo 权限<ul>\n<li>vim /etc/sudoers 然后添加权限记录</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h1><ul>\n<li>远程下载文件到本地  scp -P 端口 username@servername:/remote_path/filename ~/local_destination</li>\n<li>上传本地文件到远程  scp -P 端口 ~/local_path/local_filename username@servername:/remote_path</li>\n</ul>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li><p>生成 rsa签名</p>\n<ul>\n<li>ssh-keygen -t rsa -b 4096 -C “your_email@example.com” </li>\n</ul>\n</li>\n<li><p>安全配置</p>\n<ul>\n<li>vi /etc/ssh/sshd_config</li>\n<li>禁用密码验证<ul>\n<li>PasswordAuthentication no</li>\n</ul>\n</li>\n<li>启用密钥验证<ul>\n<li>RSAAuthentication yes</li>\n<li>PubkeyAuthentication yes</li>\n</ul>\n</li>\n<li>指定公钥数据库文件<ul>\n<li>AuthorsizedKeysFile PATH/TO/FILE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将远程机器端口8082映射到本地8000</p>\n<ul>\n<li>ssh -NfL *:8000:localhost:8082 root@47.52.207.196 -p 65499</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"shadowsocks\"><a href=\"#shadowsocks\" class=\"headerlink\" title=\"shadowsocks\"></a>shadowsocks</h1><ul>\n<li><p>安装</p>\n<ul>\n<li>sudo apt-get install python-pip</li>\n<li>sudo pip install setuptools</li>\n<li>sudo pip install shadowsocks</li>\n</ul>\n</li>\n<li><p>创建配置文件</p>\n<ul>\n<li>vim /etc/shadowsocks.conf</li>\n</ul>\n</li>\n</ul>\n<p>{<br>  “server”: “服务器的IP地址”,<br>  “server_port”: 12306,<br>  “local_address”: “127.0.0.1”,<br>  “local_port”: 1080,<br>  “password”: “cybereits”,<br>  “timeout”: 300,<br>  “method”: “rc4-md5”<br>}</p>\n<ul>\n<li><p>开启 shadowsocks 服务器</p>\n<ul>\n<li>sudo ssserver -c /etc/shadowsocks.conf -d start</li>\n</ul>\n</li>\n<li><p>本地使用 shadowsocks</p>\n<ul>\n<li>sudo sslocal -c /etc/shadowsocks.conf -d start</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><ul>\n<li>添加本地代理</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git gc --aggressive</div><div class=\"line\">git repack -a -f -d --window=250 --depth=250</div><div class=\"line\">git config --global http.postBuffer 524288000</div><div class=\"line\">git config --global https.postBuffer 524288000</div></pre></td></tr></table></figure>\n<ul>\n<li>添加 shadowsocks 在 1080 端口后</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.proxy socks5://127.0.0.1:1080</div><div class=\"line\">git config --global https.proxy socks5://127.0.0.1:1080</div></pre></td></tr></table></figure>\n<h1 id=\"shell-交互\"><a href=\"#shell-交互\" class=\"headerlink\" title=\"shell 交互\"></a>shell 交互</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/usr/bin/expect -f</div><div class=\"line\">spawn ssh user@my.server.com</div><div class=\"line\">expect \"assword:\"</div><div class=\"line\">send \"mypassword\\r\"</div><div class=\"line\">interact</div></pre></td></tr></table></figure>\n<h1 id=\"mysql-定时备份\"><a href=\"#mysql-定时备份\" class=\"headerlink\" title=\"mysql 定时备份\"></a>mysql 定时备份</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/bin/bash</div><div class=\"line\"></div><div class=\"line\">folder=~/backup/mysql</div><div class=\"line\">time=`date +%Y%m%d%H`</div><div class=\"line\">filename=backup</div><div class=\"line\">host=localhost</div><div class=\"line\">user=root</div><div class=\"line\">password=123</div><div class=\"line\">db=cybereits</div><div class=\"line\"></div><div class=\"line\">mysqldump -h$host -u$user -p$password $db|gzip&gt;$folder/$filename.$time.sql.gz</div><div class=\"line\"></div><div class=\"line\">find $folder -name \"$filename_*.sql.gz\" -type f -mtime +5 -exec rm &#123;&#125; \\; &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>代码中 time=` date +%Y%m%d%H ` 也可以写为 time=”$(date +”%Y%m%d$H”)”</p>\n<p>db：数据库名；<br>user：数据库用户名；<br>password：用户密码；<br>filename：自定义备份文件前缀标识。<br>-type f 表示查找普通类型的文件，f表示普通文件。<br>-mtime +5 按照文件的更改时间来查找文件，+5表示文件更改时间距现在5天以前；如果是 -mmin +5 表示文件更改时间距现在5分钟以前。<br>-exec rm {} \\; 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\\，最后是一个分号。<br>/dev/null 2&gt;&amp;1 把标准出错重定向到标准输出，然后扔到/DEV/NULL下面去。通俗的说，就是把所有标准输出和标准出错都扔到垃圾桶里面；其中的&amp; 表示让该命令在后台执行。</p>\n<p>为脚本添加执行权限 <code>chmod +x /usr/sbin/bakmysql.sh</code></p>\n<p>检查有没安装crond,如果没有，先安装 <code>yum -y install vixie-cron yum -y install crontabs</code></p>\n<p><code>vi /etc/crontab</code></p>\n<p>在最后一行中加入 <code>00 3 * * * root /usr/sbin/bakmysql.sh</code> 表示每天3点00分执行备份</p>\n<p>重启crontab <code>/etc/rc.d/init.d/crond restart</code> 或者 <code>service crond restart</code></p>\n<p>恢复数据备份文件：</p>\n<p>非压缩备份文件恢复：<code>mysql -u root -p dataname &lt; name2008010103.sql</code></p>\n<p>从压缩文件直接恢复：<code>gzip &lt; name2008010103.sql.gz | mysql -u root -p dataname</code> 或：<code>zcat name2008010103.sql.gz | mysql -u root -p</code></p>\n<h1 id=\"geth-命令行使用说明\"><a href=\"#geth-命令行使用说明\" class=\"headerlink\" title=\"geth 命令行使用说明\"></a>geth 命令行使用说明</h1><p>调用其它合约的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ABI_OBJECT 合约 ABI</span></div><div class=\"line\"><span class=\"comment\">// DEPLOY_ADDR 合约部署地址</span></div><div class=\"line\"><span class=\"comment\">// 两者都可以在 etherscan 查询到</span></div><div class=\"line\"><span class=\"keyword\">var</span> contract = eth.contract(ABI_OBJECT).at(DEPLOY_ADDR)</div><div class=\"line\"><span class=\"comment\">// 解锁转出钱包（转账才需要 查询不需要）</span></div><div class=\"line\">web3.personal.unlockAccount(<span class=\"string\">\"转出钱包地址\"</span>,<span class=\"string\">\"钱包密钥\"</span>,<span class=\"number\">300</span>)  <span class=\"comment\">// 解锁 300 秒</span></div><div class=\"line\"><span class=\"comment\">// 调用 ERC-20 标准的 transfer 方法</span></div><div class=\"line\">contract.transfer.sendTransaction(<span class=\"string\">\"收款地址\"</span>,<span class=\"string\">\"代币数量 * 合约 decimal\"</span>, &#123; <span class=\"attr\">from</span>: <span class=\"string\">\"转出钱包地址\"</span> &#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"通用指令\"><a href=\"#通用指令\" class=\"headerlink\" title=\"通用指令\"></a>通用指令</h1><ul>\n<li>查看占用端口<ul>\n<li>sudo lsof -i :PORT 显示指定端口的占用进程</li>\n<li>ps -ef | grep “xxx”  查看指定名称的进程</li>\n<li>sudo kill -9 PID 结束指定进程</li>\n</ul>\n</li>\n<li>查看磁盘占用<ul>\n<li>df -h 查看根目录的挂载盘占用情况</li>\n<li>du -h -d 1 PATH 查看指定目录的磁盘情况</li>\n</ul>\n</li>\n<li>查找文件<ul>\n<li>find / -name “xxx”</li>\n</ul>\n</li>\n<li>crontab 修改默认编辑器<ul>\n<li>select-editor</li>\n</ul>\n</li>\n<li>给用户添加目录权限<ul>\n<li>chown user:user DIR<ul>\n<li>chmod 760 DIR</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>给用户添加 sudo 权限<ul>\n<li>vim /etc/sudoers 然后添加权限记录</li>\n</ul>\n</li>\n</ul>","more":"<h1 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h1><ul>\n<li>远程下载文件到本地  scp -P 端口 username@servername:/remote_path/filename ~/local_destination</li>\n<li>上传本地文件到远程  scp -P 端口 ~/local_path/local_filename username@servername:/remote_path</li>\n</ul>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><ul>\n<li><p>生成 rsa签名</p>\n<ul>\n<li>ssh-keygen -t rsa -b 4096 -C “your_email@example.com” </li>\n</ul>\n</li>\n<li><p>安全配置</p>\n<ul>\n<li>vi /etc/ssh/sshd_config</li>\n<li>禁用密码验证<ul>\n<li>PasswordAuthentication no</li>\n</ul>\n</li>\n<li>启用密钥验证<ul>\n<li>RSAAuthentication yes</li>\n<li>PubkeyAuthentication yes</li>\n</ul>\n</li>\n<li>指定公钥数据库文件<ul>\n<li>AuthorsizedKeysFile PATH/TO/FILE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将远程机器端口8082映射到本地8000</p>\n<ul>\n<li>ssh -NfL *:8000:localhost:8082 root@47.52.207.196 -p 65499</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"shadowsocks\"><a href=\"#shadowsocks\" class=\"headerlink\" title=\"shadowsocks\"></a>shadowsocks</h1><ul>\n<li><p>安装</p>\n<ul>\n<li>sudo apt-get install python-pip</li>\n<li>sudo pip install setuptools</li>\n<li>sudo pip install shadowsocks</li>\n</ul>\n</li>\n<li><p>创建配置文件</p>\n<ul>\n<li>vim /etc/shadowsocks.conf</li>\n</ul>\n</li>\n</ul>\n<p>{<br>  “server”: “服务器的IP地址”,<br>  “server_port”: 12306,<br>  “local_address”: “127.0.0.1”,<br>  “local_port”: 1080,<br>  “password”: “cybereits”,<br>  “timeout”: 300,<br>  “method”: “rc4-md5”<br>}</p>\n<ul>\n<li><p>开启 shadowsocks 服务器</p>\n<ul>\n<li>sudo ssserver -c /etc/shadowsocks.conf -d start</li>\n</ul>\n</li>\n<li><p>本地使用 shadowsocks</p>\n<ul>\n<li>sudo sslocal -c /etc/shadowsocks.conf -d start</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><ul>\n<li>添加本地代理</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git gc --aggressive</div><div class=\"line\">git repack -a -f -d --window=250 --depth=250</div><div class=\"line\">git config --global http.postBuffer 524288000</div><div class=\"line\">git config --global https.postBuffer 524288000</div></pre></td></tr></table></figure>\n<ul>\n<li>添加 shadowsocks 在 1080 端口后</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.proxy socks5://127.0.0.1:1080</div><div class=\"line\">git config --global https.proxy socks5://127.0.0.1:1080</div></pre></td></tr></table></figure>\n<h1 id=\"shell-交互\"><a href=\"#shell-交互\" class=\"headerlink\" title=\"shell 交互\"></a>shell 交互</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/usr/bin/expect -f</div><div class=\"line\">spawn ssh user@my.server.com</div><div class=\"line\">expect \"assword:\"</div><div class=\"line\">send \"mypassword\\r\"</div><div class=\"line\">interact</div></pre></td></tr></table></figure>\n<h1 id=\"mysql-定时备份\"><a href=\"#mysql-定时备份\" class=\"headerlink\" title=\"mysql 定时备份\"></a>mysql 定时备份</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/bin/bash</div><div class=\"line\"></div><div class=\"line\">folder=~/backup/mysql</div><div class=\"line\">time=`date +%Y%m%d%H`</div><div class=\"line\">filename=backup</div><div class=\"line\">host=localhost</div><div class=\"line\">user=root</div><div class=\"line\">password=123</div><div class=\"line\">db=cybereits</div><div class=\"line\"></div><div class=\"line\">mysqldump -h$host -u$user -p$password $db|gzip&gt;$folder/$filename.$time.sql.gz</div><div class=\"line\"></div><div class=\"line\">find $folder -name \"$filename_*.sql.gz\" -type f -mtime +5 -exec rm &#123;&#125; \\; &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>代码中 time=` date +%Y%m%d%H ` 也可以写为 time=”$(date +”%Y%m%d$H”)”</p>\n<p>db：数据库名；<br>user：数据库用户名；<br>password：用户密码；<br>filename：自定义备份文件前缀标识。<br>-type f 表示查找普通类型的文件，f表示普通文件。<br>-mtime +5 按照文件的更改时间来查找文件，+5表示文件更改时间距现在5天以前；如果是 -mmin +5 表示文件更改时间距现在5分钟以前。<br>-exec rm {} \\; 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\\，最后是一个分号。<br>/dev/null 2&gt;&amp;1 把标准出错重定向到标准输出，然后扔到/DEV/NULL下面去。通俗的说，就是把所有标准输出和标准出错都扔到垃圾桶里面；其中的&amp; 表示让该命令在后台执行。</p>\n<p>为脚本添加执行权限 <code>chmod +x /usr/sbin/bakmysql.sh</code></p>\n<p>检查有没安装crond,如果没有，先安装 <code>yum -y install vixie-cron yum -y install crontabs</code></p>\n<p><code>vi /etc/crontab</code></p>\n<p>在最后一行中加入 <code>00 3 * * * root /usr/sbin/bakmysql.sh</code> 表示每天3点00分执行备份</p>\n<p>重启crontab <code>/etc/rc.d/init.d/crond restart</code> 或者 <code>service crond restart</code></p>\n<p>恢复数据备份文件：</p>\n<p>非压缩备份文件恢复：<code>mysql -u root -p dataname &lt; name2008010103.sql</code></p>\n<p>从压缩文件直接恢复：<code>gzip &lt; name2008010103.sql.gz | mysql -u root -p dataname</code> 或：<code>zcat name2008010103.sql.gz | mysql -u root -p</code></p>\n<h1 id=\"geth-命令行使用说明\"><a href=\"#geth-命令行使用说明\" class=\"headerlink\" title=\"geth 命令行使用说明\"></a>geth 命令行使用说明</h1><p>调用其它合约的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ABI_OBJECT 合约 ABI</span></div><div class=\"line\"><span class=\"comment\">// DEPLOY_ADDR 合约部署地址</span></div><div class=\"line\"><span class=\"comment\">// 两者都可以在 etherscan 查询到</span></div><div class=\"line\"><span class=\"keyword\">var</span> contract = eth.contract(ABI_OBJECT).at(DEPLOY_ADDR)</div><div class=\"line\"><span class=\"comment\">// 解锁转出钱包（转账才需要 查询不需要）</span></div><div class=\"line\">web3.personal.unlockAccount(<span class=\"string\">\"转出钱包地址\"</span>,<span class=\"string\">\"钱包密钥\"</span>,<span class=\"number\">300</span>)  <span class=\"comment\">// 解锁 300 秒</span></div><div class=\"line\"><span class=\"comment\">// 调用 ERC-20 标准的 transfer 方法</span></div><div class=\"line\">contract.transfer.sendTransaction(<span class=\"string\">\"收款地址\"</span>,<span class=\"string\">\"代币数量 * 合约 decimal\"</span>, &#123; <span class=\"attr\">from</span>: <span class=\"string\">\"转出钱包地址\"</span> &#125;)</div></pre></td></tr></table></figure>"},{"title":"有趣的面试题","date":"2017-05-12T05:40:41.000Z","_content":"\n## 在 [surmon.me](https://surmon.me/) 上看到的一个面试题\n\n```javascript\nlet greeting = 'My name is ${name}, age ${age}, I am a ${job.jobName}'\n\nlet employee = {\n  name: 'XiaoMing',\n  age: 11,\n  job: {\n    jobName: 'designer',\n    jobLevel: 'senior'\n  }\n}\n\nlet result = greeting.render(employee)\n\nconsole.log(result) // My name is XiaoMing, age 11, I am a designer\n\n```\n\n第一时间想到的方案就是使用正则表达式匹配到对应的属性,然后根据属性名称替换为实际值\n\n\n```javascript\n\nString.prototype.render = function(ctx){\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, attrName) => {\n    return ctx[attrName]\n  })\n}\n\n```\n\n然后问题出现了,当 `attrName` 匹配到 `\"job.jobName\"` 时,通过索引的方式取值会变成 `ctx[\"job.jobName\"]`,得到 `undefined`\n\n接下来,考虑拆分属性名称\n\n```javascript\n\nString.prototype.render = function(ctx){\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, attrName) => {\n    let attrPaths = attrName.split(/\\./)\n    return attrPaths.reduce((entity,attr)=> entity[attr], ctx)\n  })\n}\n\n```\n\n如此一来,就会将匹配到的 `\"job.jobName\"` 拆分为 `\"job\"` 和 `\"jobName\"` 两个路径,然后调用归约函数 第一次得到 `ctx[\"job\"]` 下次一得到 `ctx[\"job\"][\"jobName\"]` 然后返回该值.\n\n为了程序健壮可以再稍微完善一下\n```javascript\nString.prototype.render = function (ctx) {\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, key) => key.split('\\.').reduce((obj, attr) => (obj||{})[attr], ctx) || matchStr)\n}\n```\n\n最后,看到有人给出的答案是这样的\n\n```javascript\nString.prototype.render = function (ctx) {\n  with (ctx) {\n    return eval('`' + this + '`')\n  }\n}\n```\n\n给跪了, OTZ\n","source":"_posts/面试题.md","raw":"---\ntitle: 有趣的面试题\ndate: 2017-05-12 13:40:41\ntags: \n---\n\n## 在 [surmon.me](https://surmon.me/) 上看到的一个面试题\n\n```javascript\nlet greeting = 'My name is ${name}, age ${age}, I am a ${job.jobName}'\n\nlet employee = {\n  name: 'XiaoMing',\n  age: 11,\n  job: {\n    jobName: 'designer',\n    jobLevel: 'senior'\n  }\n}\n\nlet result = greeting.render(employee)\n\nconsole.log(result) // My name is XiaoMing, age 11, I am a designer\n\n```\n\n第一时间想到的方案就是使用正则表达式匹配到对应的属性,然后根据属性名称替换为实际值\n\n\n```javascript\n\nString.prototype.render = function(ctx){\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, attrName) => {\n    return ctx[attrName]\n  })\n}\n\n```\n\n然后问题出现了,当 `attrName` 匹配到 `\"job.jobName\"` 时,通过索引的方式取值会变成 `ctx[\"job.jobName\"]`,得到 `undefined`\n\n接下来,考虑拆分属性名称\n\n```javascript\n\nString.prototype.render = function(ctx){\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, attrName) => {\n    let attrPaths = attrName.split(/\\./)\n    return attrPaths.reduce((entity,attr)=> entity[attr], ctx)\n  })\n}\n\n```\n\n如此一来,就会将匹配到的 `\"job.jobName\"` 拆分为 `\"job\"` 和 `\"jobName\"` 两个路径,然后调用归约函数 第一次得到 `ctx[\"job\"]` 下次一得到 `ctx[\"job\"][\"jobName\"]` 然后返回该值.\n\n为了程序健壮可以再稍微完善一下\n```javascript\nString.prototype.render = function (ctx) {\n  return this.replace(/\\x24\\x7b([\\w\\.]+)\\x7d/g, (matchStr, key) => key.split('\\.').reduce((obj, attr) => (obj||{})[attr], ctx) || matchStr)\n}\n```\n\n最后,看到有人给出的答案是这样的\n\n```javascript\nString.prototype.render = function (ctx) {\n  with (ctx) {\n    return eval('`' + this + '`')\n  }\n}\n```\n\n给跪了, OTZ\n","slug":"面试题","published":1,"updated":"2018-06-20T04:18:11.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjimlyc3f0000zw2exdetijv1","content":"<h2 id=\"在-surmon-me-上看到的一个面试题\"><a href=\"#在-surmon-me-上看到的一个面试题\" class=\"headerlink\" title=\"在 surmon.me 上看到的一个面试题\"></a>在 <a href=\"https://surmon.me/\" target=\"_blank\" rel=\"external\">surmon.me</a> 上看到的一个面试题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">'My name is $&#123;name&#125;, age $&#123;age&#125;, I am a $&#123;job.jobName&#125;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employee = &#123;</div><div class=\"line\">  name: <span class=\"string\">'XiaoMing'</span>,</div><div class=\"line\">  age: <span class=\"number\">11</span>,</div><div class=\"line\">  job: &#123;</div><div class=\"line\">    jobName: <span class=\"string\">'designer'</span>,</div><div class=\"line\">    jobLevel: <span class=\"string\">'senior'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> result = greeting.render(employee)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// My name is XiaoMing, age 11, I am a designer</span></div></pre></td></tr></table></figure>\n<p>第一时间想到的方案就是使用正则表达式匹配到对应的属性,然后根据属性名称替换为实际值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, attrName) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx[attrName]</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后问题出现了,当 <code>attrName</code> 匹配到 <code>&quot;job.jobName&quot;</code> 时,通过索引的方式取值会变成 <code>ctx[&quot;job.jobName&quot;]</code>,得到 <code>undefined</code></p>\n<p>接下来,考虑拆分属性名称</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, attrName) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> attrPaths = attrName.split(<span class=\"regexp\">/\\./</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> attrPaths.reduce(<span class=\"function\">(<span class=\"params\">entity,attr</span>)=&gt;</span> entity[attr], ctx)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一来,就会将匹配到的 <code>&quot;job.jobName&quot;</code> 拆分为 <code>&quot;job&quot;</code> 和 <code>&quot;jobName&quot;</code> 两个路径,然后调用归约函数 第一次得到 <code>ctx[&quot;job&quot;]</code> 下次一得到 <code>ctx[&quot;job&quot;][&quot;jobName&quot;]</code> 然后返回该值.</p>\n<p>为了程序健壮可以再稍微完善一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, key) =&gt; key.split(<span class=\"string\">'\\.'</span>).reduce(<span class=\"function\">(<span class=\"params\">obj, attr</span>) =&gt;</span> (obj||&#123;&#125;)[attr], ctx) || matchStr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后,看到有人给出的答案是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span> (ctx) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">'`'</span> + <span class=\"keyword\">this</span> + <span class=\"string\">'`'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给跪了, OTZ</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在-surmon-me-上看到的一个面试题\"><a href=\"#在-surmon-me-上看到的一个面试题\" class=\"headerlink\" title=\"在 surmon.me 上看到的一个面试题\"></a>在 <a href=\"https://surmon.me/\" target=\"_blank\" rel=\"external\">surmon.me</a> 上看到的一个面试题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">'My name is $&#123;name&#125;, age $&#123;age&#125;, I am a $&#123;job.jobName&#125;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employee = &#123;</div><div class=\"line\">  name: <span class=\"string\">'XiaoMing'</span>,</div><div class=\"line\">  age: <span class=\"number\">11</span>,</div><div class=\"line\">  job: &#123;</div><div class=\"line\">    jobName: <span class=\"string\">'designer'</span>,</div><div class=\"line\">    jobLevel: <span class=\"string\">'senior'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> result = greeting.render(employee)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// My name is XiaoMing, age 11, I am a designer</span></div></pre></td></tr></table></figure>\n<p>第一时间想到的方案就是使用正则表达式匹配到对应的属性,然后根据属性名称替换为实际值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, attrName) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx[attrName]</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后问题出现了,当 <code>attrName</code> 匹配到 <code>&quot;job.jobName&quot;</code> 时,通过索引的方式取值会变成 <code>ctx[&quot;job.jobName&quot;]</code>,得到 <code>undefined</code></p>\n<p>接下来,考虑拆分属性名称</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, attrName) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> attrPaths = attrName.split(<span class=\"regexp\">/\\./</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> attrPaths.reduce(<span class=\"function\">(<span class=\"params\">entity,attr</span>)=&gt;</span> entity[attr], ctx)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一来,就会将匹配到的 <code>&quot;job.jobName&quot;</code> 拆分为 <code>&quot;job&quot;</code> 和 <code>&quot;jobName&quot;</code> 两个路径,然后调用归约函数 第一次得到 <code>ctx[&quot;job&quot;]</code> 下次一得到 <code>ctx[&quot;job&quot;][&quot;jobName&quot;]</code> 然后返回该值.</p>\n<p>为了程序健壮可以再稍微完善一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\x24\\x7b([\\w\\.]+)\\x7d/g</span>, (matchStr, key) =&gt; key.split(<span class=\"string\">'\\.'</span>).reduce(<span class=\"function\">(<span class=\"params\">obj, attr</span>) =&gt;</span> (obj||&#123;&#125;)[attr], ctx) || matchStr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后,看到有人给出的答案是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span> (ctx) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">'`'</span> + <span class=\"keyword\">this</span> + <span class=\"string\">'`'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给跪了, OTZ</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2lg564z0000lwpofteca3jq","tag_id":"cj2lg56540002lwpo137kjyg9","_id":"cj2lg565c0007lwpocra294ga"},{"post_id":"cj2lg56530001lwpoo916b3vp","tag_id":"cj2lg565a0006lwpojhz404og","_id":"cj2lg565h000blwpokpx6xqjo"},{"post_id":"cj2lg56570004lwpowayrkt0z","tag_id":"cj2lg565a0006lwpojhz404og","_id":"cj2lg565h000dlwpopmhcfr3w"},{"post_id":"cj2lg56590005lwpo3thmvy14","tag_id":"cj2lg565h000clwpoy37ho491","_id":"cj2lg565i000flwposqeubgdw"},{"post_id":"cj2lg565c0008lwpom8lhx4kq","tag_id":"cj2lg565i000elwpok72h5vhx","_id":"cj2lg565j000hlwpo2fvza7vi"},{"post_id":"cj2lg565e0009lwpot8a4oo9z","tag_id":"cj2lg565i000glwpot596fehq","_id":"cj2lg565j000ilwpohsf171re"},{"post_id":"cjejkk0bv00009d2e46j320pw","tag_id":"cjes6o6av00004j2eta5z6mlk","_id":"cjes6o6b100014j2eh803pwkk"}],"Tag":[{"name":"Gitbook 定制","_id":"cj2lg56540002lwpo137kjyg9"},{"name":"javascript","_id":"cj2lg565a0006lwpojhz404og"},{"name":"技术 社区","_id":"cj2lg565h000clwpoy37ho491"},{"name":"踩坑","_id":"cj2lg565i000elwpok72h5vhx"},{"name":"工具","_id":"cj2lg565i000glwpot596fehq"},{"name":"javascript 全栈","_id":"cj2lg5660000llwpoa94g29qa"},{"name":"shell 指令","_id":"cjes6o6av00004j2eta5z6mlk"}]}}